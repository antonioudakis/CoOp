package softeng.coop.ui.composites;

import java.util.ArrayList;
import java.util.List;
import java.util.Locale;

import softeng.coop.dataaccess.CoOp;
import softeng.coop.ui.ICoopContext;
import softeng.coop.ui.MultilingualTable;
import softeng.coop.ui.data.AccessCheck;
import softeng.coop.ui.presenters.ChooseCoopPresenter;
import softeng.coop.ui.viewdefinitions.IChooseCoopView;
import softeng.ui.vaadin.mvp.EventSubscription;
import softeng.ui.vaadin.mvp.IListener;
import softeng.ui.vaadin.mvp.IView;
import softeng.ui.vaadin.mvp.Presenter;

import com.vaadin.addon.beanvalidation.BeanValidationForm;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Item;
import com.vaadin.data.Property;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeNotifier;
import com.vaadin.data.util.BeanItem;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.ui.CheckBox;
import com.vaadin.ui.Component;
import com.vaadin.ui.Field;
import com.vaadin.ui.FormFieldFactory;
import com.vaadin.ui.VerticalLayout;

public class ChooseCoopComponent 
	extends CoopComponent<BeanItemContainer<CoOp>>
	implements IChooseCoopView
{
	@AutoGenerated
	private VerticalLayout mainLayout;

	@AutoGenerated
	private OptionsForm optionsForm;

	@AutoGenerated
	private MultilingualTable coopsTable;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	public static class OptionsForm
		extends BeanValidationForm<IChooseCoopView.FilterOptions>
	{
		private static final long serialVersionUID = 1L;

		public OptionsForm()
		{
			super(IChooseCoopView.FilterOptions.class);
		}
	}
	
	private static final long serialVersionUID = 1L;

	private EventSubscription<IChooseCoopView.FilterOptions, IListener<IChooseCoopView.FilterOptions>> queryChangeSubscription =
		new EventSubscription<IChooseCoopView.FilterOptions, IListener<FilterOptions>>();
	
	private BeanItem<IChooseCoopView.FilterOptions> filterOptionsItem;
	
	private CheckBox showInactiveCheckBox;
	
	private CheckBox showOtherDepartmentsCheckBox;
	
	private CheckBox showOtherUniversitiesCheckBox;
	
	private AccessCheck accessCheck;
	
	private static List<String> filterProperties = createFilterProperties();

	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public ChooseCoopComponent()
	{
		buildMainLayout();
		setCompositionRoot(mainLayout);
		
		this.filterOptionsItem = 
			new BeanItem<IChooseCoopView.FilterOptions>(
					new IChooseCoopView.FilterOptions());

	}

	private static List<String> createFilterProperties()
	{
		ArrayList<String> list = new ArrayList<String>(2);
		
		list.add("showInactive");
		list.add("showOtherDepartments");
		list.add("showOtherUniversities");
		
		return list;
	}

	@Override
	protected Presenter<BeanItemContainer<CoOp>, ICoopContext, ? extends IView<BeanItemContainer<CoOp>, ICoopContext>> supplyPresenter()
	{
		return new ChooseCoopPresenter(this);
	}

	@Override
	public void dataBind()
	{
		if (this.getModel() == null) return;
		
		if (this.getModel() != null)
		{
			
			coopsTable.setContainerDataSource(this.getModel());
			
			ArrayList<String> columnIds = new ArrayList<String>();
			
			if ((accessCheck.canBrowseDepartments() || accessCheck.canBrowseUniversities())
					&& accessCheck.canBrowseDepartmentsCoops())
			{
				columnIds.add("lesson.department.name");
			}
			
			columnIds.add("academicYear");
			columnIds.add("semester");
			columnIds.add("name");
			columnIds.add("active");
			columnIds.add("inRegistration");
			
			coopsTable.setVisibleColumns(columnIds.toArray());
			
			setupTableColumnCaptions();

		}
		
		// TODO: Handle allowCreateNew.
		
	}

	public void setupTableColumnCaptions()
	{
		coopsTable.setColumnHeader("lesson.department.name", getLocalizedString("DEPARTMENT_NAME_CAPTION"));
		coopsTable.setColumnHeader("academicYear", getLocalizedString("ACADEMIC_YEAR_CAPTION"));
		coopsTable.setColumnHeader("semester", getLocalizedString("SEMESTER_CAPTION"));
		coopsTable.setColumnHeader("name", getLocalizedString("NAME_CAPTION"));
		coopsTable.setColumnHeader("active", getLocalizedString("IS_ACTIVE_CAPTION"));
		coopsTable.setColumnHeader("inRegistration", getLocalizedString("IS_IN_REGISTRATION_CAPTION"));
	}

	@Override
	public void addQueryChangeListener(IListener<FilterOptions> listener)
	{
		this.queryChangeSubscription.add(listener);
	}

	@Override
	public void removeQueryChangeListener(IListener<FilterOptions> listener)
	{
		this.queryChangeSubscription.remove(listener);
	}

	@SuppressWarnings("serial")
	@Override
	protected void setupUI()
	{
		super.setupUI();
		
		this.optionsForm.setImmediate(true);
		this.optionsForm.setCaption(getLocalizedString("FILTER_OPTIONS_CAPTION"));
		
		accessCheck = new AccessCheck(getContext().getSession());
		
		this.optionsForm.setFormFieldFactory(new FormFieldFactory()
		{
			@Override
			public Field createField(Item item, Object propertyId, Component uiContext)
			{
				if (propertyId.equals("showInactive"))
				{
					showInactiveCheckBox = new CheckBox();
					showInactiveCheckBox.setCaption(getLocalizedString("SHOW_INACTIVE_CAPTION"));
					showInactiveCheckBox.setWidth("100%");
					
					return showInactiveCheckBox;
				}
				else if (propertyId.equals("showOtherDepartments") 
						&& accessCheck.canBrowseDepartments()
						&& accessCheck.canBrowseDepartmentsCoops())
				{
					showOtherDepartmentsCheckBox = new CheckBox();
					showOtherDepartmentsCheckBox.setCaption(getLocalizedString("SHOW_OTHER_DEPARTMENTS_CAPTION"));
					showOtherDepartmentsCheckBox.setWidth("100%");
					
					showOtherDepartmentsCheckBox.addListener(new Property.ValueChangeListener()
					{
						@Override
						public void valueChange(ValueChangeEvent event)
						{
							if (showOtherUniversitiesCheckBox != null)
							{
								showOtherUniversitiesCheckBox.setEnabled(filterOptionsItem.getBean().isShowOtherDepartments());
							}
						}
					});
					
					return showOtherDepartmentsCheckBox;
				}
				else if (propertyId.equals("showOtherUniversities")
						&& accessCheck.canBrowseUniversities()
						&& accessCheck.canBrowseDepartmentsCoops())
				{
					showOtherUniversitiesCheckBox = new CheckBox();
					showOtherUniversitiesCheckBox.setCaption(getLocalizedString("SHOW_OTHER_UNIVERSITIES_CAPTION"));
					showOtherUniversitiesCheckBox.setWidth("100%");
					showOtherUniversitiesCheckBox.setEnabled(filterOptionsItem.getBean().isShowOtherDepartments());
					
					return showOtherUniversitiesCheckBox;
				}
				
				return null;
			}
		});
		
		this.optionsForm.setItemDataSource(this.filterOptionsItem, filterProperties);
		
		for (Object propertyId : this.filterOptionsItem.getItemPropertyIds())
		{
			Property property = this.filterOptionsItem.getItemProperty(propertyId);
			
			if (!(property instanceof ValueChangeNotifier)) continue;
			
			ValueChangeNotifier notifier = (ValueChangeNotifier)property;
			
			notifier.addListener(new Property.ValueChangeListener()
			{
				
				@Override
				public void valueChange(ValueChangeEvent event)
				{
					queryChangeSubscription.fire(filterOptionsItem.getBean());
				}
			});
		}
		
		this.coopsTable.setSelectable(true);
		
	}

	@Override
	public FilterOptions getFilterOptions()
	{
		return this.filterOptionsItem.getBean();
	}

	@Override
	protected void setupLocalizedCaptions(Locale locale)
	{
		super.setupLocalizedCaptions(locale);
		
		this.optionsForm.setCaption(getLocalizedString("FILTER_OPTIONS_CAPTION"));
		
		if (showInactiveCheckBox != null)
			showInactiveCheckBox.setCaption(getLocalizedString("SHOW_INACTIVE_CAPTION"));

		if (showOtherDepartmentsCheckBox != null)
			showOtherDepartmentsCheckBox.setCaption(getLocalizedString("SHOW_OTHER_DEPARTMENTS_CAPTION"));

		setupTableColumnCaptions();
	}

	@Override
	public CoOp getSelectedCoOp()
	{
		return (CoOp)coopsTable.getValue();
	}

	@Override
	public void setSelectedCoOp(CoOp coop)
	{
		coopsTable.setValue(coop);
	}

	@Override
	public boolean allowCreateNew()
	{
		// TODO Implement creation of new co-ops.
		return false;
	}

	@Override
	public void setAllowCreateNew(boolean allowCreateNew)
	{
		// TODO Implement creation of new co-ops.
		
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout()
	{
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);
		mainLayout.setSpacing(true);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// coopsTable
		coopsTable = new MultilingualTable();
		coopsTable.setImmediate(false);
		coopsTable.setWidth("100.0%");
		coopsTable.setHeight("100.0%");
		mainLayout.addComponent(coopsTable);
		mainLayout.setExpandRatio(coopsTable, 1.0f);
		
		// optionsForm
		optionsForm = new OptionsForm();
		optionsForm.setCaption("Επιλογές");
		optionsForm.setImmediate(false);
		optionsForm.setWidth("100.0%");
		optionsForm.setHeight("-1px");
		mainLayout.addComponent(optionsForm);
		
		return mainLayout;
	}
	
	@Override
	public void setReadOnly(boolean readOnly)
	{
		super.setReadOnly(readOnly);
		
		coopsTable.setReadOnly(readOnly);
		coopsTable.setSelectable(!readOnly);
	}
}
