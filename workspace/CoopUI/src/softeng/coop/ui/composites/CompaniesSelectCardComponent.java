package softeng.coop.ui.composites;

import java.util.ArrayList;
import java.util.Locale;

import softeng.coop.dataaccess.Category;
import softeng.coop.dataaccess.Company;
import softeng.coop.ui.ICoopContext;
import softeng.coop.ui.data.DataItem;
import softeng.coop.ui.data.DataItemContainer;
import softeng.coop.ui.forms.CompanyForm;
import softeng.coop.ui.presenters.CompaniesSelectCardPresenter;
import softeng.coop.ui.viewdefinitions.ICompaniesSelectView;
import softeng.coop.ui.viewdefinitions.IHierarchyView;
import softeng.coop.ui.viewdefinitions.viewmodels.ElementExecutionVote;
import softeng.ui.vaadin.mvp.EventSubscription;
import softeng.ui.vaadin.mvp.IListener;
import softeng.ui.vaadin.mvp.IView;
import softeng.ui.vaadin.mvp.IViewListener;
import softeng.ui.vaadin.mvp.ModelEvent;
import softeng.ui.vaadin.mvp.Presenter;
import softeng.ui.vaadin.mvp.ViewEvent;
import softeng.ui.vaadin.mvp.ViewEventSubscription;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Item;
import com.vaadin.data.Property;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.event.FieldEvents;
import com.vaadin.event.FieldEvents.TextChangeEvent;
import com.vaadin.terminal.ThemeResource;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Component;
import com.vaadin.ui.Field;
import com.vaadin.ui.FormFieldFactory;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Table;
import com.vaadin.ui.TextArea;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;

public class CompaniesSelectCardComponent 
extends CoopComponent<DataItemContainer<Company>>
implements ICompaniesSelectView
{
	@AutoGenerated
	private VerticalLayout mainLayout;

	@AutoGenerated
	private HorizontalLayout detailsHorizontalLayout;

	@AutoGenerated
	private CompanyForm commentsForm;

	@AutoGenerated
	private CompanyForm branchesForm;

	@AutoGenerated
	private CompanyForm basicCompanyForm;

	@AutoGenerated
	private HorizontalLayout cascadeHorizontalLayout;

	@AutoGenerated
	private VerticalLayout selectedCompaniesVerticalLayout;

	@AutoGenerated
	private Table coopCompaniesTable;

	@AutoGenerated
	private VerticalLayout selectButtonsVerticalLayout;

	@AutoGenerated
	private Button removeButton;

	@AutoGenerated
	private Button addButton;

	@AutoGenerated
	private VerticalLayout foundCompaniesVerticalLayout;

	@AutoGenerated
	private Table foundCompaniesTable;

	@AutoGenerated
	private VerticalLayout categoriesVerticalLayout;

	@AutoGenerated
	private TextField companyNameSearchTextField;

	@AutoGenerated
	private CategoriesComponent categoriesComponent;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	private static final long serialVersionUID = 1L;
	
	private static ArrayList<String> companyTablePropertyIds = 
		getCompanyTablePropertyIds();
	
	private ViewEventSubscription<DataItemContainer<Company>, ICoopContext, ICompaniesSelectView> 
		searchEventSubscription =
			new ViewEventSubscription<DataItemContainer<Company>, ICoopContext, ICompaniesSelectView>();
	
	private EventSubscription<ModelEvent<Company>, IListener<ModelEvent<Company>>> addEventSubscription =
		new EventSubscription<ModelEvent<Company>, IListener<ModelEvent<Company>>>();

	private EventSubscription<ModelEvent<Company>, IListener<ModelEvent<Company>>> removeEventSubscription =
		new EventSubscription<ModelEvent<Company>, IListener<ModelEvent<Company>>>();
	
	private EventSubscription<ElementExecutionVote<Company>, IListener<ElementExecutionVote<Company>>> canRemoveEventSubscription =
		new EventSubscription<ElementExecutionVote<Company>, IListener<ElementExecutionVote<Company>>>();
	
	private TextField companyNameTextField;
	
	private TextField taxCodeTextField;
	
	private TextField emailTextField;
	
	private TextField webSiteTextField;
	
//	private CompanyPersonsTableComponent companyPersonsTableComponent;
	
	private BranchesTableComponent branchesTableComponent;
	
	private TextArea commentsTextArea;
	
	private CompanyPersonPickerField contactPersonPickerField;
	
	private DataItemContainer<Company> foundCompaniesContainer;
	
	private static ArrayList<String> basicCompanyPropertyIds = 
		getBasicCompanyPropertyIds();

	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public CompaniesSelectCardComponent()
	{
		buildMainLayout();
		setCompositionRoot(mainLayout);
	}

	private static ArrayList<String> getBasicCompanyPropertyIds()
	{
		ArrayList<String> propertyIds = new ArrayList<String>();
		
		propertyIds.add("name");
		propertyIds.add("taxCode");
		propertyIds.add("email");
		propertyIds.add("webSite");
		propertyIds.add("comments");
		propertyIds.add("contactPerson");
		
		return propertyIds;
	}

	private static ArrayList<String> getCompanyTablePropertyIds()
	{
		ArrayList<String> propertyIds = new ArrayList<String>();
		
		propertyIds.add("name");
		propertyIds.add("category.name");
		
		return propertyIds;
	}

	@Override
	public void dataBind()
	{
		coopCompaniesTable.setContainerDataSource(getModel());
		if (getModel() != null)
		{
			coopCompaniesTable.setVisibleColumns(companyTablePropertyIds.toArray());
			
			setupCompanyTableColumnLocalizedCaptions(coopCompaniesTable);
		}
	}

	private void setupCompanyTableColumnLocalizedCaptions(Table table)
	{
		// Refresh contents.
		table.setColumnHeader("name", getLocalizedString("COMPANY_NAME_CAPTION"));
		table.setColumnHeader("category.name", getLocalizedString("CATEGORY_NAME_CAPTION"));

		if (table.getContainerDataSource() instanceof DataItemContainer)
		{
			table.setContainerDataSource(table.getContainerDataSource());
			table.setVisibleColumns(companyTablePropertyIds.toArray());
		}
	}

	@SuppressWarnings("serial")
	@Override
	protected void setupUI()
	{
		super.setupUI();
		
		addButton.setCaption(null);
		addButton.setIcon(new ThemeResource("../images/actions/add.png"));

		addButton.addListener(new Button.ClickListener()
		{
			@Override
			public void buttonClick(ClickEvent event)
			{
				onAdd();
			}
		});
		
		removeButton.setCaption(null);
		removeButton.setIcon(new ThemeResource("../images/actions/remove.png"));
		
		removeButton.addListener(new Button.ClickListener()
		{
			@Override
			public void buttonClick(ClickEvent event)
			{
				onRemove();
			}
		});
		
		categoriesComponent.setAddVisible(false);
		categoriesComponent.setEditVisible(false);
		categoriesComponent.setDeleteVisible(false);
		categoriesComponent.setImmediate(true);
		
		categoriesComponent.addSelectedChangeListener(new IListener<ModelEvent<Category>>()
		{
			@Override
			public void onEvent(ModelEvent<Category> event)
			{
				onSearch();
			}
		});
		
		companyNameSearchTextField.setIcon(new ThemeResource("../images/actions/find.png"));
		
		companyNameSearchTextField.addListener(new FieldEvents.TextChangeListener()
		{
			@Override
			public void textChange(TextChangeEvent event)
			{
				companyNameSearchTextField.setValue(event.getText());
				onSearch();
			}
		});
		
		foundCompaniesTable.setSelectable(true);
		foundCompaniesTable.setImmediate(true);
		
		foundCompaniesTable.addListener(new Property.ValueChangeListener()
		{
			@Override
			public void valueChange(ValueChangeEvent event)
			{
				onFocusedCompanyChange((Company)foundCompaniesTable.getValue());
			}
		});
		
		coopCompaniesTable.setSelectable(true);
		coopCompaniesTable.setImmediate(true);
		
		coopCompaniesTable.addListener(new Property.ValueChangeListener()
		{
			@Override
			public void valueChange(ValueChangeEvent event)
			{
				onFocusedCompanyChange((Company)coopCompaniesTable.getValue());
			}
		});
		
		basicCompanyForm.setReadOnly(true);
		
		basicCompanyForm.setFormFieldFactory(new FormFieldFactory()
		{
			@Override
			public Field createField(Item item, Object propertyId, Component uiContext)
			{
				if (propertyId.equals("name"))
				{
					companyNameTextField = new TextField();
					companyNameTextField.setCaption(getLocalizedString("COMPANY_NAME_CAPTION"));
					companyNameTextField.setWidth("100%");
					companyNameTextField.setNullRepresentation("-");
					
					return companyNameTextField;
				}
				else if (propertyId.equals("taxCode"))
				{
					taxCodeTextField = new TextField();
					taxCodeTextField.setCaption(getLocalizedString("TAX_CODE_CAPTION"));
					taxCodeTextField.setWidth("100%");
					taxCodeTextField.setNullRepresentation("-");
					
					return taxCodeTextField;
				}
				else if (propertyId.equals("email"))
				{
					emailTextField = new TextField();
					emailTextField.setCaption(getLocalizedString("EMAIL_CAPTION"));
					emailTextField.setWidth("100%");
					emailTextField.setNullRepresentation("-");
					
					return emailTextField;
				}
				else if (propertyId.equals("webSite"))
				{
					webSiteTextField = new TextField();
					webSiteTextField.setCaption(getLocalizedString("WEB_SITE_CAPTION"));
					webSiteTextField.setWidth("100%");
					webSiteTextField.setNullRepresentation("-");
					
					return webSiteTextField;
				}
				else if (propertyId.equals("contactPerson"))
				{
					contactPersonPickerField = new CompanyPersonPickerField();
					contactPersonPickerField.setCaption(getLocalizedString("CONTACT_PERSON_CAPTION"));
					contactPersonPickerField.setWidth("100%");
					contactPersonPickerField.setClearAllowed(false);
					
					return contactPersonPickerField;
				}
				
				return null;
			}
		});
		
		commentsForm.setReadOnly(true);
		commentsForm.setLayout(new VerticalLayout());
		
		commentsForm.setFormFieldFactory(new FormFieldFactory()
		{
			@Override
			public Field createField(Item item, Object propertyId, Component uiContext)
			{
//				if (propertyId.equals("persons"))
//				{
//					companyPersonsTableComponent = new CompanyPersonsTableComponent();
//					companyPersonsTableComponent.setCaption(getLocalizedString("CONTACTS_CAPTION"));
//					companyPersonsTableComponent.setWidth("100%");
//					companyPersonsTableComponent.setAddVisible(false);
//					companyPersonsTableComponent.setEditVisible(false);
//					companyPersonsTableComponent.setDeleteVisible(false);
//					
//					return companyPersonsTableComponent;
//				}
				if (propertyId.equals("comments"))
				{
					commentsTextArea = new TextArea();
					commentsTextArea.setCaption(getLocalizedString("COMMENTS_CAPTION"));
					commentsTextArea.setWidth("100%");
					commentsTextArea.setNullRepresentation("-");
					
					return commentsTextArea;
				}
				
				return null;
			}
		});
		
		branchesForm.setReadOnly(true);
		branchesForm.setLayout(new VerticalLayout());
		
		branchesForm.setFormFieldFactory(new FormFieldFactory()
		{
			@Override
			public Field createField(Item item, Object propertyId, Component uiContext)
			{
				if (propertyId.equals("branches"))
				{
					branchesTableComponent = new BranchesTableComponent();
					branchesTableComponent.setCaption(getLocalizedString("BRANCHES_CAPTION"));
					branchesTableComponent.setWidth("100%");
					//branchesTableComponent.setParentModel(((BeanItem<Company>)item).getBean());
					
					return branchesTableComponent;
				}
				
				return null;
			}
		});
		
	}

	protected void onFocusedCompanyChange(Company value)
	{
		DataItem<Company> item;
		
		if (value != null)
		{
			item = new DataItem<Company>(
					value, getContext().getSession().getBaseManager());
		}
		else
		{
			item = null;
		}
		
		basicCompanyForm.setItemDataSource(item, basicCompanyPropertyIds);
		branchesForm.setItemDataSource(item);
		commentsForm.setItemDataSource(item);
	}

	protected void onSearch()
	{
		companyNameSearchTextField.commit();
		
		searchEventSubscription.fire(
				new ViewEvent<DataItemContainer<Company>, ICoopContext, ICompaniesSelectView>(this));
	}

	protected void onRemove()
	{
		Company company = getSelectedCoopCompany();
		
		if (company == null || getModel() == null) return;
		
		ElementExecutionVote<Company> canRemoveVote = new ElementExecutionVote<Company>(company);
		
		canRemoveEventSubscription.fire(canRemoveVote);
		
		if (canRemoveVote.isFailed()) return;
		
		getModel().removeItem(company);
		
		removeEventSubscription.fire(new ModelEvent<Company>(company));
	}

	protected void onAdd()
	{
		Company company = getSelectedFoundCompany();
		
		if (company == null || getModel() == null) return;
		
		getModel().addBean(company);
		
		addEventSubscription.fire(new ModelEvent<Company>(company));
	}
	
	private Company getSelectedFoundCompany()
	{
		return (Company)foundCompaniesTable.getValue();
	}
	
	private Company getSelectedCoopCompany()
	{
		return (Company)coopCompaniesTable.getValue();
	}

	@Override
	protected void setupLocalizedCaptions(Locale locale)
	{
		super.setupLocalizedCaptions(locale);
		
		categoriesComponent.setCaption(getLocalizedString("CATEGORIES_CAPTION"));
		
		foundCompaniesTable.setCaption(getLocalizedString("FOUND_COMPANIES_CAPTION"));
		
		addButton.setDescription(getLocalizedString("ADD_DESCRIPTION"));
		
		removeButton.setDescription(getLocalizedString("REMOVE_DESCRIPTION"));
		
		coopCompaniesTable.setCaption(getLocalizedString("SELECTED_COMPANIES_CAPTION"));
		
		companyNameSearchTextField.setCaption(getLocalizedString("COMPANY_NAME_CAPTION"));
		
		setupCompanyTableColumnLocalizedCaptions(coopCompaniesTable);
		
		setupCompanyTableColumnLocalizedCaptions(foundCompaniesTable);
		
		if (companyNameTextField != null)
			companyNameTextField.setCaption(getLocalizedString("COMPANY_NAME_CAPTION"));

		if (taxCodeTextField != null)
			taxCodeTextField.setCaption(getLocalizedString("TAX_CODE_CAPTION"));
		
		if (emailTextField != null)
			emailTextField.setCaption(getLocalizedString("EMAIL_CAPTION"));
		
		if (webSiteTextField != null)
			webSiteTextField.setCaption(getLocalizedString("WEB_SITE_CAPTION"));
		
		if (contactPersonPickerField != null)
			contactPersonPickerField.setCaption(getLocalizedString("CONTACT_PERSON_CAPTION"));
		
//		if (companyPersonsTableComponent != null)
//			companyPersonsTableComponent.setCaption(getLocalizedString("CONTACTS_CAPTION"));
		
		if (branchesTableComponent != null)
			branchesTableComponent.setCaption(getLocalizedString("BRANCHES_CAPTION"));

		if (commentsTextArea != null)
			commentsTextArea.setCaption(getLocalizedString("COMMENTS_CAPTION"));
	}

	@Override
	public IHierarchyView<Category> getCategoriesView()
	{
		return categoriesComponent;
	}

	@Override
	public Field getCompanyNameSearchField()
	{
		return companyNameSearchTextField;
	}

	@Override
	public void addSearchListener(IViewListener<DataItemContainer<Company>, ICoopContext, ICompaniesSelectView> listener)
	{
		searchEventSubscription.add(listener);
	}

	@Override
	public void removeSearchListener(IViewListener<DataItemContainer<Company>, ICoopContext, ICompaniesSelectView> listener)
	{
		searchEventSubscription.remove(listener);
	}

	@Override
	protected Presenter<DataItemContainer<Company>, ICoopContext, ? extends IView<DataItemContainer<Company>, ICoopContext>> supplyPresenter()
	{
		return new CompaniesSelectCardPresenter(this);
	}

	@Override
	public void addAddCompanyListener(IListener<ModelEvent<Company>> listener)
	{
		addEventSubscription.add(listener);
	}

	@Override
	public void removeAddCompanyListener(IListener<ModelEvent<Company>> listener)
	{
		addEventSubscription.remove(listener);
	}

	@Override
	public void addRemoveCompanyListener(IListener<ModelEvent<Company>> listener)
	{
		removeEventSubscription.add(listener);
	}

	@Override
	public void removeRemoveCompanyListener(IListener<ModelEvent<Company>> listener)
	{
		removeEventSubscription.remove(listener);
	}

	@Override
	public DataItemContainer<Company> getFoundCompanies()
	{
		return foundCompaniesContainer;
	}

	@Override
	public void setFoundCompanies(DataItemContainer<Company> foundCompaniesContainer)
	{
		this.foundCompaniesContainer = foundCompaniesContainer;
		
		this.foundCompaniesTable.setContainerDataSource(foundCompaniesContainer);
		this.foundCompaniesTable.setVisibleColumns(companyTablePropertyIds.toArray());
		this.setupCompanyTableColumnLocalizedCaptions(foundCompaniesTable);
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout()
	{
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("-1px");
		mainLayout.setMargin(false);
		mainLayout.setSpacing(true);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("-1px");
		
		// cascadeHorizontalLayout
		cascadeHorizontalLayout = buildCascadeHorizontalLayout();
		mainLayout.addComponent(cascadeHorizontalLayout);
		
		// detailsHorizontalLayout
		detailsHorizontalLayout = buildDetailsHorizontalLayout();
		mainLayout.addComponent(detailsHorizontalLayout);
		
		return mainLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildCascadeHorizontalLayout()
	{
		// common part: create layout
		cascadeHorizontalLayout = new HorizontalLayout();
		cascadeHorizontalLayout.setImmediate(false);
		cascadeHorizontalLayout.setWidth("100.0%");
		cascadeHorizontalLayout.setHeight("-1px");
		cascadeHorizontalLayout.setMargin(false);
		cascadeHorizontalLayout.setSpacing(true);
		
		// categoriesVerticalLayout
		categoriesVerticalLayout = buildCategoriesVerticalLayout();
		cascadeHorizontalLayout.addComponent(categoriesVerticalLayout);
		cascadeHorizontalLayout.setExpandRatio(categoriesVerticalLayout, 0.2f);
		
		// foundCompaniesVerticalLayout
		foundCompaniesVerticalLayout = buildFoundCompaniesVerticalLayout();
		cascadeHorizontalLayout.addComponent(foundCompaniesVerticalLayout);
		cascadeHorizontalLayout.setExpandRatio(foundCompaniesVerticalLayout, 0.35f);
		
		// selectButtonsVerticalLayout
		selectButtonsVerticalLayout = buildSelectButtonsVerticalLayout();
		cascadeHorizontalLayout.addComponent(selectButtonsVerticalLayout);
		cascadeHorizontalLayout.setExpandRatio(selectButtonsVerticalLayout, 0.1f);
		cascadeHorizontalLayout.setComponentAlignment(selectButtonsVerticalLayout, new Alignment(48));
		
		// selectedCompaniesVerticalLayout
		selectedCompaniesVerticalLayout = buildSelectedCompaniesVerticalLayout();
		cascadeHorizontalLayout.addComponent(selectedCompaniesVerticalLayout);
		cascadeHorizontalLayout.setExpandRatio(selectedCompaniesVerticalLayout, 0.35f);
		
		return cascadeHorizontalLayout;
	}

	@SuppressWarnings("deprecation")
	@AutoGenerated
	private VerticalLayout buildCategoriesVerticalLayout()
	{
		// common part: create layout
		categoriesVerticalLayout = new VerticalLayout();
		categoriesVerticalLayout.setImmediate(false);
		categoriesVerticalLayout.setWidth("100.0%");
		categoriesVerticalLayout.setHeight("-1px");
		categoriesVerticalLayout.setMargin(false);
		categoriesVerticalLayout.setSpacing(true);
		
		// categoriesComponent
		categoriesComponent = new CategoriesComponent();
		categoriesComponent.setCaption("Categories");
		categoriesComponent.setImmediate(false);
		categoriesComponent.setWidth("100.0%");
		categoriesComponent.setHeight("260px");
		categoriesVerticalLayout.addComponent(categoriesComponent);
		
		// companyNameSearchTextField
		companyNameSearchTextField = new TextField();
		companyNameSearchTextField.setCaption("Company name");
		companyNameSearchTextField.setImmediate(false);
		companyNameSearchTextField.setWidth("100.0%");
		companyNameSearchTextField.setHeight("-1px");
		companyNameSearchTextField.setSecret(false);
		categoriesVerticalLayout.addComponent(companyNameSearchTextField);
		
		return categoriesVerticalLayout;
	}

	@AutoGenerated
	private VerticalLayout buildFoundCompaniesVerticalLayout()
	{
		// common part: create layout
		foundCompaniesVerticalLayout = new VerticalLayout();
		foundCompaniesVerticalLayout.setImmediate(false);
		foundCompaniesVerticalLayout.setWidth("100.0%");
		foundCompaniesVerticalLayout.setHeight("-1px");
		foundCompaniesVerticalLayout.setMargin(false);
		
		// foundCompaniesTable
		foundCompaniesTable = new Table();
		foundCompaniesTable.setCaption("Found companies");
		foundCompaniesTable.setImmediate(false);
		foundCompaniesTable.setWidth("100.0%");
		foundCompaniesTable.setHeight("-1px");
		foundCompaniesVerticalLayout.addComponent(foundCompaniesTable);
		
		return foundCompaniesVerticalLayout;
	}

	@AutoGenerated
	private VerticalLayout buildSelectButtonsVerticalLayout()
	{
		// common part: create layout
		selectButtonsVerticalLayout = new VerticalLayout();
		selectButtonsVerticalLayout.setImmediate(false);
		selectButtonsVerticalLayout.setWidth("100.0%");
		selectButtonsVerticalLayout.setHeight("-1px");
		selectButtonsVerticalLayout.setMargin(false);
		selectButtonsVerticalLayout.setSpacing(true);
		
		// addButton
		addButton = new Button();
		addButton.setCaption("Add");
		addButton.setImmediate(true);
		addButton.setWidth("48px");
		addButton.setHeight("-1px");
		selectButtonsVerticalLayout.addComponent(addButton);
		selectButtonsVerticalLayout.setComponentAlignment(addButton, new Alignment(20));
		
		// removeButton
		removeButton = new Button();
		removeButton.setCaption("Rem.");
		removeButton.setImmediate(true);
		removeButton.setWidth("48px");
		removeButton.setHeight("-1px");
		selectButtonsVerticalLayout.addComponent(removeButton);
		selectButtonsVerticalLayout.setComponentAlignment(removeButton, new Alignment(20));
		
		return selectButtonsVerticalLayout;
	}

	@AutoGenerated
	private VerticalLayout buildSelectedCompaniesVerticalLayout()
	{
		// common part: create layout
		selectedCompaniesVerticalLayout = new VerticalLayout();
		selectedCompaniesVerticalLayout.setImmediate(false);
		selectedCompaniesVerticalLayout.setWidth("100.0%");
		selectedCompaniesVerticalLayout.setHeight("-1px");
		selectedCompaniesVerticalLayout.setMargin(false);
		
		// coopCompaniesTable
		coopCompaniesTable = new Table();
		coopCompaniesTable.setCaption("Selected companies");
		coopCompaniesTable.setImmediate(false);
		coopCompaniesTable.setWidth("100.0%");
		coopCompaniesTable.setHeight("-1px");
		selectedCompaniesVerticalLayout.addComponent(coopCompaniesTable);
		
		return selectedCompaniesVerticalLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildDetailsHorizontalLayout()
	{
		// common part: create layout
		detailsHorizontalLayout = new HorizontalLayout();
		detailsHorizontalLayout.setImmediate(false);
		detailsHorizontalLayout.setWidth("100.0%");
		detailsHorizontalLayout.setHeight("-1px");
		detailsHorizontalLayout.setMargin(false);
		detailsHorizontalLayout.setSpacing(true);
		
		// basicCompanyForm
		basicCompanyForm = new CompanyForm();
		basicCompanyForm.setImmediate(false);
		basicCompanyForm.setWidth("100.0%");
		basicCompanyForm.setHeight("-1px");
		detailsHorizontalLayout.addComponent(basicCompanyForm);
		
		// branchesForm
		branchesForm = new CompanyForm();
		branchesForm.setImmediate(false);
		branchesForm.setWidth("100.0%");
		branchesForm.setHeight("-1px");
		detailsHorizontalLayout.addComponent(branchesForm);
		
		// commentsForm
		commentsForm = new CompanyForm();
		commentsForm.setImmediate(false);
		commentsForm.setWidth("100.0%");
		commentsForm.setHeight("-1px");
		detailsHorizontalLayout.addComponent(commentsForm);
		
		return detailsHorizontalLayout;
	}

	@Override
	public void addCanRemoveCompanyListener(IListener<ElementExecutionVote<Company>> listener)
	{
		canRemoveEventSubscription.add(listener);
	}

	@Override
	public void removeCanRemoveCompanyListener(IListener<ElementExecutionVote<Company>> listener)
	{
		canRemoveEventSubscription.remove(listener);
	}

}
