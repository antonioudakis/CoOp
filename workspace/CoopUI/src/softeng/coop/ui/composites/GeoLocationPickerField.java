package softeng.coop.ui.composites;

import java.util.List;
import java.util.Locale;
import java.util.Vector;

import softeng.coop.dataaccess.GeoLocation;
import softeng.coop.ui.ICoopContext;
import softeng.coop.ui.dialogs.MapDialog;
import softeng.coop.ui.viewdefinitions.IOkCancelView;
import softeng.coop.ui.viewdefinitions.viewmodels.OkCancelViewModel;
import softeng.ui.vaadin.mvp.IView;
import softeng.ui.vaadin.mvp.IViewListener;
import softeng.ui.vaadin.mvp.Presenter;
import softeng.ui.vaadin.mvp.ViewEvent;

import com.vaadin.addon.beanvalidation.BeanValidationForm;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Item;
import com.vaadin.data.util.BeanItem;
import com.vaadin.terminal.ThemeResource;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Component;
import com.vaadin.ui.Field;
import com.vaadin.ui.FormFieldFactory;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.TextField;

@SuppressWarnings("serial")
public class GeoLocationPickerField extends CoopField<GeoLocation>
{
	@AutoGenerated
	private HorizontalLayout mainLayout;

	@AutoGenerated
	private Button browseButton;

	@AutoGenerated
	private Button clearButton;

	@AutoGenerated
	private GeoLocationForm form;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	public static class GeoLocationForm  
		extends BeanValidationForm<GeoLocation>
	{
		public GeoLocationForm()
		{
			super(GeoLocation.class);
		}
	}
	
	private static final long serialVersionUID = 1L;
	
	private TextField longtitudeTextField;
	private TextField latitudeTextField;
	
	private BeanItem<GeoLocation> item;
	
	private static List<String> propertyIds = createPropertyIds();

	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public GeoLocationPickerField()
	{
		buildMainLayout();
		setCompositionRoot(mainLayout);

		this.browseButton.addListener(new Button.ClickListener()
		{
			@Override
			public void buttonClick(ClickEvent event)
			{
				showGoogleMapDialog();
			}
		});
		
		this.clearButton.addListener(new Button.ClickListener()
		{
			
			@Override
			public void buttonClick(ClickEvent event)
			{
				clear();
			}
		});

		this.form.setFormFieldFactory(new FormFieldFactory()
		{
			@Override
			public Field createField(Item item, Object propertyId, Component uiContext)
			{
				if (propertyId.equals("longtitude"))
				{
					longtitudeTextField = new TextField();
					
					if (getApplication() != null)
						longtitudeTextField.setCaption(getLocalizedString("LONGITUDE_CAPTION"));
					
					longtitudeTextField.setReadOnly(isReadOnly());
					longtitudeTextField.setWidth("100%");
					
					return longtitudeTextField;
				}
				else if (propertyId.equals("latitude"))
				{
					latitudeTextField = new TextField();
					
					if (getApplication() != null)
						latitudeTextField.setCaption(getLocalizedString("LATITUDE_CAPTION"));
					
					latitudeTextField.setReadOnly(isReadOnly());
					latitudeTextField.setWidth("100%");
					
					return latitudeTextField;
				}
	
				return null;
			}
		});
		
	}

	private static List<String> createPropertyIds()
	{
		Vector<String> properties = new Vector<String>(2);
		
		properties.add("latitude");
		properties.add("longtitude");
		
		return properties;
	}

	protected void clear()
	{
		if (isReadOnly()) return;
		setValue(null);
	}

	public GeoLocationPickerField(String caption)
	{
		this();
		this.setCaption(caption);
	}
	
	@Override
	public Class<?> getType()
	{
		return GeoLocation.class;
	}

	@Override
	protected Presenter<GeoLocation, ICoopContext, ? extends IView<GeoLocation, ICoopContext>> supplyPresenter()
	{
		return null;
	}

	@Override
	public void dataBind()
	{
		if (this.getModel() == null)
		{
			this.setModel(new GeoLocation());
		}
		
		this.item = new BeanItem<GeoLocation>(getModel());
		
		this.form.setItemDataSource(item, propertyIds);
		
		if (this.isReadOnly() && this.isGeoLocationNotSet())
			browseButton.setEnabled(false);
	}

	@Override
	protected void setupUI()
	{
		super.setupUI();
		
		this.browseButton.setWidth("48px");
		this.clearButton.setWidth("48px");
		
		this.browseButton.setCaption(null);
		this.clearButton.setCaption(null);
		
		this.browseButton.setIcon(new ThemeResource("../images/actions/find.png"));
		this.clearButton.setIcon(new ThemeResource("../images/actions/editdelete.png"));

		HorizontalLayout formLayout = new HorizontalLayout();
		
		formLayout.setWidth("100%");
		
		formLayout.setSpacing(true);
		
		this.form.setLayout(formLayout);

	}

	protected void showGoogleMapDialog()
	{
		if (this.item.getBean() != null)
		{
			GeoLocation initialLocation = new GeoLocation();
			
			if (isGeoLocationNotSet())
			{
				if (this.isReadOnly()) return;
				
				// NTUA center of the Earth.
				initialLocation.setLongtitude(23.784837);
				initialLocation.setLatitude(37.975183);
			}
			else
			{
				initialLocation.setLatitude(this.item.getBean().getLatitude());
				initialLocation.setLongtitude(this.item.getBean().getLongtitude());
			}
			
			final MapDialog dialog = new MapDialog();
			
			dialog.setReadOnly(this.isReadOnly());
			
			BeanItem<GeoLocation> initialItem = new BeanItem<GeoLocation>(initialLocation);
			
			dialog.setModel(initialItem);
		
			getApplication().getMainWindow().addWindow(dialog);
			
			dialog.dataBind();
			
			dialog.getOkCancelView().addOkListener(new IViewListener<OkCancelViewModel, ICoopContext, IOkCancelView>()
			{
				@Override
				public void onEvent(ViewEvent<OkCancelViewModel, ICoopContext, IOkCancelView> event)
				{
					setValue(dialog.getModel().getBean());
				}
			});
		}
	}

	private boolean isGeoLocationNotSet()
	{
		return super.getModel() == null || 
				super.getModel().getLongtitude() == 0.0 && super.getModel().getLatitude() == 0.0;
	}

	@Override
	protected void setupLocalizedCaptions(Locale locale)
	{
		super.setupLocalizedCaptions(locale);
		
		if (longtitudeTextField != null)
			longtitudeTextField.setCaption(getLocalizedString("LONGITUDE_CAPTION"));
		
		if (latitudeTextField != null)
			latitudeTextField.setCaption(getLocalizedString("LATITUDE_CAPTION"));
		
		browseButton.setDescription(getLocalizedString("BROWSE_CAPTION"));
		clearButton.setDescription(getLocalizedString("CLEAR_CAPTION"));
	}

	@Override
	public void setReadOnly(boolean readOnly)
	{
		super.setReadOnly(readOnly);
		
		if (this.latitudeTextField != null)
			this.latitudeTextField.setReadOnly(readOnly);
		
		if (this.longtitudeTextField != null)
			this.longtitudeTextField.setReadOnly(readOnly);
		
		clearButton.setEnabled(!readOnly);
		
		if (readOnly && isGeoLocationNotSet()) browseButton.setEnabled(false);
	}

	@AutoGenerated
	private HorizontalLayout buildMainLayout()
	{
		// common part: create layout
		mainLayout = new HorizontalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("-1px");
		mainLayout.setMargin(false);
		mainLayout.setSpacing(true);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("-1px");
		
		// form
		form = new GeoLocationForm();
		form.setImmediate(false);
		form.setWidth("100.0%");
		form.setHeight("-1px");
		mainLayout.addComponent(form);
		mainLayout.setExpandRatio(form, 1.0f);
		
		// clearButton
		clearButton = new Button();
		clearButton.setCaption("Clear");
		clearButton.setImmediate(false);
		clearButton.setWidth("100px");
		clearButton.setHeight("-1px");
		mainLayout.addComponent(clearButton);
		mainLayout.setComponentAlignment(clearButton, new Alignment(10));
		
		// browseButton
		browseButton = new Button();
		browseButton.setCaption("Browse...");
		browseButton.setImmediate(true);
		browseButton.setWidth("100px");
		browseButton.setHeight("-1px");
		mainLayout.addComponent(browseButton);
		mainLayout.setComponentAlignment(browseButton, new Alignment(10));
		
		return mainLayout;
	}
}
