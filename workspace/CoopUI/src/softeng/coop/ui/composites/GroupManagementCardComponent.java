package softeng.coop.ui.composites;

import java.util.ArrayList;
import java.util.Locale;

import softeng.coop.dataaccess.CoOp;
import softeng.coop.dataaccess.Group;
import softeng.coop.ui.ICoopContext;
import softeng.coop.ui.data.MultilingualValidationForm;
import softeng.coop.ui.presenters.GroupManagementCardPresenter;
import softeng.coop.ui.viewdefinitions.IGroupManagementCardView;
import softeng.coop.ui.viewdefinitions.IOkCancelView;
import softeng.coop.ui.viewdefinitions.ITableView;
import softeng.coop.ui.viewdefinitions.viewmodels.OkCancelViewModel;
import softeng.ui.vaadin.mvp.IListener;
import softeng.ui.vaadin.mvp.IView;
import softeng.ui.vaadin.mvp.ModelEvent;
import softeng.ui.vaadin.mvp.Presenter;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Item;
import com.vaadin.data.util.BeanItem;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.CheckBox;
import com.vaadin.ui.Component;
import com.vaadin.ui.Field;
import com.vaadin.ui.FormFieldFactory;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.VerticalLayout;

public class GroupManagementCardComponent 
	extends CoopComponent<BeanItem<CoOp>> 
	implements IGroupManagementCardView
{
	@AutoGenerated
	private VerticalLayout mainLayout;

	@AutoGenerated
	private OkCancelComponent okCancelComponent;

	@AutoGenerated
	private HorizontalLayout groupMainHorizontalLayout;

	@AutoGenerated
	private VerticalLayout detailsVerticalLayout;

	@AutoGenerated
	private GroupReportsComponent reportsComponent;

	@AutoGenerated
	private GroupFormationComponent groupFormationComponent;

	@AutoGenerated
	private VerticalLayout groupTableVerticalLayout;

	@AutoGenerated
	private FilterOptionsForm filterOptionsForm;

	@AutoGenerated
	private GroupsTableComponent groupTableComponent;


	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */


	private static final long serialVersionUID = 1L;

	private static class FilterOptionsForm
	extends MultilingualValidationForm<FilterOptions>
	{
		private static final long serialVersionUID = 1L;

		public FilterOptionsForm()
		{
			super(FilterOptions.class);
		}
	}
	
	private BeanItem<FilterOptions> filterOptionsItem =
		new BeanItem<IGroupManagementCardView.FilterOptions>(new FilterOptions());
	private ArrayList<String> filterPropertyIds = 
		createFilterPropertyIds();
	
	private CheckBox emptyCheckBox;
	private CheckBox gradedCheckBox;
	private CheckBox notGradedCheckBox;
	private CheckBox assignedJobsCheckBox;
	private CheckBox notAssignedJobsCheckBox;
	private CheckBox passedCheckBox;
	private CheckBox notPassedCheckBox;
	private CheckBox incompleteCheckBox;
	private CheckBox completeCheckBox;
	
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public GroupManagementCardComponent() 
	{
		buildMainLayout();
		setCompositionRoot(mainLayout);
	}

	
	private ArrayList<String> createFilterPropertyIds()
	{
		ArrayList<String> propertyIds = new ArrayList<String>();
		
		propertyIds.add("empty");
		propertyIds.add("graded");
		propertyIds.add("notGraded");
		propertyIds.add("assignedJobs");
		propertyIds.add("notAssignedJobs");
		propertyIds.add("passed");
		propertyIds.add("notPassed");
		propertyIds.add("incomplete");
		propertyIds.add("complete");
		
		return propertyIds;
	}
	
	@Override
	protected Presenter<BeanItem<CoOp>, ICoopContext, ? extends IView<BeanItem<CoOp>, ICoopContext>> 
		supplyPresenter() 
	{	
		return new GroupManagementCardPresenter(this);
	}

	@Override
	public void dataBind() 
	{	
//		groupFormationComponent.setModel(null);
//		groupFormationComponent.dataBind();
	}

	@SuppressWarnings("serial")
	@Override
	protected void setupUI() 
	{
		super.setupUI();
		
		getOkCancelView().setModel(OkCancelViewModel.Save);
		
		groupTableComponent.setCaption(getLocalizedString("GROUP_TABLE_CAPTION"));
		groupTableComponent.setEditVisible(false);
		groupTableComponent.setImmediate(true);
		
		groupFormationComponent.setImmediate(true);
		
		//groupFormationComponent.setCaption(getLocalizedString("GROUP_DETAILS_COMPONENT_CAPTION"));
		
		groupTableComponent.addSelectedChangeListener(new IListener<ModelEvent<Group>>() 
		{
			
			@Override
			public void onEvent(ModelEvent<Group> event) 
			{
				onGroupTableValueChange();
			}
		});
		
		groupFormationComponent.setGroupsTableView(groupTableComponent);
		
		filterOptionsForm.setFormFieldFactory(new FormFieldFactory() 
		{
			
			@Override
			public Field createField(Item item, Object propertyId, Component uiContext) 
			{
				if (propertyId.equals("empty"))
				{
					emptyCheckBox = new CheckBox();
					emptyCheckBox.setCaption(getLocalizedString("EMPTY_CHECKBOX_CAPTION"));
					emptyCheckBox.setWidth("100%");
					
					return emptyCheckBox;
				}
				else if (propertyId.equals("graded") 
						&& getContext().getSelectedCoop()!= null
						&& getContext().getSelectedCoop().isHasGroupGrade())
				{
					gradedCheckBox = new CheckBox();
					gradedCheckBox.setCaption(getLocalizedString("GRADED_CHECKBOX_CAPTION"));
					gradedCheckBox.setWidth("100%");
					
					return gradedCheckBox;
				}
				else if (propertyId.equals("notGraded")
						&& getContext().getSelectedCoop()!= null
						&& getContext().getSelectedCoop().isHasGroupGrade())
				{
					notGradedCheckBox = new CheckBox();
					notGradedCheckBox.setCaption(getLocalizedString("NOTGRADED_CHECKBOX_CAPTION"));
					notGradedCheckBox.setWidth("100%");
					
					return notGradedCheckBox;
				}
				else if (propertyId.equals("assignedJobs"))
				{
					assignedJobsCheckBox = new CheckBox();
					assignedJobsCheckBox.setCaption(getLocalizedString("ASSIGNEDJOBS_CHECKBOX_CAPTION"));
					assignedJobsCheckBox.setWidth("100%");
					
					return assignedJobsCheckBox;
				}
				else if (propertyId.equals("notAssignedJobs"))
				{
					notAssignedJobsCheckBox = new CheckBox();
					notAssignedJobsCheckBox.setCaption(getLocalizedString("NOTASSIGNEDJOBS_CHECKBOX_CAPTION"));
					notAssignedJobsCheckBox.setWidth("100%");
					
					return notAssignedJobsCheckBox;
				}
				else if (propertyId.equals("passed")
						&& getContext().getSelectedCoop()!= null
						&& getContext().getSelectedCoop().isHasGroupGrade())
				{
					passedCheckBox = new CheckBox();
					passedCheckBox.setCaption(getLocalizedString("PASSED_CHECKBOX_CAPTION"));
					passedCheckBox.setWidth("100%");
					
					return passedCheckBox;
				}
				else if (propertyId.equals("notPassed")
						&& getContext().getSelectedCoop()!= null
						&& getContext().getSelectedCoop().isHasGroupGrade())
				{
					notPassedCheckBox = new CheckBox();
					notPassedCheckBox.setCaption(getLocalizedString("NOTPASSED_CHECKBOX_CAPTION"));
					notPassedCheckBox.setWidth("100%");
					
					return notPassedCheckBox;
				}
				else if (propertyId.equals("incomplete"))
				{
					incompleteCheckBox = new CheckBox();
					incompleteCheckBox.setCaption(getLocalizedString("INCOMPLETE_CHECKBOX_CAPTION"));
					incompleteCheckBox.setWidth("100%");
					
					return incompleteCheckBox;
				}
				else if (propertyId.equals("complete"))
				{
					completeCheckBox = new CheckBox();
					completeCheckBox.setCaption(getLocalizedString("COMPLETE_CHECKBOX_CAPTION"));
					completeCheckBox.setWidth("100%");
					
					return completeCheckBox;
				}
				
				return null;
			}
		});
		
		VerticalLayout filterOptionsLayout = new VerticalLayout();
		filterOptionsLayout.setSpacing(true);
		
		filterOptionsForm.setLayout(filterOptionsLayout);
		filterOptionsForm.setImmediate(true);
		filterOptionsForm.setWriteThrough(true);
		filterOptionsForm.setItemDataSource(filterOptionsItem, filterPropertyIds);
	}

	protected void onGroupTableValueChange() 
	{
		BeanItem<Group> selectedItem = groupTableComponent.getSelectedItem();
		
		groupFormationComponent.setModel(selectedItem);
		
		if (getModel() != null)
			groupFormationComponent.setCoopModel(getModel());
		else
			groupFormationComponent.setCoopModel(null);
		
		groupFormationComponent.dataBind();
		
		CoOp coop = getContext().getSelectedCoop();
		
		if (coop.isHasGroupGrade())
			reportsComponent.setModel(selectedItem);
		else
			reportsComponent.setModel(null);
		
		reportsComponent.dataBind();
	}

	@Override
	protected void setupLocalizedCaptions(Locale locale) 
	{
		super.setupLocalizedCaptions(locale);
		
		if (groupTableComponent != null)
			groupTableComponent.setCaption(getLocalizedString("GROUP_TABLE_CAPTION"));
//		if (groupFormationComponent != null)
//			groupFormationComponent.setCaption(getLocalizedString("GROUP_DETAILS_COMPONENT_CAPTION"));
		if (emptyCheckBox != null)
			emptyCheckBox.setCaption(getLocalizedString("EMPTY_CHECKBOX_CAPTION"));
		if (gradedCheckBox != null)
			gradedCheckBox.setCaption(getLocalizedString("GRADED_CHECKBOX_CAPTION"));
		if (notGradedCheckBox != null)
			notGradedCheckBox.setCaption(getLocalizedString("NOTGRADED_CHECKBOX_CAPTION"));
		if (assignedJobsCheckBox != null)
			assignedJobsCheckBox.setCaption(getLocalizedString("ASSIGNEDJOBS_CHECKBOX_CAPTION"));
		if (notAssignedJobsCheckBox != null)
			notAssignedJobsCheckBox.setCaption(getLocalizedString("NOTASSIGNEDJOBS_CHECKBOX_CAPTION"));
		if (passedCheckBox != null)
			passedCheckBox.setCaption(getLocalizedString("PASSED_CHECKBOX_CAPTION"));
		if (notPassedCheckBox != null)
			notPassedCheckBox.setCaption(getLocalizedString("NOTPASSED_CHECKBOX_CAPTION"));
		if (incompleteCheckBox != null)
			incompleteCheckBox.setCaption(getLocalizedString("INCOMPLETE_CHECKBOX_CAPTION"));
		if (completeCheckBox != null)
			completeCheckBox.setCaption(getLocalizedString("COMPLETE_CHECKBOX_CAPTION"));
		
		filterOptionsForm.setCaption(getLocalizedString("FILTERS_FORM_CAPTION"));
	}

	@Override
	public IOkCancelView getOkCancelView() 
	{
		return this.okCancelComponent;
	}

	@Override
	public BeanItem<Group> getSelectedGroup() 
	{
		return groupTableComponent.getSelectedItem();
	}

	@Override
	public BeanItem<FilterOptions> getFilterOptions() 
	{
		return this.filterOptionsItem;
	}


	@Override
	public ITableView<CoOp, Group> getGroupTableView() 
	{
		return this.groupTableComponent;
	}


	@AutoGenerated
	private VerticalLayout buildMainLayout()
	{
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("-1px");
		mainLayout.setMargin(false);
		mainLayout.setSpacing(true);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("-1px");
		
		// groupMainHorizontalLayout
		groupMainHorizontalLayout = buildGroupMainHorizontalLayout();
		mainLayout.addComponent(groupMainHorizontalLayout);
		
		// okCancelComponent
		okCancelComponent = new OkCancelComponent();
		okCancelComponent.setImmediate(false);
		okCancelComponent.setWidth("-1px");
		okCancelComponent.setHeight("-1px");
		mainLayout.addComponent(okCancelComponent);
		mainLayout.setComponentAlignment(okCancelComponent, new Alignment(10));
		
		return mainLayout;
	}


	@AutoGenerated
	private HorizontalLayout buildGroupMainHorizontalLayout()
	{
		// common part: create layout
		groupMainHorizontalLayout = new HorizontalLayout();
		groupMainHorizontalLayout.setImmediate(false);
		groupMainHorizontalLayout.setWidth("100.0%");
		groupMainHorizontalLayout.setHeight("-1px");
		groupMainHorizontalLayout.setMargin(false);
		groupMainHorizontalLayout.setSpacing(true);
		
		// groupTableVerticalLayout
		groupTableVerticalLayout = buildGroupTableVerticalLayout();
		groupMainHorizontalLayout.addComponent(groupTableVerticalLayout);
		groupMainHorizontalLayout.setExpandRatio(groupTableVerticalLayout, 0.3f);
		
		// detailsVerticalLayout
		detailsVerticalLayout = buildDetailsVerticalLayout();
		groupMainHorizontalLayout.addComponent(detailsVerticalLayout);
		groupMainHorizontalLayout.setExpandRatio(detailsVerticalLayout, 0.7f);
		
		return groupMainHorizontalLayout;
	}


	@AutoGenerated
	private VerticalLayout buildGroupTableVerticalLayout()
	{
		// common part: create layout
		groupTableVerticalLayout = new VerticalLayout();
		groupTableVerticalLayout.setImmediate(false);
		groupTableVerticalLayout.setWidth("100.0%");
		groupTableVerticalLayout.setHeight("-1px");
		groupTableVerticalLayout.setMargin(false);
		groupTableVerticalLayout.setSpacing(true);
		
		// groupTableComponent
		groupTableComponent = new GroupsTableComponent();
		groupTableComponent.setImmediate(false);
		groupTableComponent.setWidth("100.0%");
		groupTableComponent.setHeight("-1px");
		groupTableVerticalLayout.addComponent(groupTableComponent);
		
		// filterOptionsForm
		filterOptionsForm = new FilterOptionsForm();
		filterOptionsForm.setCaption("Filter criteria");
		filterOptionsForm.setImmediate(false);
		filterOptionsForm.setWidth("100.0%");
		filterOptionsForm.setHeight("-1px");
		groupTableVerticalLayout.addComponent(filterOptionsForm);
		
		return groupTableVerticalLayout;
	}


	@AutoGenerated
	private VerticalLayout buildDetailsVerticalLayout()
	{
		// common part: create layout
		detailsVerticalLayout = new VerticalLayout();
		detailsVerticalLayout.setImmediate(false);
		detailsVerticalLayout.setWidth("100.0%");
		detailsVerticalLayout.setHeight("-1px");
		detailsVerticalLayout.setMargin(false);
		detailsVerticalLayout.setSpacing(true);
		
		// groupFormationComponent
		groupFormationComponent = new GroupFormationComponent();
		groupFormationComponent.setImmediate(false);
		groupFormationComponent.setWidth("100.0%");
		groupFormationComponent.setHeight("-1px");
		detailsVerticalLayout.addComponent(groupFormationComponent);
		
		// reportsComponent
		reportsComponent = new GroupReportsComponent();
		reportsComponent.setImmediate(false);
		reportsComponent.setWidth("100.0%");
		reportsComponent.setHeight("-1px");
		detailsVerticalLayout.addComponent(reportsComponent);
		
		return detailsVerticalLayout;
	}


	@Override
	public boolean isDataValid() 
	{
		return groupFormationComponent.isDataValid() && reportsComponent.isDataValid();
	}


	@Override
	public void discardChanges() 
	{
		groupFormationComponent.discardChanges();
		reportsComponent.discardChanges();
		
	}


	@Override
	public void commitChangesToModel() 
	{
		groupFormationComponent.commitChangesToModel();
		reportsComponent.commitChangesToModel();
	}

}
