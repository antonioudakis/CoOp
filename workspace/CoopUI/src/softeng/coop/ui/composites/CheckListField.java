package softeng.coop.ui.composites;

import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.Vector;

import softeng.coop.ui.ICoopContext;
import softeng.coop.ui.MultilingualTable;
import softeng.coop.ui.data.DataItem;
import softeng.coop.ui.viewdefinitions.ICheckListView;
import softeng.coop.ui.viewdefinitions.viewmodels.CheckListViewElementEvent;
import softeng.ui.vaadin.mvp.EventSubscription;
import softeng.ui.vaadin.mvp.IListener;
import softeng.ui.vaadin.mvp.IView;
import softeng.ui.vaadin.mvp.Presenter;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Container;
import com.vaadin.data.Item;
import com.vaadin.data.util.BeanItem;
import com.vaadin.ui.Button;
import com.vaadin.ui.CheckBox;
import com.vaadin.ui.Label;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Button.ClickEvent;

/**
 * A Field which binds to a Set of elements of type M and displays 
 * it as a checklist out of given allowed elements.
 * Call setAllowedElements method before dataBind.
 * @param <M> The type of the elements in the set.
 */
@SuppressWarnings("serial")
public abstract class CheckListField<M> 
extends CoopField<Set<M>>
implements ICheckListView<M>
{
	private static final long serialVersionUID = 1L;

	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private MultilingualTable table;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */
	
	public static class ColumnSpecification
	{
		private String propertyId;
		private String captionResourceId;
		private Class<?> type;
		
		public ColumnSpecification(String propertyId, String captionResourceId)
		{
			this(propertyId, captionResourceId, Label.class);
		}
		
		public ColumnSpecification(String propertyId, String captionResourceId, Class<?> type)
		{
			if (propertyId == null) 
				throw new IllegalArgumentException("Argument 'propertyId' must not be null.");
			if (captionResourceId == null) 
				throw new IllegalArgumentException("Argument 'captionResourceId' must not be null.");
			if (type == null) 
				throw new IllegalArgumentException("Argument 'type' must not be null.");

			this.propertyId = propertyId;
			this.captionResourceId = captionResourceId;
			this.type = type;
		}
		
		public String getPropertyId()
		{
			return propertyId;
		}
		public void setPropertyId(String propertyId)
		{
			if (propertyId == null) 
				throw new IllegalArgumentException("Argument 'propertyId' must not be null.");
			
			this.propertyId = propertyId;
		}

		public String getCaptionResourceId()
		{
			return captionResourceId;
		}
		public void setCaptionResourceId(String captionResourceId)
		{
			if (captionResourceId == null) 
				throw new IllegalArgumentException("Argument 'captionResourceId' must not be null.");
			
			this.captionResourceId = captionResourceId;
		}

		public Class<?> getType()
		{
			return type;
		}
		public void setType(Class<?> type)
		{
			if (type == null) 
				throw new IllegalArgumentException("Argument 'type' must not be null.");
			
			this.type = type;
		}
		
	}
	
	protected List<ColumnSpecification> columnSpecifications;
	
	private Set<M> availableElements;
	
	private EventSubscription<CheckListViewElementEvent<M>, IListener<CheckListViewElementEvent<M>>> elementClickSubscription =
		new EventSubscription<CheckListViewElementEvent<M>, IListener<CheckListViewElementEvent<M>>>();

	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public CheckListField(List<ColumnSpecification> columnSpecifications)
	{
		if (columnSpecifications == null) 
			throw new IllegalArgumentException("Argument 'columnSpecifications' must not be null.");
		
		this.columnSpecifications = columnSpecifications;
		
		buildMainLayout();
		setCompositionRoot(mainLayout);

		setHeight("160px");
	}

	public Collection<String> getSpecifiedPropertyIds()
	{
		Vector<String> specifiedPropertyIds = 
			new Vector<String>(this.columnSpecifications.size() + 1);
		
		for (ColumnSpecification specification : this.columnSpecifications)
		{
			specifiedPropertyIds.add(specification.getPropertyId());
		}
		
		return specifiedPropertyIds;
	}
	
	private void setupLocalizedTableHeaders()
	{
		for (ColumnSpecification specification : this.columnSpecifications)
		{
			this.table.setColumnHeader(
					specification.getPropertyId(), 
					getLocalizedString(specification.getCaptionResourceId()));
		}
		
		this.table.setColumnHeader("_checked", "");
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout()
	{
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// table
		table = new MultilingualTable();
		table.setImmediate(false);
		table.setWidth("100.0%");
		table.setHeight("100.0%");
		mainLayout.addComponent(table);
		
		return mainLayout;
	}

	@Override
	public Set<M> getAvailableElements()
	{
		return this.availableElements;
	}

	@Override
	public void setAvailableElements(Set<M> availableElements)
	{
		if (availableElements == null) 
			throw new IllegalArgumentException("Argument 'availableElements' must not be null.");
		
		this.availableElements = availableElements;
	}

	@Override
	protected Presenter<Set<M>, ICoopContext, ? extends IView<Set<M>, ICoopContext>> supplyPresenter()
	{
		return null;
	}

	@Override
	public void dataBind()
	{
		table.removeAllItems();
		
		table.addContainerProperty("_checked", CheckBox.class, null);
		
		for (ColumnSpecification columnSpecification : this.columnSpecifications)
		{
			String propertyId = columnSpecification.getPropertyId();
			Class<?> type = columnSpecification.getType();
			
			table.addContainerProperty(propertyId, type, null);
		}
		
		if (this.getModel() != null && getAvailableElements() != null)
		{
			Collection<String> propertyIds = getSpecifiedPropertyIds();
			
			for (final M element : getAvailableElements())
			{
				BeanItem<M> item = createBeanItem(element);
				
				ArrayList<Object> rowFields = 
					new ArrayList<Object>(propertyIds.size() + 1);
				
				CheckBox checkBox = new CheckBox();
				checkBox.setValue(getModel().contains(element));
				checkBox.setReadOnly(isReadOnly());
				
				if (this.isImmediate()) checkBox.setImmediate(true);
				
				checkBox.addListener(new Button.ClickListener()
				{
					
					@Override
					public void buttonClick(ClickEvent event)
					{
						onElementClicked(element);
					}
				});
				
				rowFields.add(checkBox);
				
				for (ColumnSpecification columnSpecification : this.columnSpecifications)
				{
					String propertyId = columnSpecification.getPropertyId();
					
					if (Label.class.isAssignableFrom(columnSpecification.getType()))
					{
						Label label = new Label();
						label.setPropertyDataSource(item.getItemProperty(propertyId));
					
						rowFields.add(label);
					}
					else
					{
						rowFields.add(item.getItemProperty(propertyId).getValue());
					}
				}
				
				table.addItem(rowFields.toArray(), element);
			}
			
		}

		// Only invoke translation services if the application is available.
		// Else, defer translation to setupLocalizedCaptions.
		if (this.getApplication()!= null)
		{
			setupLocalizedTableHeaders();
		}
		
	}
	
	protected void onElementClicked(M element)
	{
		Item item = table.getItem(element);
		
		if (item == null) return;
		
		CheckBox checkBox = (CheckBox)item.getItemProperty("_checked").getValue();
		
		CheckListViewElementEvent<M> event = 
			new CheckListViewElementEvent<M>(this, element, checkBox.booleanValue());

		elementClickSubscription.fire(event);
	}
	
	@Override
	protected void setupUI()
	{
		super.setupUI();
	}

	@Override
	protected void setupLocalizedCaptions(Locale locale)
	{
		super.setupLocalizedCaptions(locale);
		
		setupLocalizedTableHeaders();
		
		table.refreshRowCache();
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public void commit()
	{
		if (this.getModel() != null &&
				(this.isInvalidCommitted() || this.isValid()))
		{
			for (Object itemId : table.getItemIds())
			{
				M element = (M)itemId;
				
				Item item = table.getItem(element);
				
				CheckBox checkBox = (CheckBox)item.getItemProperty("_checked").getValue();
				
				boolean checked = checkBox.booleanValue();
				
				if (checked)
				{
					boolean added = getModel().add(element);
					
					if (added) addToParent(element);
				}
				else
				{
					boolean removed = getModel().remove(element);
					
					if (removed) removeFromParent(element);
				}
			}
		}
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public void discard()
	{
		if (this.getPropertyDataSource() != null)
		{
			for (Object itemId : table.getItemIds())
			{
				M element = (M)itemId;
				
				Item item = table.getItem(element);
				
				CheckBox checkBox = (CheckBox)item.getItemProperty("_checked").getValue();
				
				checkBox.setValue(getModel().contains(element));
			}
		}
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public Set<M> getSelectedElements()
	{
		LinkedHashSet<M> set = new LinkedHashSet<M>();
		
		for (Object itemId : table.getItemIds())
		{
			M element = (M)itemId;
			
			Item item = table.getItem(element);
			
			CheckBox checkBox = (CheckBox)item.getItemProperty("_checked").getValue();
			
			boolean checked = checkBox.booleanValue();
			
			if (checked)
				set.add(element);
		}
		
		return set;
	}
	
	protected BeanItem<M> createBeanItem(M element)
	{
		if (element != null)
			return new DataItem<M>(element, getContext().getSession().getBaseManager());
		else
			return null;
	}
	
	@Override
	public void setImmediate(boolean value)
	{
		super.setImmediate(value);
		
		table.setImmediate(value);
		
		for (Object itemId : table.getItemIds())
		{
			Item item = table.getItem(itemId);

			CheckBox checkBox = (CheckBox)item.getItemProperty("_checked").getValue();
			
			checkBox.setImmediate(value);
		}
	}
	
	@Override
	public void setReadOnly(boolean readOnly)
	{
		Container container = table.getContainerDataSource();
		
		if (container != null)
		{
			for (Object itemId : container.getItemIds())
			{
				Item item = container.getItem(itemId);

				CheckBox checkBox = (CheckBox)item.getItemProperty("_checked").getValue();
				
				checkBox.setReadOnly(readOnly);
			}
		}
		
		super.setReadOnly(readOnly);
	}

	@Override
	public void addElementClickListener(IListener<CheckListViewElementEvent<M>> listener)
	{
		elementClickSubscription.add(listener);
	}

	@Override
	public void removeElementClickListener(IListener<CheckListViewElementEvent<M>> listener)
	{
		elementClickSubscription.remove(listener);
	}

	/**
	 * Optional fix-up of the reverse relationship during addition.
	 */
	protected void addToParent(M element)
	{
		// NOP.
	}
	
	/**
	 * Optional fix-up of the reverse relationship during removal.
	 */
	protected void removeFromParent(M element)
	{
		// NOP.
	}
}
