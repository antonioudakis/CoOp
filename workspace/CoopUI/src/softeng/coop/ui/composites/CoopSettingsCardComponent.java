package softeng.coop.ui.composites;

import java.util.ArrayList;
import java.util.Locale;
import java.util.Set;

import softeng.coop.business.Session;
import softeng.coop.dataaccess.CoOp;
import softeng.coop.dataaccess.Department;
import softeng.coop.dataaccess.FinancialSource;
import softeng.coop.dataaccess.GradePolicyType;
import softeng.coop.dataaccess.Lesson;
import softeng.coop.dataaccess.Professor;
import softeng.coop.ui.ICoopContext;
import softeng.coop.ui.EnumComboBox;
import softeng.coop.ui.PermissionsChecker;
import softeng.coop.ui.composites.PickerField.ParentAdjuster;
import softeng.coop.ui.data.DataItemContainer;
import softeng.coop.ui.data.DataUtilities;
import softeng.coop.ui.data.MultilingualValidationForm;
import softeng.coop.ui.forms.CoopForm;
import softeng.coop.ui.presenters.CoopSettingsCardPresenter;
import softeng.coop.ui.viewdefinitions.ICoopSettingsCardView;
import softeng.coop.ui.viewdefinitions.IOkCancelView;
import softeng.coop.ui.viewdefinitions.viewmodels.OkCancelViewModel;
import softeng.ui.vaadin.mvp.IListener;
import softeng.ui.vaadin.mvp.IView;
import softeng.ui.vaadin.mvp.ModelEvent;
import softeng.ui.vaadin.mvp.Presenter;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Item;
import com.vaadin.data.Property;
import com.vaadin.data.Item.PropertySetChangeEvent;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.util.BeanItem;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.CheckBox;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.Component;
import com.vaadin.ui.DateField;
import com.vaadin.ui.Field;
import com.vaadin.ui.FormFieldFactory;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;

public class CoopSettingsCardComponent 
	extends CoopComponent<BeanItemContainer<CoOp>>
	implements ICoopSettingsCardView
{
	@AutoGenerated
	private VerticalLayout mainLayout;

	@AutoGenerated
	private OkCancelComponent okCancelComponent;

	@AutoGenerated
	private HorizontalLayout formsHorizontalLayout;

	@AutoGenerated
	private CoopForm advancedForm;

	@AutoGenerated
	private CoopForm basicForm;

	@AutoGenerated
	private VerticalLayout coopsListVerticalLayout;

	@AutoGenerated
	private CoopsTableComponent coopsTableComponent;

	@AutoGenerated
	private FilterOptionsForm filterOptionsForm;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	private static final long serialVersionUID = 1L;
	
	public static class FilterOptionsForm
		extends MultilingualValidationForm<ICoopSettingsCardView.FilterOptions>
	{
		private static final long serialVersionUID = 1L;

		public FilterOptionsForm()
		{
			super(ICoopSettingsCardView.FilterOptions.class);
		}
	}
	
	private Set<FinancialSource> availableFinancialSources;
	
	private BeanItem<FilterOptions> filterOptionsItem;
	
	private Department department;
	
	private CheckBox activeOnlyCheckBox;
	
	private CheckBox inRegistrationOnlyCheckBox;
	
	private CheckBox setupOnlyCheckBox;
	
	private ComboBox academicYearOnlyComboBox;
	
	private CheckBox includingOtherDepartmentsCheckBox;
	
	private CheckBox includingOtherUniversitiesCheckBox;
	
	private ComboBox lessonOnlyComboBox;
	
	private TextField nameTextField;
	
	private DateField startDateField;
	
	private DateField endDateField;
	
	private CheckBox isActiveCheckBox;
	
	private CheckBox isInsideCheckBox;
	
	private CheckBox isGroupCheckBox;
	
	private ComboBox gradePolicyComboBox;
	
	private CheckBox hasGroupGradeCheckBox;
	
	private CheckBox isSetupCheckBox;
	
	private CheckBox isInRegistrationCheckBox;
	
	private TextField maxGroupSizeTextField;
	
	private ComboBox academicYearComboBox;
	
	private ComboBox lessonComboBox;
	
	private ProfessorPickerField academicDirectorField;
	
	private ProfessorPickerField institutionalDirectorField;
	
	private ProfessorPickerField scientificDirectorField;
	
	private SupervisingProfessorsTableComponent supervisingProfessorsTableComponent;
	
	private RequirementsTableComponent requirementsTableComponent;
	
	private CoopReportsTableComponent reportsTableComponent;
	
	private FinancialSourcesCheckListField financialSourcesCheckListField;
	
	private InsuranceContractsTableComponent insuranceContractsTableComponent;
	
	private DateField paymentOrderDateField;
	
	private TextField paymentOrderAmountTextField;
	
	private TextField semesterTextField;
	
	private CheckBox allowLocationPreferencesCheckBox;

	private CheckBox allowCategoryPreferencesCheckBox;
	
	private CheckBox allowJobPostingPreferencesCheckBox;
	
	private CheckBox supportsInvitationsCheckBox;
	
	private PermissionsChecker permissionsChecker;
	
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public CoopSettingsCardComponent()
	{
		buildMainLayout();
		setCompositionRoot(mainLayout);

		filterOptionsItem = new BeanItem<FilterOptions>(new FilterOptions());
	}

	@Override
	protected Presenter<BeanItemContainer<CoOp>, ICoopContext, ? extends IView<BeanItemContainer<CoOp>, ICoopContext>> supplyPresenter()
	{
		return new CoopSettingsCardPresenter(this);
	}

	@Override
	public void dataBind()
	{
		CoOp previousSelectedCoop = coopsTableComponent.getSelectedValue();
		
		coopsTableComponent.setModel(getModel().getItemIds());
		coopsTableComponent.dataBind();
		
		coopsTableComponent.setSelectedValue(previousSelectedCoop);
	}

	@SuppressWarnings("serial")
	@Override
	protected void setupUI()
	{
		super.setupUI();
		
		okCancelComponent.setModel(OkCancelViewModel.Save);
		
		okCancelComponent.dataBind();
		
		permissionsChecker = new PermissionsChecker(getContext());
		
		filterOptionsForm.setFormFieldFactory(new FormFieldFactory()
		{
			@Override
			public Field createField(Item item, Object propertyId, Component uiContext)
			{
				if (propertyId.equals("academicYear"))
				{
					academicYearOnlyComboBox = DataUtilities.createYearComboBox();
					academicYearOnlyComboBox.setCaption(getLocalizedString("ACADEMIC_YEAR_CAPTION"));
					
					academicYearOnlyComboBox.setWidth("100%");
					//academicYearOnlyComboBox.setNullSelectionAllowed(false);
					
					return academicYearOnlyComboBox;
				}
				else if (propertyId.equals("activeOnly"))
				{
					activeOnlyCheckBox = 
						new CheckBox(getLocalizedString("ACTIVE_ONLY_CAPTION"));
					
					activeOnlyCheckBox.setWidth("100%");
					
					return activeOnlyCheckBox;
				}
				else if (propertyId.equals("inRegistrationOnly"))
				{
					inRegistrationOnlyCheckBox =
						new CheckBox(getLocalizedString("IN_REGISTRATION_ONLY_CAPTION"));
					
					inRegistrationOnlyCheckBox.setWidth("100%");
					
					return inRegistrationOnlyCheckBox;
				}
				else if (propertyId.equals("lesson"))
				{
					lessonOnlyComboBox = createLessonComboBox();
					
					if (lessonOnlyComboBox != null)
					{
						lessonOnlyComboBox.setCaption(getLocalizedString("LESSON_CAPTION"));
					}
					
					return lessonOnlyComboBox;
				}
				else if (propertyId.equals("setupOnly"))
				{
					setupOnlyCheckBox =
						new CheckBox(getLocalizedString("SETUP_ONLY_CAPTION"));
					
					setupOnlyCheckBox.setWidth("100%");
					
					return setupOnlyCheckBox;
				}
				else if (propertyId.equals("includingOtherDepartments") && permissionsChecker.canBrowseDepartments())
				{
					includingOtherDepartmentsCheckBox = 
						new CheckBox(getLocalizedString("INCLUDING_OTHER_DEPARTMENTS_CAPTION"));
					
					includingOtherDepartmentsCheckBox.setWidth("100%");
					
					includingOtherDepartmentsCheckBox.addListener(new Property.ValueChangeListener()
					{
						@Override
						public void valueChange(ValueChangeEvent event)
						{
							if (includingOtherUniversitiesCheckBox != null)
								includingOtherUniversitiesCheckBox.setEnabled(includingOtherDepartmentsCheckBox.booleanValue());
						}
					});
					
					return includingOtherDepartmentsCheckBox;
				}
				else if (propertyId.equals("includingOtherUniversities") && permissionsChecker.canBrowseUniversities())
				{
					includingOtherUniversitiesCheckBox =
						new CheckBox(getLocalizedString("INCLUDING_OTHER_UNIVERSITIES_CAPTION"));
					
					includingOtherUniversitiesCheckBox.setWidth("100%");
					
					includingOtherUniversitiesCheckBox.setEnabled(filterOptionsItem.getBean().isIncludingOtherDepartments());
					
					return includingOtherUniversitiesCheckBox;
				}
 
				return null;
			}
		});
		

		filterOptionsForm.setImmediate(true);
		filterOptionsForm.setItemDataSource(filterOptionsItem);
		
		coopsTableComponent.setEditVisible(false);
		coopsTableComponent.setImmediate(true);
		coopsTableComponent.setWriteThrough(false);
		
		basicForm.setFormFieldFactory(new FormFieldFactory()
		{
			@Override
			public Field createField(Item item, Object propertyId, Component uiContext)
			{
				if (propertyId.equals("name"))
				{
					nameTextField = new TextField(getLocalizedString("COOP_NAME_CAPTION"));
					nameTextField.setDescription(getContext().getLocalizedString("CARD_FIELD_IS_MULTILINGUAL_DESCRIPTION"));
					nameTextField.setWidth("100%");
					
					return nameTextField;
				}
				else if (propertyId.equals("semester"))
				{
					semesterTextField = new TextField();
					semesterTextField.setCaption(getLocalizedString("SEMESTER_CAPTION"));
					semesterTextField.setDescription(getLocalizedString("SEMESTER_DESCRIPTION"));
					semesterTextField.setWidth("100%");
					semesterTextField.setNullRepresentation("");
					semesterTextField.setNullSettingAllowed(true);
					
					return semesterTextField;
				}
				else if (propertyId.equals("startDate"))
				{
					startDateField = new DateField(getLocalizedString("START_DATE_CAPTION"));
					startDateField.setDescription(getLocalizedString("START_DAY_DESCRIPTION"));
					startDateField.setWidth("100%");
					startDateField.setResolution(DateField.RESOLUTION_DAY);
					
					return startDateField;
				}
				else if (propertyId.equals("endDate"))
				{
					endDateField = new DateField(getLocalizedString("END_DATE_CAPTION"));
					endDateField.setDescription(getLocalizedString("END_DAY_DESCRIPTION"));
					endDateField.setWidth("100%");
					endDateField.setResolution(DateField.RESOLUTION_DAY);
					
					return endDateField;
				}
				else if (propertyId.equals("active"))
				{
					isActiveCheckBox = new CheckBox(getLocalizedString("IS_ACTIVE_CAPTION"));
					isActiveCheckBox.setDescription(getLocalizedString("IS_ACTIVE_DESCRIPTION"));
					isActiveCheckBox.setWidth("100%");
					
					return isActiveCheckBox;
				}
				else if (propertyId.equals("groupCoOp"))
				{
					isGroupCheckBox = new CheckBox(getLocalizedString("IS_GROUP_COOP_CAPTION"));
					isGroupCheckBox.setDescription(getLocalizedString("IS_GROUP_COOP_DESCRIPTION"));
					isGroupCheckBox.setWidth("100%");
					
					isGroupCheckBox.addListener(new Property.ValueChangeListener()
					{
						
						@Override
						public void valueChange(ValueChangeEvent event)
						{
							boolean isGroupCoop = isGroupCheckBox.booleanValue();
							
							if (hasGroupGradeCheckBox != null)
								hasGroupGradeCheckBox.setEnabled(isGroupCoop);
							
							if (maxGroupSizeTextField != null)
								maxGroupSizeTextField.setEnabled(isGroupCoop);
							
							if (supportsInvitationsCheckBox != null)
								supportsInvitationsCheckBox.setEnabled(isGroupCoop);
						}
					});
					
					return isGroupCheckBox;
				}
				else if (propertyId.equals("hasGroupGrade"))
				{
					CoOp coop = getSelectedCoop();
					
					hasGroupGradeCheckBox = new CheckBox(getLocalizedString("HAS_GROUP_GRADE_CAPTION"));
					hasGroupGradeCheckBox.setDescription(getLocalizedString("HAS_GROUP_GRADE_DESCRIPTION"));
					hasGroupGradeCheckBox.setWidth("100%");
					hasGroupGradeCheckBox.setEnabled(coop.isGroupCoOp());
					
					return hasGroupGradeCheckBox;
				}
				else if (propertyId.equals("supportingInvitations"))
				{
					CoOp coop = getSelectedCoop();
					
					supportsInvitationsCheckBox = new CheckBox();
					supportsInvitationsCheckBox.setCaption(getLocalizedString("SUPPORTS_INVITATIONS_CAPTION"));
					supportsInvitationsCheckBox.setDescription(getLocalizedString("SUPPORTS_INVITATIONS_DESCRIPTION"));
					supportsInvitationsCheckBox.setWidth("100%");
					supportsInvitationsCheckBox.setEnabled(coop.isGroupCoOp());
					
					return supportsInvitationsCheckBox;
				}
				else if (propertyId.equals("insideUniversity"))
				{
					isInsideCheckBox = new CheckBox(getLocalizedString("IS_INSIDE_UNIVERSITY_CAPTION"));
					isInsideCheckBox.setDescription(getLocalizedString("IS_INSIDE_UNIVERSITY_DESCRIPTION"));
					isInsideCheckBox.setWidth("100%");
					
					return isInsideCheckBox;
				}
				else if (propertyId.equals("gradePolicy"))
				{
					gradePolicyComboBox = 
						new EnumComboBox(getLocalizedString("GRADE_POLICY_CAPTION"), GradePolicyType.class);
					
					gradePolicyComboBox.setWidth("100%");
					
					gradePolicyComboBox.setNullSelectionAllowed(false);
					
					GradePolicyType[] values = GradePolicyType.values();
					
					ArrayList<GradePolicyType> valuesList = 
						new ArrayList<GradePolicyType>(values.length);
					
					for (int i = 0; i < values.length; i++)
					{
						valuesList.add(values[i]);
					}
					
					gradePolicyComboBox.setContainerDataSource(
							new BeanItemContainer<GradePolicyType>(GradePolicyType.class, valuesList));
					
					return gradePolicyComboBox;
				}
				else if (propertyId.equals("setup"))
				{
					isSetupCheckBox = new CheckBox(getLocalizedString("IS_SETUP_CAPTION"));
					isSetupCheckBox.setDescription(getLocalizedString("IS_SETUP_DESCRIPTION"));
					isSetupCheckBox.setWidth("100%");
					
					return isSetupCheckBox;
				}
				else if (propertyId.equals("inRegistration"))
				{
					isInRegistrationCheckBox = new CheckBox(getLocalizedString("IS_IN_REGISTRATION_CAPTION"));
					isInRegistrationCheckBox.setDescription(getLocalizedString("IS_IN_REGISTRATION_DESCRIPTION"));
					isInRegistrationCheckBox.setWidth("100%");
					
					return isInRegistrationCheckBox;
				}
				else if (propertyId.equals("maxGroupSize"))
				{
					CoOp coop = getSelectedCoop();
					
					maxGroupSizeTextField = new TextField(getLocalizedString("MAX_GROUP_SIZE_CAPTION"));
					maxGroupSizeTextField.setDescription(getLocalizedString("MAX_GROUP_SIZE_DESCRIPTION"));
					maxGroupSizeTextField.setWidth("100%");
					maxGroupSizeTextField.setEnabled(coop.isGroupCoOp());
					
					return maxGroupSizeTextField;
				}
				else if (propertyId.equals("academicYear"))
				{
					academicYearComboBox = DataUtilities.createYearComboBox();
					
					academicYearComboBox.setNullSelectionAllowed(false);
					
					academicYearComboBox.setWidth("100%");
					
					academicYearComboBox.setCaption(getLocalizedString("ACADEMIC_YEAR_CAPTION"));
					academicYearComboBox.setDescription(getLocalizedString("ACADEMIC_YEAR_DESCRIPTION"));
					
					return academicYearComboBox;
				}
				else if (propertyId.equals("lesson"))
				{
					lessonComboBox = createLessonComboBox();
					
					if (lessonComboBox != null)
					{
						lessonComboBox.setCaption(getLocalizedString("LESSON_CAPTION"));
						lessonComboBox.setNullSelectionAllowed(false);
					}
					
					return lessonComboBox;
				}
				else if (propertyId.equals("academicDirector"))
				{
					academicDirectorField = 
						new ProfessorPickerField(getLocalizedString("ACADEMIC_DIRECTOR_CAPTION"));
					
					academicDirectorField.setWidth("100%");
					
					academicDirectorField.setClearAllowed(false);
					
					academicDirectorField.setParentAdjuster(new ParentAdjuster<Professor>()
					{
						@Override
						public void addToParent(Professor element)
						{
							if (!getContext().getSession().isLoaded(element, "academicallyDirectedCoOps")) 
								return;

							element.getAcademicallyDirectedCoOps().add(getSelectedCoop());
						}

						@Override
						public void removeFromParent(Professor element)
						{
							if (!getContext().getSession().isLoaded(element, "academicallyDirectedCoOps")) 
								return;

							element.getAcademicallyDirectedCoOps().remove(getSelectedCoop());
						}
					});
					
					return academicDirectorField;
				}
				else if (propertyId.equals("institutionalDirector"))
				{
					institutionalDirectorField =
						new ProfessorPickerField();
					
					institutionalDirectorField.setCaption(getLocalizedString("INSTITUTIONAL_DIRECTOR_CAPTION"));
					institutionalDirectorField.setWidth("100%");
					institutionalDirectorField.setClearAllowed(false);
					
					institutionalDirectorField.setParentAdjuster(new ParentAdjuster<Professor>()
					{
						@Override
						public void addToParent(Professor element)
						{
							if (!getContext().getSession().isLoaded(element, "institutionallyDirectedCoOps")) 
								return;
					
							element.getInstitutionallyDirectedCoOps().add(getSelectedCoop());
						}

						@Override
						public void removeFromParent(Professor element)
						{
							if (!getContext().getSession().isLoaded(element, "institutionallyDirectedCoOps")) 
								return;
					
							element.getInstitutionallyDirectedCoOps().remove(getSelectedCoop());
						}
					});
					
					return institutionalDirectorField;
				}
				else if (propertyId.equals("scientificDirector"))
				{
					scientificDirectorField = new ProfessorPickerField();
					
					scientificDirectorField.setCaption(getLocalizedString("SCIENTIFIC_DIRECTOR_CAPTION"));
					scientificDirectorField.setWidth("100%");
					scientificDirectorField.setClearAllowed(false);
					
					scientificDirectorField.setParentAdjuster(new ParentAdjuster<Professor>()
					{
						@Override
						public void addToParent(Professor element)
						{
							if (!getContext().getSession().isLoaded(element, "scientificallyDirectedCoOps")) 
								return;
					
							element.getScientificallyDirectedCoOps().add(getSelectedCoop());
						}

						@Override
						public void removeFromParent(Professor element)
						{
							if (!getContext().getSession().isLoaded(element, "scientificallyDirectedCoOps")) 
								return;
					
							element.getScientificallyDirectedCoOps().remove(getSelectedCoop());
						}
					});
					
					return scientificDirectorField;
				}
				else if (propertyId.equals("financialSources"))
				{
					if (getAvailableFinancialSources() != null)
					{
						financialSourcesCheckListField = new FinancialSourcesCheckListField();
						
						financialSourcesCheckListField.setCaption(getLocalizedString("FINANCIAL_SOURCES_CAPTION"));
						financialSourcesCheckListField.setWidth("100%");
						financialSourcesCheckListField.setAvailableElements(getAvailableFinancialSources());
						
						financialSourcesCheckListField.setCoop(getSelectedCoop());
						
						return financialSourcesCheckListField;
					}
					
				}
				else if (propertyId.equals("reports"))
				{
					reportsTableComponent = new CoopReportsTableComponent();
					reportsTableComponent.setCaption(getLocalizedString("REPORTS_CAPTION"));
					reportsTableComponent.setParentModel(getSelectedCoop());
					reportsTableComponent.setWidth("100%");
					
					return reportsTableComponent;
				}
				else if (propertyId.equals("paymentOrderDate"))
				{
					paymentOrderDateField = new DateField();
					paymentOrderDateField.setCaption(getLocalizedString("PAYMENT_ORDER_DATE_CAPTION"));
					paymentOrderDateField.setWidth("100%");
					
					return paymentOrderDateField;
				}
				else if (propertyId.equals("paymentOrderAmount"))
				{
					paymentOrderAmountTextField = new TextField();
					paymentOrderAmountTextField.setCaption(getLocalizedString("PAYMENT_ORDER_AMOUNT_CAPTION"));
					paymentOrderAmountTextField.setNullRepresentation("");
					paymentOrderAmountTextField.setNullSettingAllowed(true);
					paymentOrderAmountTextField.setWidth("100%");
					
					return paymentOrderAmountTextField;
				}

				return null;
			}
		});
		
		basicForm.setWriteThrough(false);
		basicForm.setImmediate(true);
		
		advancedForm.setFormFieldFactory(new FormFieldFactory()
		{
			@Override
			public Field createField(Item item, Object propertyId, Component uiContext)
			{
				if (propertyId.equals("requirements"))
				{
					requirementsTableComponent = new RequirementsTableComponent();
					requirementsTableComponent.setCaption(getLocalizedString("REQUIREMENTS_CAPTION"));
					requirementsTableComponent.setDescription(getLocalizedString("REQUIREMENTS_DESCRIPTION"));
					requirementsTableComponent.setWidth("100%");
					requirementsTableComponent.setParentModel(getSelectedCoop());
					
					return requirementsTableComponent;
				}
				else if (propertyId.equals("supervisingProfessors"))
				{
					supervisingProfessorsTableComponent =
						new SupervisingProfessorsTableComponent(
								getLocalizedString("SUPERVISING_PROFESSORS_CAPTION"));
					
					supervisingProfessorsTableComponent.setWidth("100%");
					
					supervisingProfessorsTableComponent.setEditVisible(false);
					
					supervisingProfessorsTableComponent.setParentModel(getSelectedCoop());
					
					return supervisingProfessorsTableComponent;
				}
				else if (propertyId.equals("reports"))
				{
					reportsTableComponent = new CoopReportsTableComponent();
					reportsTableComponent.setCaption(getLocalizedString("REPORTS_CAPTION"));
					reportsTableComponent.setParentModel(getSelectedCoop());
					reportsTableComponent.setWidth("100%");
					
					return reportsTableComponent;
				}
				else if (propertyId.equals("insuranceContracts"))
				{
					insuranceContractsTableComponent = new InsuranceContractsTableComponent();
					insuranceContractsTableComponent.setCaption(getLocalizedString("INSURANCE_CONTRACTS_CAPTION"));
					insuranceContractsTableComponent.setParentModel(getSelectedCoop());
					insuranceContractsTableComponent.setWidth("100%");
					
					return insuranceContractsTableComponent;
				}
				else if (propertyId.equals("allowJobPostingsPreferences"))
				{
					allowJobPostingPreferencesCheckBox = new CheckBox();
					allowJobPostingPreferencesCheckBox.setCaption(getLocalizedString("ALLOW_JOB_POSTINGS_PREFERENCES_CAPTION"));
					allowJobPostingPreferencesCheckBox.setDescription(getLocalizedString("ALLOW_JOB_POSTINGS_PREFERENCES_DESCRIPTION"));
					allowJobPostingPreferencesCheckBox.setWidth("100%");
					
					return allowJobPostingPreferencesCheckBox;
				}
				else if (propertyId.equals("allowLocationPreferences"))
				{
					allowLocationPreferencesCheckBox = new CheckBox();
					allowLocationPreferencesCheckBox.setCaption(getLocalizedString("ALLOW_LOCATION_PREFERENCES_CAPTION"));
					allowLocationPreferencesCheckBox.setDescription(getLocalizedString("ALLOW_LOCATION_PREFERENCES_DESCRIPTION"));
					allowLocationPreferencesCheckBox.setWidth("100%");
					
					return allowLocationPreferencesCheckBox;
				}
				else if (propertyId.equals("allowCategoryPreferences"))
				{
					allowCategoryPreferencesCheckBox = new CheckBox();
					allowCategoryPreferencesCheckBox.setCaption(getLocalizedString("ALLOW_CATEGORY_PREFERENCES_CAPTION"));
					allowCategoryPreferencesCheckBox.setDescription(getLocalizedString("ALLOW_CATEGORY_PREFERENCES_DESCRIPTION"));
					allowCategoryPreferencesCheckBox.setWidth("100%");
					
					return allowCategoryPreferencesCheckBox;
				}

				return null;
			}
		});
		
		advancedForm.setWriteThrough(false);
		advancedForm.setImmediate(true);
		
		coopsTableComponent.addSelectedChangeListener(new IListener<ModelEvent<CoOp>>()
		{
			@Override
			public void onEvent(ModelEvent<CoOp> event)
			{
				onSelectedCoopChanged();
			}
		});
	}

	protected void onSelectedCoopChanged()
	{
		basicForm.setItemDataSource(
				coopsTableComponent.getSelectedItem(), 
				getBasicPropertyIds());
		
		advancedForm.setItemDataSource(
				coopsTableComponent.getSelectedItem(), 
				getAdvancedPropertyIds());
		
//		DataUtilities.setValidatorsLocale(basicForm, getLocale());
	}

	private ArrayList<String> getBasicPropertyIds()
	{
		ArrayList<String> properties = new ArrayList<String>();
		
		properties.add("name");
		properties.add("academicYear");
		properties.add("semester");
		properties.add("lesson");
		properties.add("startDate");
		properties.add("endDate");
		properties.add("active");
		properties.add("insideUniversity");
		properties.add("groupCoOp");
		properties.add("maxGroupSize");
		properties.add("hasGroupGrade");
		properties.add("supportingInvitations");
		properties.add("gradePolicy");
		properties.add("setup");
		properties.add("inRegistration");
		properties.add("institutionalDirector");
		properties.add("academicDirector");
		properties.add("scientificDirector");
		properties.add("financialSources");
		properties.add("paymentOrderAmount");
		properties.add("paymentOrderDate");
		
		return properties;
	}
	
	private ArrayList<String> getAdvancedPropertyIds()
	{
		ArrayList<String> properties = new ArrayList<String>();
		
		properties.add("requirements");
		properties.add("reports");
		properties.add("supervisingProfessors");
		properties.add("insuranceContracts");
		properties.add("allowLocationPreferences");
		properties.add("allowCategoryPreferences");
		properties.add("allowJobPostingsPreferences");
		
		return properties;
	}

	@Override
	protected void setupLocalizedCaptions(Locale locale)
	{
		super.setupLocalizedCaptions(locale);
		
		filterOptionsForm.setCaption(getLocalizedString("COOPS_FILTERS_CAPTION"));
		filterOptionsForm.setDescription(getLocalizedString("COOPS_FILTERS_DESCRIPTION"));
		DataUtilities.setValidatorsLocale(filterOptionsForm, locale);
		
		coopsTableComponent.setCaption(getLocalizedString("COOPS_TABLE_CAPTION"));
		coopsTableComponent.setDescription(getLocalizedString("COOPS_TABLE_DESCRIPTION"));
		
		if (academicYearOnlyComboBox != null)
			academicYearOnlyComboBox.setCaption(getLocalizedString("ACADEMIC_YEAR_CAPTION"));
		
		if (activeOnlyCheckBox != null)
			activeOnlyCheckBox.setCaption(getLocalizedString("ACTIVE_ONLY_CAPTION"));
		
		if (inRegistrationOnlyCheckBox != null)
			inRegistrationOnlyCheckBox.setCaption(getLocalizedString("IN_REGISTRATION_ONLY_CAPTION"));
		
		if (lessonOnlyComboBox != null)
		{
			lessonOnlyComboBox.setCaption(getLocalizedString("LESSON_CAPTION"));
			// The contents are not changed. 
			// I Don't know how to refresh without triggering ValueChange. [EL]
		}
		
		if (setupOnlyCheckBox != null)
			setupOnlyCheckBox.setCaption(getLocalizedString("SETUP_ONLY_CAPTION"));
		
		if (includingOtherDepartmentsCheckBox != null)
			includingOtherDepartmentsCheckBox.setCaption(getLocalizedString("INCLUDING_OTHER_DEPARTMENTS_CAPTION"));
		
		if (includingOtherUniversitiesCheckBox != null)
			includingOtherUniversitiesCheckBox.setCaption(getLocalizedString("INCLUDING_OTHER_UNIVERSITIES_CAPTION"));

		basicForm.setCaption(getLocalizedString("BASIC_SETTINGS_CAPTION"));
		DataUtilities.setValidatorsLocale(basicForm, locale);
		
		if (nameTextField != null)
		{
			nameTextField.setCaption(getLocalizedString("COOP_NAME_CAPTION"));
			nameTextField.setDescription(getContext().getLocalizedString("CARD_FIELD_IS_MULTILINGUAL_DESCRIPTION"));
		}
		
		if (startDateField != null)
		{
			startDateField.setCaption(getLocalizedString("START_DATE_CAPTION"));
			startDateField.setDescription(getLocalizedString("START_DAY_DESCRIPTION"));
			startDateField.setLocale(locale);
		}
		
		if (endDateField != null)
		{
			endDateField.setCaption(getLocalizedString("END_DATE_CAPTION"));
			endDateField.setDescription(getLocalizedString("END_DAY_DESCRIPTION"));
			endDateField.setLocale(locale);
		}
		
		if (isActiveCheckBox != null)
		{
			isActiveCheckBox.setCaption(getLocalizedString("IS_ACTIVE_CAPTION"));
			isActiveCheckBox.setDescription(getLocalizedString("IS_ACTIVE_DESCRIPTION"));
		}
		
		if (isGroupCheckBox != null)
		{
			isGroupCheckBox.setCaption(getLocalizedString("IS_GROUP_COOP_CAPTION"));
			isGroupCheckBox.setDescription(getLocalizedString("IS_GROUP_COOP_DESCRIPTION"));
		}
		
		if (hasGroupGradeCheckBox != null)
		{
			hasGroupGradeCheckBox.setCaption(getLocalizedString("HAS_GROUP_GRADE_CAPTION"));
			hasGroupGradeCheckBox.setDescription(getLocalizedString("HAS_GROUP_GRADE_DESCRIPTION"));
		}
		
		if (supportsInvitationsCheckBox != null)
		{
			supportsInvitationsCheckBox.setCaption(getLocalizedString("SUPPORTS_INVITATIONS_CAPTION"));
			supportsInvitationsCheckBox.setDescription(getLocalizedString("SUPPORTS_INVITATIONS_DESCRIPTION"));
		}
		
		if (isInsideCheckBox != null)
		{
			isInsideCheckBox.setCaption(getLocalizedString("IS_INSIDE_UNIVERSITY_CAPTION"));
			isInsideCheckBox.setDescription(getLocalizedString("IS_INSIDE_UNIVERSITY_DESCRIPTION"));
		}
		
		if (gradePolicyComboBox != null)
			gradePolicyComboBox.setCaption(getLocalizedString("GRADE_POLICY_CAPTION"));
		
		if (isSetupCheckBox != null)
		{
			isSetupCheckBox.setCaption(getLocalizedString("IS_SETUP_CAPTION"));
			isSetupCheckBox.setDescription(getLocalizedString("IS_SETUP_DESCRIPTION"));
		}
		
		if (isInRegistrationCheckBox != null)
		{
			isInRegistrationCheckBox.setCaption(getLocalizedString("IS_IN_REGISTRATION_CAPTION"));
			isInRegistrationCheckBox.setDescription(getLocalizedString("IS_IN_REGISTRATION_DESCRIPTION"));
		}
		
		if (maxGroupSizeTextField != null)
		{
			maxGroupSizeTextField.setCaption(getLocalizedString("MAX_GROUP_SIZE_CAPTION"));
			maxGroupSizeTextField.setDescription(getLocalizedString("MAX_GROUP_SIZE_DESCRIPTION"));
		}
		
		if (academicYearComboBox != null)
		{
			academicYearComboBox.setCaption(getLocalizedString("ACADEMIC_YEAR_CAPTION"));
			academicYearComboBox.setDescription(getLocalizedString("ACADEMIC_YEAR_DESCRIPTION"));
		}
		
		if (semesterTextField != null)
		{
			semesterTextField.setCaption(getLocalizedString("SEMESTER_CAPTION"));
			semesterTextField.setDescription(getLocalizedString("SEMESTER_DESCRIPTION"));
		}
		
		if (lessonComboBox != null)
		{
			lessonComboBox.setCaption(getLocalizedString("LESSON_CAPTION"));
			
			DataUtilities.updateMultilingual(lessonComboBox);
		}
		
		if (academicDirectorField != null)
			academicDirectorField.setCaption(getLocalizedString("ACADEMIC_DIRECTOR_CAPTION"));
		
		if (scientificDirectorField != null)
			scientificDirectorField.setCaption(getLocalizedString("SCIENTIFIC_DIRECTOR_CAPTION"));
		
		if (supervisingProfessorsTableComponent != null)
			supervisingProfessorsTableComponent.setCaption(
					getLocalizedString("SUPERVISING_PROFESSORS_CAPTION"));
		
		if (institutionalDirectorField != null)
			institutionalDirectorField.setCaption(getLocalizedString("INSTITUTIONAL_DIRECTOR_CAPTION"));
		
		if (paymentOrderDateField != null)
		{
			paymentOrderDateField.setCaption(getLocalizedString("PAYMENT_ORDER_DATE_CAPTION"));
			paymentOrderDateField.setLocale(locale);
		}
		
		if (paymentOrderAmountTextField != null)
			paymentOrderAmountTextField.setCaption(getLocalizedString("PAYMENT_ORDER_AMOUNT_CAPTION"));

		advancedForm.setCaption(getLocalizedString("ADVANCED_SETTINGS_CAPTION"));
		
		if (requirementsTableComponent != null)
		{
			requirementsTableComponent.setCaption(getLocalizedString("REQUIREMENTS_CAPTION"));
			requirementsTableComponent.setDescription(getLocalizedString("REQUIREMENTS_DESCRIPTION"));
		}
		
		if (financialSourcesCheckListField != null)
			financialSourcesCheckListField.setCaption(getLocalizedString("FINANCIAL_SOURCES_CAPTION"));
		
		if (reportsTableComponent != null)
			reportsTableComponent.setCaption(getLocalizedString("REPORTS_CAPTION"));
		
		if (insuranceContractsTableComponent != null)
			insuranceContractsTableComponent.setCaption(getLocalizedString("INSURANCE_CONTRACTS_CAPTION"));

		if (allowJobPostingPreferencesCheckBox != null)
		{
			allowJobPostingPreferencesCheckBox.setCaption(getLocalizedString("ALLOW_JOB_POSTINGS_PREFERENCES_CAPTION"));
			allowJobPostingPreferencesCheckBox.setDescription(getLocalizedString("ALLOW_JOB_POSTINGS_PREFERENCES_DESCRIPTION"));
		}
		
		if (allowLocationPreferencesCheckBox != null)
		{
			allowLocationPreferencesCheckBox.setCaption(getLocalizedString("ALLOW_LOCATION_PREFERENCES_CAPTION"));
			allowLocationPreferencesCheckBox.setDescription(getLocalizedString("ALLOW_LOCATION_PREFERENCES_DESCRIPTION"));
		}
		
		if (allowCategoryPreferencesCheckBox != null)
		{
			allowCategoryPreferencesCheckBox.setCaption(getLocalizedString("ALLOW_CATEGORY_PREFERENCES_CAPTION"));
			allowCategoryPreferencesCheckBox.setDescription(getLocalizedString("ALLOW_CATEGORY_PREFERENCES_DESCRIPTION"));
		}
	}

	@Override
	public BeanItem<FilterOptions> getFilterOptions()
	{
		return filterOptionsItem;
	}

	@Override
	public Department getDepartment()
	{
		return this.department;
	}

	@Override
	public void setDepartment(Department department)
	{
		this.department = department;
	}

	@Override
	public boolean isDataValid()
	{
		return basicForm.isValid() && advancedForm.isValid();
	}

	@Override
	public void discardChanges()
	{
		basicForm.discard();
		advancedForm.discard();
	}

	@Override
	public void commitChangesToModel()
	{
		basicForm.commit();
		advancedForm.commit();
	}

	@Override
	public IOkCancelView getOkCancelView()
	{
		return okCancelComponent;
	}

	@Override
	public CoOp getSelectedCoop()
	{
		return coopsTableComponent.getSelectedValue();
	}
	
	private ComboBox createLessonComboBox()
	{
		Session session = getContext().getSession();
		
		if (session == null) return null;
		
		Department department = session.getAuthenticatedUser().getDepartment();
		
		ComboBox lessonComboBox = new ComboBox();
		
		lessonComboBox.setWidth("100%");
		
		lessonComboBox.setNullSelectionAllowed(true);
		lessonComboBox.setInputPrompt("-");
		lessonComboBox.setTextInputAllowed(false);
		
		ArrayList<String> propertyIds = new ArrayList<String>();
		
		propertyIds.add("name");
		
		DataItemContainer<Lesson> container =
			new DataItemContainer<Lesson>(
					Lesson.class, 
					department.getLessons(), 
					session.getBaseManager(), 
					propertyIds);
		
		lessonComboBox.setItemCaptionMode(
				ComboBox.ITEM_CAPTION_MODE_EXPLICIT);
		
		lessonComboBox.setItemCaptionPropertyId("name");
		
		lessonComboBox.setContainerDataSource(container);
		
		return lessonComboBox;
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout()
	{
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("-1px");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("-1px");
		
		// formsHorizontalLayout
		formsHorizontalLayout = buildFormsHorizontalLayout();
		mainLayout.addComponent(formsHorizontalLayout);
		
		// okCancelComponent
		okCancelComponent = new OkCancelComponent();
		okCancelComponent.setImmediate(false);
		okCancelComponent.setWidth("-1px");
		okCancelComponent.setHeight("-1px");
		mainLayout.addComponent(okCancelComponent);
		mainLayout.setComponentAlignment(okCancelComponent, new Alignment(10));
		
		return mainLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildFormsHorizontalLayout()
	{
		// common part: create layout
		formsHorizontalLayout = new HorizontalLayout();
		formsHorizontalLayout.setImmediate(false);
		formsHorizontalLayout.setWidth("100.0%");
		formsHorizontalLayout.setHeight("-1px");
		formsHorizontalLayout.setMargin(false);
		formsHorizontalLayout.setSpacing(true);
		
		// coopsListVerticalLayout
		coopsListVerticalLayout = buildCoopsListVerticalLayout();
		formsHorizontalLayout.addComponent(coopsListVerticalLayout);
		formsHorizontalLayout.setExpandRatio(coopsListVerticalLayout, 0.2f);
		
		// basicForm
		basicForm = new CoopForm();
		basicForm.setImmediate(false);
		basicForm.setWidth("100.0%");
		basicForm.setHeight("-1px");
		formsHorizontalLayout.addComponent(basicForm);
		formsHorizontalLayout.setExpandRatio(basicForm, 0.4f);
		
		// advancedForm
		advancedForm = new CoopForm();
		advancedForm.setImmediate(false);
		advancedForm.setWidth("100.0%");
		advancedForm.setHeight("-1px");
		formsHorizontalLayout.addComponent(advancedForm);
		formsHorizontalLayout.setExpandRatio(advancedForm, 0.4f);
		
		return formsHorizontalLayout;
	}

	@AutoGenerated
	private VerticalLayout buildCoopsListVerticalLayout()
	{
		// common part: create layout
		coopsListVerticalLayout = new VerticalLayout();
		coopsListVerticalLayout.setImmediate(false);
		coopsListVerticalLayout.setWidth("100.0%");
		coopsListVerticalLayout.setHeight("-1px");
		coopsListVerticalLayout.setMargin(false);
		coopsListVerticalLayout.setSpacing(true);
		
		// filterOptionsForm
		filterOptionsForm = new FilterOptionsForm();
		filterOptionsForm.setImmediate(false);
		filterOptionsForm.setWidth("100.0%");
		filterOptionsForm.setHeight("-1px");
		coopsListVerticalLayout.addComponent(filterOptionsForm);
		
		// coopsTableComponent
		coopsTableComponent = new CoopsTableComponent();
		coopsTableComponent.setImmediate(false);
		coopsTableComponent.setWidth("100.0%");
		coopsTableComponent.setHeight("240px");
		coopsListVerticalLayout.addComponent(coopsTableComponent);
		
		return coopsListVerticalLayout;
	}

	@Override
	public Set<FinancialSource> getAvailableFinancialSources()
	{
		return availableFinancialSources;
	}

	@Override
	public void setAvailableFinancialSources(Set<FinancialSource> sources)
	{
		this.availableFinancialSources = sources;
	}
}
