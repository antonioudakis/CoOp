package softeng.coop.ui.composites;

import java.util.Locale;
import java.util.Vector;

import softeng.coop.dataaccess.Company;
import softeng.coop.dataaccess.CompanyPerson;
import softeng.coop.dataaccess.JobPosting;
import softeng.coop.dataaccess.Professor;
import softeng.coop.ui.ICoopContext;
import softeng.coop.ui.data.MultilingualValidationForm;
import softeng.coop.ui.viewdefinitions.IFormView;
import softeng.ui.vaadin.mvp.IView;
import softeng.ui.vaadin.mvp.Presenter;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Item;
import com.vaadin.data.util.BeanItem;
import com.vaadin.ui.CheckBox;
import com.vaadin.ui.Component;
import com.vaadin.ui.Field;
import com.vaadin.ui.FormFieldFactory;
import com.vaadin.ui.TextArea;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;

@SuppressWarnings("serial")
public class JobPostingComponent 
	extends CoopComponent<BeanItem<JobPosting>> 
	implements IFormView<BeanItem<JobPosting>>
{
	@AutoGenerated
	private VerticalLayout mainLayout;

	@AutoGenerated
	private JobPostingForm form;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	private TextField nameTextField;
	private TextField companyTextField;
	private TextArea descriptionTextField;
	private TextField seatsNumberTextField;
	private JobPostingPartsTableComponent jobPostingsPartTableComponent;
	private CompanyPersonPickerField managingPersonPicker;
	private ProfessorPickerField supervisingProfessorPickerField;
	private CheckBox accommodationOfferedCheckBox;
	private CheckBox salaryOfferedCheckBox;
	private CheckBox insuranceOfferedCheckBox;
	private CheckBox transportationOfferedCheckBox;
	
	private static Vector<String> propertyIds = createPropertyIds();
	
	public class JobPostingForm extends  MultilingualValidationForm<JobPosting>
	{
		private static final long serialVersionUID = 1L;

		public JobPostingForm() 
		{
			super(JobPosting.class);
		}
		
	}
	
	@Override
	protected void setupUI() 
	{
		super.setupUI();
		this.form.setCaption(getLocalizedString("FORM_CAPTION"));
		
		this.form.setImmediate(true);
		this.form.setWriteThrough(false);
		
		form.setFormFieldFactory(new FormFieldFactory() 
		{	
			@Override
			public Field createField(Item item, Object propertyId, Component uiContext) 
			{
				if (propertyId.equals("name"))
				{
					nameTextField = new TextField();
					
					nameTextField.setCaption(getLocalizedString("NAME_CAPTION"));
					if (!isReadOnly()) 
						nameTextField.setDescription(getContext().getLocalizedString("CARD_FIELD_IS_MULTILINGUAL_DESCRIPTION"));
					nameTextField.setWidth("100%");
					nameTextField.setNullRepresentation("");
					nameTextField.setNullSettingAllowed(true);
					
					return nameTextField;
				}
				else if (propertyId.equals("company.name"))
				{
					companyTextField = new TextField();
					
					companyTextField.setCaption(getLocalizedString("COMPANY_CAPTION"));
					companyTextField.setWidth("100%");
					companyTextField.setReadOnly(true);
					companyTextField.setNullRepresentation("");
					companyTextField.setNullSettingAllowed(true);
					
					return companyTextField;
				}
				else if (propertyId.equals("description"))
				{
					descriptionTextField = new TextArea();
					
					descriptionTextField.setCaption(getLocalizedString("DESCRIPTION_CAPTION"));
					if (!isReadOnly())
						descriptionTextField.setDescription(getContext().getLocalizedString("CARD_FIELD_IS_MULTILINGUAL_DESCRIPTION"));
					descriptionTextField.setWidth("100%");
					descriptionTextField.setNullRepresentation("");
					descriptionTextField.setNullSettingAllowed(true);
					
					return descriptionTextField;
				}
				else if (propertyId.equals("seatsNumber"))
				{
					seatsNumberTextField = new TextField();
					
					seatsNumberTextField.setCaption(getLocalizedString("SEATS_NUMBER_CAPTION"));
					seatsNumberTextField.setWidth("100%");
					seatsNumberTextField.setNullRepresentation("");
					seatsNumberTextField.setNullSettingAllowed(true);
					
					return seatsNumberTextField;
				}
				else if (propertyId.equals("jobPostingParts"))
				{
					jobPostingsPartTableComponent = new JobPostingPartsTableComponent();
					
					jobPostingsPartTableComponent.setCaption(getLocalizedString("JOBPOSTING_PARTS_CAPTION"));
					jobPostingsPartTableComponent.setWidth("100%");
					jobPostingsPartTableComponent.setParentModel(getModel().getBean());
					
					return jobPostingsPartTableComponent;
				}
				else if (propertyId.equals("managingCompanyPerson"))
				{
					managingPersonPicker = new CompanyPersonPickerField();
					
					managingPersonPicker.setCaption(getLocalizedString("MANANGING_COMPANY_PERSON_CAPTION"));
					managingPersonPicker.setWidth("100%");
					
					Company company = getModel().getBean().getCompany();
					managingPersonPicker.setCompany(company);
					
					managingPersonPicker.setParentAdjuster(new PickerField.ParentAdjuster<CompanyPerson>()
					{
						@Override
						public void addToParent(CompanyPerson element)
						{
							if (!getContext().getSession().isLoaded(element, "managedJobPostings")) 
								return;
					
							element.getManagedJobPostings().add(getModel().getBean());
						}

						@Override
						public void removeFromParent(CompanyPerson element)
						{
							if (!getContext().getSession().isLoaded(element, "managedJobPostings")) 
								return;
					
							element.getManagedJobPostings().remove(getModel().getBean());
						}
					});

					return managingPersonPicker;
				}
				else if (propertyId.equals("supervisingProfessor"))
				{
					supervisingProfessorPickerField = new ProfessorPickerField();
					
					supervisingProfessorPickerField.setCaption(getLocalizedString("SUPERVISOR_PROFESSOR_CAPTION"));
					supervisingProfessorPickerField.setWidth("100%");
					supervisingProfessorPickerField.setClearAllowed(false);
					
					supervisingProfessorPickerField.setParentAdjuster(new PickerField.ParentAdjuster<Professor>()
					{
						@Override
						public void addToParent(Professor element)
						{
							if (!getContext().getSession().isLoaded(element, "supervisedJobPostings")) 
								return;
					
							element.getSupervisedJobPostings().add(getModel().getBean());
						}

						@Override
						public void removeFromParent(Professor element)
						{
							if (!getContext().getSession().isLoaded(element, "supervisedJobPostings")) 
								return;
					
							element.getSupervisedJobPostings().remove(getModel().getBean());
						}
					});
					
					return supervisingProfessorPickerField;
				}
				else if (propertyId.equals("benefits.accommodationOffered"))
				{
					accommodationOfferedCheckBox = new CheckBox();
					
					accommodationOfferedCheckBox.setCaption(getLocalizedString("ACCOMMODATION_OFFERED_CAPTION"));
					accommodationOfferedCheckBox.setWidth("100%");
					
					return accommodationOfferedCheckBox;
				}
				else if (propertyId.equals("benefits.salaryOffered"))
				{
					salaryOfferedCheckBox = new CheckBox();
					
					salaryOfferedCheckBox.setCaption(getLocalizedString("SALARY_OFFERED_CAPTION"));
					salaryOfferedCheckBox.setWidth("100%");
					
					return salaryOfferedCheckBox;
				}
				else if (propertyId.equals("benefits.insuranceOffered"))
				{
					insuranceOfferedCheckBox = new CheckBox();
					
					insuranceOfferedCheckBox.setCaption(getLocalizedString("INSURANCE_OFFERED_CAPTION"));
					insuranceOfferedCheckBox.setWidth("100%");
					
					return insuranceOfferedCheckBox;
				}
				else if (propertyId.equals("benefits.transportationOffered"))
				{
					insuranceOfferedCheckBox = new CheckBox();
					
					transportationOfferedCheckBox.setCaption(getLocalizedString("TRANSPORTATION_OFFERED_CAPTION"));
					transportationOfferedCheckBox.setWidth("100%");
					
					return transportationOfferedCheckBox;
				}
				
				return null;
			}
		});
	}

	private static Vector<String> createPropertyIds()
	{
		Vector<String> properties = new Vector<String>();
		
		properties.add("name");
		properties.add("description");
		properties.add("company.name");
		properties.add("seatsNumber");
		properties.add("jobPostingParts");
		properties.add("supervisingProfessor");
		properties.add("managingCompanyPerson");

		return properties;
	}

	@Override
	protected void setupLocalizedCaptions(Locale locale) 
	{
		super.setupLocalizedCaptions(locale);
		
		if (companyTextField != null)
			companyTextField.setCaption(getLocalizedString("COMPANY_CAPTION"));
	
		if (descriptionTextField != null)
		{
			descriptionTextField.setCaption(getLocalizedString("DESCRIPTION_CAPTION"));
			if (!isReadOnly())
				descriptionTextField.setDescription(getContext().getLocalizedString("CARD_FIELD_IS_MULTILINGUAL_DESCRIPTION"));
			else
				descriptionTextField.setDescription(null);
		}
	
		if (nameTextField != null)
		{
			nameTextField.setCaption(getLocalizedString("NAME_CAPTION"));
			if (!isReadOnly())
				nameTextField.setDescription(getContext().getLocalizedString("CARD_FIELD_IS_MULTILINGUAL_DESCRIPTION"));
			else
				nameTextField.setDescription(null);
		}
	
		if (seatsNumberTextField != null)
			seatsNumberTextField.setCaption(getLocalizedString("SEATS_NUMBER_CAPTION"));	
	
		if (managingPersonPicker != null)
			managingPersonPicker.setCaption(getLocalizedString("MANANGING_COMPANY_PERSON_CAPTION"));
	
		if (supervisingProfessorPickerField != null)
			supervisingProfessorPickerField.setCaption(getLocalizedString("SUPERVISOR_PROFESSOR_CAPTION"));
	
		if (jobPostingsPartTableComponent != null)
			jobPostingsPartTableComponent.setCaption(getLocalizedString("JOBPOSTING_PARTS_CAPTION"));

		if (accommodationOfferedCheckBox != null)
			accommodationOfferedCheckBox.setCaption(getLocalizedString("ACCOMMODATION_OFFERED_CAPTION"));
		
		if (salaryOfferedCheckBox != null)
			salaryOfferedCheckBox.setCaption(getLocalizedString("SALARY_OFFERED_CAPTION"));
		
		if (insuranceOfferedCheckBox != null)
			insuranceOfferedCheckBox.setCaption(getLocalizedString("INSURANCE_OFFERED_CAPTION"));
		
		if (transportationOfferedCheckBox != null)
			transportationOfferedCheckBox.setCaption(getLocalizedString("TRANSPORTATION_OFFERED_CAPTION"));
	}

	
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public JobPostingComponent() 
	{
		buildMainLayout();
		setCompositionRoot(mainLayout);
	}

	@Override
	protected Presenter<BeanItem<JobPosting>, ICoopContext, ? extends IView<BeanItem<JobPosting>, ICoopContext>> supplyPresenter() 
	{
		return null;
	}

	@Override
	public void dataBind() 
	{
		this.form.setItemDataSource(this.getModel(), propertyIds);
	}

	@Override
	public void setReadOnly(boolean readOnly) 
	{
		super.setReadOnly(readOnly);
		
		this.form.setReadOnly(true);
	}

	@Override
	public boolean isDataValid() 
	{
		return this.form.isValid();
	}

	@Override
	public void discardChanges() 
	{
		this.form.discard();
	}

	@Override
	public void commitChangesToModel() 
	{
		this.form.commit();
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("-1px");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("-1px");
		
		// form
		form = new JobPostingForm();
		form.setImmediate(false);
		form.setWidth("100.0%");
		form.setHeight("-1px");
		mainLayout.addComponent(form);
		
		return mainLayout;
	}
}
