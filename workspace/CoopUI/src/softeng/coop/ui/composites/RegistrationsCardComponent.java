package softeng.coop.ui.composites;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Locale;
import java.util.Set;

import softeng.coop.dataaccess.AuthenticatedUser;
import softeng.coop.dataaccess.CoOp;
import softeng.coop.dataaccess.InsuranceContract;
import softeng.coop.dataaccess.Registration;
import softeng.coop.dataaccess.Requirement;
import softeng.coop.dataaccess.Student;
import softeng.coop.ui.ICoopContext;
import softeng.coop.ui.composites.PersonDataComponent.ViewMode;
import softeng.coop.ui.data.MultilingualValidationForm;
import softeng.coop.ui.forms.RegistrationForm;
import softeng.coop.ui.presenters.RegistrationsCardPresenter;
import softeng.coop.ui.viewdefinitions.IOkCancelView;
import softeng.coop.ui.viewdefinitions.IRegistrationsCardView;
import softeng.coop.ui.viewdefinitions.ITableView;
import softeng.coop.ui.viewdefinitions.viewmodels.CheckListViewElementEvent;
import softeng.coop.ui.viewdefinitions.viewmodels.OkCancelViewModel;
import softeng.ui.vaadin.mvp.EventSubscription;
import softeng.ui.vaadin.mvp.IListener;
import softeng.ui.vaadin.mvp.IView;
import softeng.ui.vaadin.mvp.ModelEvent;
import softeng.ui.vaadin.mvp.Presenter;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Item;
import com.vaadin.data.util.BeanItem;
import com.vaadin.terminal.ThemeResource;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.CheckBox;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.Component;
import com.vaadin.ui.Field;
import com.vaadin.ui.FormFieldFactory;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;

@SuppressWarnings("serial")
public class RegistrationsCardComponent 
extends CoopComponent<BeanItem<CoOp>>
implements IRegistrationsCardView
{
	@AutoGenerated
	private VerticalLayout mainLayout;

	@AutoGenerated
	private OkCancelComponent okCancelComponent;

	@AutoGenerated
	private HorizontalLayout cascadeHorizontalLayout;

	@AutoGenerated
	private VerticalLayout registrationFormVerticalLayout;

	@AutoGenerated
	private RegistrationForm registrationForm;

	@AutoGenerated
	private VerticalLayout registrationDataVerticalLayout;

	@AutoGenerated
	private RegistrationReportsComponent registrationReportsComponent;

	@AutoGenerated
	private PersonDataComponent personDataComponent;

	@AutoGenerated
	private VerticalLayout registrationsListVerticalLayout;

	@AutoGenerated
	private Button sendMailButton;

	@AutoGenerated
	private FilterOptionsForm filterOptionsForm;

	@AutoGenerated
	private RegistrationsTableComponent registrationsTableComponent;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	private static final long serialVersionUID = 1L;
	
	private static class FilterOptionsForm
	extends MultilingualValidationForm<FilterOptions>
	{
		private static final long serialVersionUID = 1L;

		public FilterOptionsForm()
		{
			super(FilterOptions.class);
		}
	}
	
	private BeanItem<FilterOptions> filterOptionsItem = 
		new BeanItem<FilterOptions>(new FilterOptions());
	
	private ArrayList<String> filterPropertyIds = 
		createFilterPropertyIds();
	
	private CheckBox noAmaCheckBox;
	private CheckBox noIbanCheckBox;
	private CheckBox notAssignedToJobCheckBox;
	private CheckBox notPassedCheckBox;
	private CheckBox notGradedCheckBox;
	private CheckBox notQualifiedForAssignmentCheckBox;
	private CheckBox notQualifiedForCompletionCheckBox;
	private ComboBox minGradeComboBox;
	private ComboBox maxGradeComboBox;
	private CheckBox noInsuranceContractCheckBox;
	
	private RequirementsCheckListField requirementsCheckListField;
	private CheckBox qualifiedForAssignmentCheckBox;
	private CheckBox qualifiedForCompletionCheckBox;
	private PaymentsTableComponent paymentsTableComponent;
	private InsuranceContractPickerField insuranceContractPickerField;
	private TextField priorityTextField;
	private TextField jobDescriptionTextField;
	
	private static List<String> registrationPropertyIds = getRegistrationPropertyIds();
	
	private EventSubscription<Collection<AuthenticatedUser>, IListener<Collection<AuthenticatedUser>>> sendMailEventSubscription =
		new EventSubscription<Collection<AuthenticatedUser>, IListener<Collection<AuthenticatedUser>>>();
	
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public RegistrationsCardComponent()
	{
		buildMainLayout();
		
		setCompositionRoot(mainLayout);
		
		sendMailButton.addListener(new Button.ClickListener()
		{
			
			@Override
			public void buttonClick(ClickEvent event)
			{
				onSendMail();
			}
		});
	}

	protected void onSendMail()
	{
		Collection<Registration> listedRegistrations = registrationsTableComponent.getContainer().getItemIds();
		
		Collection<AuthenticatedUser> listedUsers = new ArrayList<AuthenticatedUser>(listedRegistrations.size());
		
		for (Registration registration : listedRegistrations)
		{
			listedUsers.add(registration.getStudent());
		}
	
		sendMailEventSubscription.fire(listedUsers);
	}

	private static List<String> getRegistrationPropertyIds()
	{
		ArrayList<String> propertyIds = new ArrayList<String>();
		
		propertyIds.add("meetsRequirements");
		propertyIds.add("qualifiedForAssigmnent");
		propertyIds.add("qualifiedForCompletion");
		propertyIds.add("priority");
		propertyIds.add("group.job.jobPosting.name");
		propertyIds.add("payments");
		propertyIds.add("insuranceContract");
		
		return propertyIds;
	}

	private ArrayList<String> createFilterPropertyIds()
	{
		ArrayList<String> propertyIds = new ArrayList<String>();
		
		propertyIds.add("noAma");
		propertyIds.add("noIban");
		propertyIds.add("notAssignedToJob");
		propertyIds.add("notPassed");
		propertyIds.add("notGraded");
		propertyIds.add("notQualifiedForAssignment");
		propertyIds.add("notQualifiedForCompletion");
		propertyIds.add("noInsuranceContract");
		propertyIds.add("minGrade");
		propertyIds.add("maxGrade");
		
		return propertyIds;
	}

	@Override
	public boolean isDataValid()
	{
		return registrationForm.isValid() && registrationReportsComponent.isDataValid();
	}

	@Override
	public void discardChanges()
	{
		registrationForm.discard();
		registrationReportsComponent.discardChanges();
	}

	@Override
	public void commitChangesToModel()
	{
		registrationForm.commit();
		registrationReportsComponent.commitChangesToModel();
	}

	@Override
	public BeanItem<FilterOptions> getFilterOptions()
	{
		return filterOptionsItem;
	}

	@Override
	public ITableView<CoOp, Registration> getRegistrationsTableView()
	{
		return registrationsTableComponent;
	}

	@Override
	public IOkCancelView getOkCancelView()
	{
		return okCancelComponent;
	}

	@Override
	protected Presenter<BeanItem<CoOp>, ICoopContext, ? extends IView<BeanItem<CoOp>, ICoopContext>> supplyPresenter()
	{
		return new RegistrationsCardPresenter(this);
	}

	@Override
	public void dataBind()
	{
	}

	@Override
	protected void setupUI()
	{
		super.setupUI();
		
		sendMailButton.setIcon(new ThemeResource("../images/actions/mail.png"));
		
		getOkCancelView().setModel(OkCancelViewModel.Save);
		getOkCancelView().dataBind();
		
		registrationsTableComponent.setImmediate(true);
		registrationsTableComponent.setWriteThrough(false);
		registrationsTableComponent.setAddVisible(false);
		registrationsTableComponent.setEditVisible(false);
		registrationsTableComponent.setDeleteVisible(false);
		
		registrationsTableComponent.addSelectedChangeListener(new IListener<ModelEvent<Registration>>()
		{
			@Override
			public void onEvent(ModelEvent<Registration> event)
			{
				onSelectedRegistrationChanged(event.getModel());
			}
		});
		
		filterOptionsForm.setFormFieldFactory(new FormFieldFactory()
		{
			@Override
			public Field createField(Item item, Object propertyId, Component uiContext)
			{
				if (propertyId.equals("noAma"))
				{
					noAmaCheckBox = new CheckBox();
					noAmaCheckBox.setCaption(getLocalizedString("NO_AMA_CAPTION"));
					noAmaCheckBox.setWidth("100%");
					
					return noAmaCheckBox;
				}
				else if (propertyId.equals("noIban"))
				{
					noIbanCheckBox = new CheckBox();
					noIbanCheckBox.setCaption(getLocalizedString("NO_IBAN_CAPTION"));
					noIbanCheckBox.setWidth("100%");
					
					return noIbanCheckBox;
				}
				else if (propertyId.equals("notAssignedToJob"))
				{
					notAssignedToJobCheckBox = new CheckBox();
					notAssignedToJobCheckBox.setCaption(getLocalizedString("NOT_ASSIGNED_TO_JOB_CAPTION"));
					notAssignedToJobCheckBox.setWidth("100%");
					
					return notAssignedToJobCheckBox;
				}
				else if (propertyId.equals("notQualifiedForAssignment"))
				{
					notQualifiedForAssignmentCheckBox = new CheckBox();
					notQualifiedForAssignmentCheckBox.setCaption(getLocalizedString("NOT_QUALIFIED_FOR_ASSIGNMENT_CAPTION"));
					notQualifiedForAssignmentCheckBox.setWidth("100%");
					
					return notQualifiedForAssignmentCheckBox;
				}
				else if (propertyId.equals("notQualifiedForCompletion"))
				{
					notQualifiedForCompletionCheckBox = new CheckBox();
					notQualifiedForCompletionCheckBox.setCaption(getLocalizedString("NOT_QUALIFIED_FOR_COMPLETION_CAPTION"));
					notQualifiedForCompletionCheckBox.setWidth("100%");
					
					return notQualifiedForCompletionCheckBox;
				}
				else if (propertyId.equals("notPassed"))
				{
					notPassedCheckBox = new CheckBox();
					notPassedCheckBox.setCaption(getLocalizedString("NOT_PASSED_CAPTION"));
					notPassedCheckBox.setWidth("100%");
					
					return notPassedCheckBox;
				}
				else if (propertyId.equals("notGraded"))
				{
					notGradedCheckBox = new CheckBox();
					notGradedCheckBox.setCaption(getLocalizedString("NOT_GRADED_CAPTION"));
					notGradedCheckBox.setWidth("100%");
					
					return notGradedCheckBox;
				}
				else if (propertyId.equals("minGrade"))
				{
					minGradeComboBox = createGradeComboBox();
					minGradeComboBox.setCaption(getLocalizedString("MIN_GRADE_CAPTION"));
					minGradeComboBox.setWidth("100%");
					
					return minGradeComboBox;
				}
				else if (propertyId.equals("maxGrade"))
				{
					maxGradeComboBox = createGradeComboBox();
					maxGradeComboBox.setCaption(getLocalizedString("MAX_GRADE_CAPTION"));
					maxGradeComboBox.setWidth("100%");
					
					return maxGradeComboBox;
				}
				else if (propertyId.equals("noInsuranceContract"))
				{
					noInsuranceContractCheckBox = new CheckBox();
					noInsuranceContractCheckBox.setCaption(getLocalizedString("NO_INSURANCE_CONTRACT_CAPTION"));
					noInsuranceContractCheckBox.setWidth("100%");
					
					return noInsuranceContractCheckBox;
				}

				return null;
			}
		});
		
		VerticalLayout filterOptionsLayout = new VerticalLayout();
		filterOptionsLayout.setSpacing(true);
		
		filterOptionsForm.setLayout(filterOptionsLayout);
		filterOptionsForm.setImmediate(true);
		filterOptionsForm.setItemDataSource(filterOptionsItem, filterPropertyIds);
		
		personDataComponent.setReadOnly(true);
		personDataComponent.setMode(ViewMode.Compact);
		
		registrationForm.setImmediate(true);
		registrationForm.setWriteThrough(false);
		
		registrationForm.setFormFieldFactory(new FormFieldFactory()
		{
			@Override
			public Field createField(Item item, Object propertyId, Component uiContext)
			{
				if (propertyId.equals("meetsRequirements"))
				{
					requirementsCheckListField = new RequirementsCheckListField();
					requirementsCheckListField.setCaption(getLocalizedString("REQUIREMENTS_CAPTION"));
					requirementsCheckListField.setDescription(getLocalizedString("REQUIREMENTS_DESCRIPTION"));
					requirementsCheckListField.setWidth("100%");
					
					@SuppressWarnings("unchecked")
					BeanItem<Registration> registrationItem = (BeanItem<Registration>)item;
					
					requirementsCheckListField.setAvailableElements(
							registrationItem.getBean().getCoop().getRequirements());
					
					requirementsCheckListField.setRegistration(registrationItem.getBean());

					requirementsCheckListField.addElementClickListener(new IListener<CheckListViewElementEvent<Requirement>>()
					{
						@Override
						public void onEvent(CheckListViewElementEvent<Requirement> event)
						{
							onRequirementsElementClicked(event);
						}
					});
					
					return requirementsCheckListField;
				}
				else if (propertyId.equals("qualifiedForAssigmnent"))
				{
					qualifiedForAssignmentCheckBox = new CheckBox();
					qualifiedForAssignmentCheckBox.setCaption(getLocalizedString("QUALIFIED_FOR_ASSIGMNENT_CAPTION"));
					qualifiedForAssignmentCheckBox.setDescription(getLocalizedString("QUALIFIED_FOR_ASSIGMNENT_DESCRIPTION"));
					qualifiedForAssignmentCheckBox.setWidth("100%");
					
					return qualifiedForAssignmentCheckBox;
				}
				else if (propertyId.equals("qualifiedForCompletion"))
				{
					qualifiedForCompletionCheckBox = new CheckBox();
					qualifiedForCompletionCheckBox.setCaption(getLocalizedString("QUALIFIED_FOR_COMPLETION_CAPTION"));
					qualifiedForCompletionCheckBox.setDescription(getLocalizedString("QUALIFIED_FOR_COMPLETION_DESCRIPTION"));
					qualifiedForCompletionCheckBox.setWidth("100%");
					
					return qualifiedForCompletionCheckBox;
				}
				else if (propertyId.equals("payments"))
				{
					paymentsTableComponent = new PaymentsTableComponent();
					paymentsTableComponent.setWidth("100%");

					@SuppressWarnings("unchecked")
					BeanItem<Registration> registrationItem = (BeanItem<Registration>)item;
					
					paymentsTableComponent.setParentModel(registrationItem.getBean());
					
					paymentsTableComponent.setCaption(getLocalizedString("PAYMENTS_CAPTION"));
					
					return paymentsTableComponent;
				}
				else if (propertyId.equals("insuranceContract"))
				{
					if (getModel() != null)
					{
						insuranceContractPickerField = new InsuranceContractPickerField();
						insuranceContractPickerField.setWidth("100%");
						
						insuranceContractPickerField.setCaption(getLocalizedString("INSURANCE_CONTRACT_CAPTION"));
						
						insuranceContractPickerField.setCoop(getModel().getBean());
						
						insuranceContractPickerField.setParentAdjuster(new PickerField.ParentAdjuster<InsuranceContract>()
						{
							@Override
							public void addToParent(InsuranceContract element)
							{
								if (!getContext().getSession().isLoaded(element, "registrations")) 
									return;
						
								element.getRegistrations().add(getRegistrationsTableView().getSelectedValue());
							}

							@Override
							public void removeFromParent(InsuranceContract element)
							{
								if (!getContext().getSession().isLoaded(element, "registrations")) 
									return;
						
								element.getRegistrations().remove(getRegistrationsTableView().getSelectedValue());
							}
						});
						
						return insuranceContractPickerField;
					}
				}
				else if (propertyId.equals("priority"))
				{
					priorityTextField = new TextField();
					priorityTextField.setCaption(getLocalizedString("PRIORITY_CAPTION"));
					priorityTextField.setDescription(getLocalizedString("PRIORITY_DESCRIPTION"));
					priorityTextField.setWidth("100%");
					priorityTextField.setNullRepresentation("");
					priorityTextField.setNullSettingAllowed(true);
					
					return priorityTextField;
				}
				else if (propertyId.equals("group.job.jobPosting.name"))
				{
					jobDescriptionTextField = new TextField();
					jobDescriptionTextField.setCaption(getLocalizedString("JOB_NAME_CAPTION"));
					jobDescriptionTextField.setWidth("100%");
					jobDescriptionTextField.setReadOnly(true);
					jobDescriptionTextField.setNullRepresentation(getLocalizedString("JOB_NAME_NOT_ASSIGNED_VALUE"));
					
					return jobDescriptionTextField;
				}
				
				return null;
			}
		});
		
	}
	
	private void onRequirementsElementClicked(CheckListViewElementEvent<Requirement> event)
	{
		Requirement selectedRequirement = event.getElement();
		
		Set<Requirement> allRequirementsOfType = new HashSet<Requirement>();
		
		Set<Requirement> allRequirements = requirementsCheckListField.getAvailableElements();
		
		for (Requirement requirement : allRequirements)
		{
			if (requirement.getType() == selectedRequirement.getType())
				allRequirementsOfType.add(requirement);
		}
		
		boolean containsAll = requirementsCheckListField.getSelectedElements().containsAll(allRequirementsOfType);
		
		switch (selectedRequirement.getType())
		{
			case Assignment:
				if (qualifiedForAssignmentCheckBox != null) 
					qualifiedForAssignmentCheckBox.setValue(containsAll);
				
				break;
				
			case Completion:
				if (qualifiedForCompletionCheckBox != null)
					qualifiedForCompletionCheckBox.setValue(containsAll);
				
				break;
		}
	}
	
	protected void onSelectedRegistrationChanged(Registration registration)
	{
		BeanItem<Registration> selectedItem = registrationsTableComponent.getSelectedItem();
		
		if (registration != null && registration.getStudent() != null)
		{
			personDataComponent.setModel(new BeanItem<Student>(registration.getStudent()));

			CoOp coop = registration.getCoop();
			
			if (!coop.isGroupCoOp() || !coop.isHasGroupGrade())
			{
				registrationReportsComponent.setModel(selectedItem);
			}
			else
			{
				registrationReportsComponent.setModel(null);
			}
			
		}
		else
		{
			personDataComponent.setModel(null);
			
			registrationReportsComponent.setModel(null);
		}
		
		personDataComponent.dataBind();
		
		registrationForm.setItemDataSource(selectedItem, registrationPropertyIds);

		registrationReportsComponent.dataBind();
	}

	private ComboBox createGradeComboBox()
	{
		ComboBox comboBox = new ComboBox();
		
		for (float g = 0.0f; g <= 10.0f; g++)
		{
			comboBox.addItem(g);
		}
		
		return comboBox;
	}

	@Override
	protected void setupLocalizedCaptions(Locale locale)
	{
		super.setupLocalizedCaptions(locale);
		
		registrationsTableComponent.setCaption(getLocalizedString("REGISTRATIONS_CAPTION"));
		
		filterOptionsForm.setCaption(getLocalizedString("REGISTRATIONS_FILTERS_CAPTION"));
		
		sendMailButton.setCaption(getLocalizedString("SEND_MAIL_CAPTION"));
		sendMailButton.setDescription(getLocalizedString("SEND_MAIL_DESCRIPTION"));
		
		if (noAmaCheckBox != null)
			noAmaCheckBox.setCaption(getLocalizedString("NO_AMA_CAPTION"));

		if (noIbanCheckBox != null)
			noIbanCheckBox.setCaption(getLocalizedString("NO_IBAN_CAPTION"));
		
		if (notAssignedToJobCheckBox != null)
			notAssignedToJobCheckBox.setCaption(getLocalizedString("NOT_ASSIGNED_TO_JOB_CAPTION"));
		
		if (notQualifiedForAssignmentCheckBox != null)
			notQualifiedForAssignmentCheckBox.setCaption(getLocalizedString("NOT_QUALIFIED_FOR_ASSIGNMENT_CAPTION"));
		
		if (notQualifiedForCompletionCheckBox != null)
			notQualifiedForCompletionCheckBox.setCaption(getLocalizedString("NOT_QUALIFIED_FOR_COMPLETION_CAPTION"));
		
		if (notPassedCheckBox != null)
			notPassedCheckBox.setCaption(getLocalizedString("NOT_PASSED_CAPTION"));
		
		if (notGradedCheckBox != null)
			notGradedCheckBox.setCaption(getLocalizedString("NOT_GRADED_CAPTION"));
		
		if (minGradeComboBox != null)
			minGradeComboBox.setCaption(getLocalizedString("MIN_GRADE_CAPTION"));
		
		if (maxGradeComboBox != null)
			maxGradeComboBox.setCaption(getLocalizedString("MAX_GRADE_CAPTION"));
		
		if (noInsuranceContractCheckBox != null)
			noInsuranceContractCheckBox.setCaption(getLocalizedString("NO_INSURANCE_CONTRACT_CAPTION"));
		
		registrationForm.setCaption(getLocalizedString("REGISTRATION_FORM_CAPTION"));

		if (qualifiedForAssignmentCheckBox != null)
		{
			qualifiedForAssignmentCheckBox.setCaption(getLocalizedString("QUALIFIED_FOR_ASSIGMNENT_CAPTION"));
			qualifiedForAssignmentCheckBox.setDescription(getLocalizedString("QUALIFIED_FOR_ASSIGMNENT_DESCRIPTION"));
		}
		
		if (qualifiedForCompletionCheckBox != null)
		{
			qualifiedForCompletionCheckBox.setCaption(getLocalizedString("QUALIFIED_FOR_COMPLETION_CAPTION"));
			qualifiedForCompletionCheckBox.setDescription(getLocalizedString("QUALIFIED_FOR_COMPLETION_DESCRIPTION"));
		}
		
		if (requirementsCheckListField != null)
		{
			requirementsCheckListField.setCaption(getLocalizedString("REQUIREMENTS_CAPTION"));
			requirementsCheckListField.setDescription(getLocalizedString("REQUIREMENTS_DESCRIPTION"));
		}
		
		if (insuranceContractPickerField != null)
			insuranceContractPickerField.setCaption(getLocalizedString("INSURANCE_CONTRACT_CAPTION"));

		if (priorityTextField != null)
		{
			priorityTextField.setCaption(getLocalizedString("PRIORITY_CAPTION"));
			priorityTextField.setDescription(getLocalizedString("PRIORITY_DESCRIPTION"));
		}
		
		if (jobDescriptionTextField != null)
		{
			jobDescriptionTextField.setCaption(getLocalizedString("JOB_NAME_CAPTION"));
			jobDescriptionTextField.setNullRepresentation(getLocalizedString("JOB_NAME_NOT_ASSIGNED_VALUE"));
		}
	}

	@Override
	public void addSendMailListener(IListener<Collection<AuthenticatedUser>> listener)
	{
		sendMailEventSubscription.add(listener);
	}

	@Override
	public void removeSendMailListener(IListener<Collection<AuthenticatedUser>> listener)
	{
		sendMailEventSubscription.remove(listener);
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout()
	{
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);
		mainLayout.setSpacing(true);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// cascadeHorizontalLayout
		cascadeHorizontalLayout = buildCascadeHorizontalLayout();
		mainLayout.addComponent(cascadeHorizontalLayout);
		mainLayout.setExpandRatio(cascadeHorizontalLayout, 0.25f);
		
		// okCancelComponent
		okCancelComponent = new OkCancelComponent();
		okCancelComponent.setImmediate(false);
		okCancelComponent.setWidth("-1px");
		okCancelComponent.setHeight("-1px");
		mainLayout.addComponent(okCancelComponent);
		mainLayout.setComponentAlignment(okCancelComponent, new Alignment(10));
		
		return mainLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildCascadeHorizontalLayout()
	{
		// common part: create layout
		cascadeHorizontalLayout = new HorizontalLayout();
		cascadeHorizontalLayout.setImmediate(false);
		cascadeHorizontalLayout.setWidth("100.0%");
		cascadeHorizontalLayout.setHeight("-1px");
		cascadeHorizontalLayout.setMargin(false);
		cascadeHorizontalLayout.setSpacing(true);
		
		// registrationsListVerticalLayout
		registrationsListVerticalLayout = buildRegistrationsListVerticalLayout();
		cascadeHorizontalLayout.addComponent(registrationsListVerticalLayout);
		cascadeHorizontalLayout.setExpandRatio(registrationsListVerticalLayout, 0.2f);
		
		// registrationDataVerticalLayout
		registrationDataVerticalLayout = buildRegistrationDataVerticalLayout();
		cascadeHorizontalLayout.addComponent(registrationDataVerticalLayout);
		cascadeHorizontalLayout.setExpandRatio(registrationDataVerticalLayout, 0.4f);
		
		// registrationFormVerticalLayout
		registrationFormVerticalLayout = buildRegistrationFormVerticalLayout();
		cascadeHorizontalLayout.addComponent(registrationFormVerticalLayout);
		cascadeHorizontalLayout.setExpandRatio(registrationFormVerticalLayout, 0.4f);
		
		return cascadeHorizontalLayout;
	}

	@AutoGenerated
	private VerticalLayout buildRegistrationsListVerticalLayout()
	{
		// common part: create layout
		registrationsListVerticalLayout = new VerticalLayout();
		registrationsListVerticalLayout.setImmediate(false);
		registrationsListVerticalLayout.setWidth("100.0%");
		registrationsListVerticalLayout.setHeight("-1px");
		registrationsListVerticalLayout.setMargin(false);
		registrationsListVerticalLayout.setSpacing(true);
		
		// registrationsTableComponent
		registrationsTableComponent = new RegistrationsTableComponent();
		registrationsTableComponent.setCaption("Registered students");
		registrationsTableComponent.setImmediate(false);
		registrationsTableComponent.setWidth("100.0%");
		registrationsTableComponent.setHeight("-1px");
		registrationsListVerticalLayout.addComponent(registrationsTableComponent);
		
		// filterOptionsForm
		filterOptionsForm = new FilterOptionsForm();
		filterOptionsForm.setCaption("Filter criteria");
		filterOptionsForm.setImmediate(false);
		filterOptionsForm.setWidth("100.0%");
		filterOptionsForm.setHeight("-1px");
		registrationsListVerticalLayout.addComponent(filterOptionsForm);
		
		// sendMailButton
		sendMailButton = new Button();
		sendMailButton.setCaption("Button");
		sendMailButton.setImmediate(true);
		sendMailButton.setWidth("100px");
		sendMailButton.setHeight("-1px");
		registrationsListVerticalLayout.addComponent(sendMailButton);
		registrationsListVerticalLayout.setComponentAlignment(sendMailButton, new Alignment(10));
		
		return registrationsListVerticalLayout;
	}

	@AutoGenerated
	private VerticalLayout buildRegistrationDataVerticalLayout()
	{
		// common part: create layout
		registrationDataVerticalLayout = new VerticalLayout();
		registrationDataVerticalLayout.setImmediate(false);
		registrationDataVerticalLayout.setWidth("100.0%");
		registrationDataVerticalLayout.setHeight("-1px");
		registrationDataVerticalLayout.setMargin(false);
		registrationDataVerticalLayout.setSpacing(true);
		
		// personDataComponent
		personDataComponent = new PersonDataComponent();
		personDataComponent.setImmediate(false);
		personDataComponent.setWidth("100.0%");
		personDataComponent.setHeight("-1px");
		registrationDataVerticalLayout.addComponent(personDataComponent);
		
		// registrationReportsComponent
		registrationReportsComponent = new RegistrationReportsComponent();
		registrationReportsComponent.setImmediate(false);
		registrationReportsComponent.setWidth("100.0%");
		registrationReportsComponent.setHeight("-1px");
		registrationDataVerticalLayout.addComponent(registrationReportsComponent);
		
		return registrationDataVerticalLayout;
	}

	@AutoGenerated
	private VerticalLayout buildRegistrationFormVerticalLayout()
	{
		// common part: create layout
		registrationFormVerticalLayout = new VerticalLayout();
		registrationFormVerticalLayout.setImmediate(false);
		registrationFormVerticalLayout.setWidth("100.0%");
		registrationFormVerticalLayout.setHeight("-1px");
		registrationFormVerticalLayout.setMargin(false);
		registrationFormVerticalLayout.setSpacing(true);
		
		// registrationForm
		registrationForm = new RegistrationForm();
		registrationForm.setImmediate(false);
		registrationForm.setWidth("100.0%");
		registrationForm.setHeight("-1px");
		registrationFormVerticalLayout.addComponent(registrationForm);
		
		return registrationFormVerticalLayout;
	}

}
