package softeng.coop.ui.composites;

import java.util.ArrayList;
import java.util.List;
import java.util.Locale;

import softeng.coop.dataaccess.JobPosting;
import softeng.coop.ui.ICoopContext;
import softeng.coop.ui.MultilingualTable;
import softeng.coop.ui.data.DataItemContainer;
import softeng.coop.ui.presenters.ChooseJobPostingPresenter;
import softeng.coop.ui.viewdefinitions.IChooseJobPostingView;
import softeng.ui.vaadin.mvp.IView;
import softeng.ui.vaadin.mvp.Presenter;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.util.IndexedContainer;
import com.vaadin.ui.VerticalLayout;

public class ChooseJobPostingComponent
	extends CoopComponent<DataItemContainer<JobPosting>>
	implements IChooseJobPostingView
{

	private static final long serialVersionUID = 1L;

	@AutoGenerated
	private VerticalLayout mainLayout;

	@AutoGenerated
	private MultilingualTable jobPostingTable;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */
	
	private static List<String> propertyIds = createPropertyIds(); 

	public ChooseJobPostingComponent()
	{
		buildMainLayout();
		setCompositionRoot(mainLayout);
	}

	private static List<String> createPropertyIds()
	{
		ArrayList<String> list = new ArrayList<String>();
		
		list.add("name");
		list.add("description");
		list.add("benefits.salaryOffered");
		list.add("benefits.accommodationOffered");
		list.add("benefits.insuranceOffered");
		list.add("benefits.transportationOffered");

		return list;
	}

	@Override
	protected void setupLocalizedCaptions(Locale locale) 
	{
		super.setupLocalizedCaptions(locale);
		
//		if (!(jobPostingTable.getContainerDataSource() instanceof DataItemContainer))
//			return;
		
		jobPostingTable.setColumnHeader("name", getLocalizedString("NAME_CAPTION"));
		jobPostingTable.setColumnHeader("description", getLocalizedString("DESCRIPTION_CAPTION"));
		jobPostingTable.setColumnHeader("benefits.salaryOffered", getLocalizedString("SALARY_CAPTION"));
		jobPostingTable.setColumnHeader("benefits.accommodationOffered", getLocalizedString("ACCOMMODATION_CAPTION"));
		jobPostingTable.setColumnHeader("benefits.insuranceOffered", getLocalizedString("INSURANCE_CAPTION"));
		jobPostingTable.setColumnHeader("benefits.transportationOffered", getLocalizedString("TRANSPORTATION_CAPTION"));
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("-1px");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("-1px");
		
		// jobPostingTable
		jobPostingTable = new MultilingualTable();
		jobPostingTable.setImmediate(false);
		jobPostingTable.setWidth("100.0%");
		jobPostingTable.setHeight("200px");
		mainLayout.addComponent(jobPostingTable);
		
		return mainLayout;
	}
	

	@Override
	protected void setupUI() 
	{
		super.setupUI();
		
		jobPostingTable.setSelectable(true);
	}
	
	@Override
	public void dataBind() 
	{
		if (getModel() != null)
		{
			DataItemContainer<JobPosting> container = getModel();
			
			container.addNullableNestedContainerProperty("benefits.salaryOffered");
			container.addNullableNestedContainerProperty("benefits.accommodationOffered");
			container.addNullableNestedContainerProperty("benefits.insuranceOffered");
			container.addNullableNestedContainerProperty("benefits.transportationOffered");
			
			container.setContainerPropertyIds(propertyIds);
			
			jobPostingTable.setContainerDataSource(container);
			
			jobPostingTable.setVisibleColumns(propertyIds.toArray());
		}
		else
		{
			jobPostingTable.setContainerDataSource(new IndexedContainer());
		}
	}

	@Override
	protected Presenter<DataItemContainer<JobPosting>, ICoopContext, 
			? extends IView<DataItemContainer<JobPosting>, 
			ICoopContext>> 
		supplyPresenter() 
	{
		return new ChooseJobPostingPresenter(this);
	}

	@Override
	public JobPosting getSelectedJobPosting() 
	{
		return (JobPosting) jobPostingTable.getValue();
	}

	
	@Override
	public void setReadOnly(boolean readOnly)
	{
		super.setReadOnly(readOnly);
		
		jobPostingTable.setReadOnly(readOnly);
		jobPostingTable.setSelectable(!readOnly);
	}
}
