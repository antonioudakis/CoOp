package softeng.coop.ui.composites;

import java.util.ArrayList;
import java.util.List;
import java.util.Locale;

import softeng.coop.dataaccess.FinancialSource;
import softeng.coop.ui.ICoopContext;
import softeng.coop.ui.forms.FinancialSourceForm;
import softeng.coop.ui.viewdefinitions.IFormView;
import softeng.ui.vaadin.mvp.IView;
import softeng.ui.vaadin.mvp.Presenter;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Item;
import com.vaadin.data.util.BeanItem;
import com.vaadin.ui.Component;
import com.vaadin.ui.Field;
import com.vaadin.ui.FormFieldFactory;
import com.vaadin.ui.TextArea;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;

public class FinancialSourceDataComponent 
extends CoopComponent<BeanItem<FinancialSource>>
implements IFormView<BeanItem<FinancialSource>>
{
	@AutoGenerated
	private VerticalLayout mainLayout;

	@AutoGenerated
	private FinancialSourceForm form;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	private static final long serialVersionUID = 1L;

	private TextField nameTextField = new TextField();
	private TextArea descriptionArea = new TextArea();
	private TextField codeTextField = new TextField();
	
	private static final List<String> propertyIds = createPropertIds();
	
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public FinancialSourceDataComponent()
	{
		buildMainLayout();
		setCompositionRoot(mainLayout);
	}

	private static List<String> createPropertIds()
	{
		ArrayList<String> list = new ArrayList<String>();
		
		list.add("name");
		list.add("description");
		list.add("code");
		
		return list;
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout()
	{
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("-1px");
		mainLayout.setMargin(false);
		mainLayout.setSpacing(true);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("-1px");
		
		// form
		form = new FinancialSourceForm();
		form.setImmediate(false);
		form.setWidth("100.0%");
		form.setHeight("-1px");
		mainLayout.addComponent(form);
		
		return mainLayout;
	}

	@Override
	public boolean isDataValid()
	{
		return form.isValid();
	}

	@Override
	public void discardChanges()
	{
		form.discard();
	}

	@Override
	public void commitChangesToModel()
	{
		form.commit();
	}

	@Override
	protected Presenter<BeanItem<FinancialSource>, ICoopContext, ? extends IView<BeanItem<FinancialSource>, ICoopContext>> supplyPresenter()
	{
		return null;
	}

	@Override
	public void dataBind()
	{
		form.setItemDataSource(getModel(), propertyIds);
	}

	@SuppressWarnings("serial")
	@Override
	protected void setupUI()
	{
		super.setupUI();

		form.setImmediate(true);
		form.setWriteThrough(false);

		form.setFormFieldFactory(new FormFieldFactory()
		{
			@Override
			public Field createField(Item item, Object propertyId, Component uiContext)
			{
				if (propertyId.equals("name"))
				{
					nameTextField.setWidth("100%");
					nameTextField.setCaption(getLocalizedString("NAME_CAPTION"));
					nameTextField.setNullRepresentation("");
					nameTextField.setNullSettingAllowed(true);
					
					return nameTextField;
				}
				else if (propertyId.equals("description"))
				{
					descriptionArea.setWidth("100%");
					descriptionArea.setCaption(getLocalizedString("DESCRIPTION_CAPTION"));
					descriptionArea.setNullRepresentation("");
					descriptionArea.setNullSettingAllowed(true);
					
					return descriptionArea;
				}
				else if (propertyId.equals("code"))
				{
					codeTextField.setWidth("100%");
					codeTextField.setCaption(getLocalizedString("CODE_CAPTION"));
					codeTextField.setDescription(getLocalizedString("CODE_DESCRIPTION"));
					codeTextField.setNullRepresentation("");
					codeTextField.setNullSettingAllowed(true);
					
					return codeTextField;
				}
				
				return null;
			}
		});
	}

	@Override
	protected void setupLocalizedCaptions(Locale locale)
	{
		super.setupLocalizedCaptions(locale);
		
		form.setCaption(getLocalizedString("FORM_CAPTION"));

		nameTextField.setCaption(getLocalizedString("NAME_CAPTION"));
		
		descriptionArea.setCaption(getLocalizedString("DESCRIPTION_CAPTION"));

		codeTextField.setCaption(getLocalizedString("CODE_CAPTION"));
		codeTextField.setDescription(getLocalizedString("CODE_DESCRIPTION"));
	}
	
	@Override
	public void setReadOnly(boolean readOnly)
	{
		super.setReadOnly(readOnly);
		
		form.setReadOnly(readOnly);
	}
}
