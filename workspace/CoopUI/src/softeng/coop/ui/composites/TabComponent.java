package softeng.coop.ui.composites;

import java.util.ArrayList;
import java.util.List;
import java.util.Locale;

import softeng.coop.ui.ICoopContext;
import softeng.coop.ui.presenters.TabPresenter;
import softeng.coop.ui.viewdefinitions.ITabView;
import softeng.coop.ui.viewdefinitions.viewmodels.TabSpecification;
import softeng.ui.vaadin.mvp.IView;
import softeng.ui.vaadin.mvp.Presenter;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.ui.Component;
import com.vaadin.ui.ComponentContainer;
import com.vaadin.ui.Panel;
import com.vaadin.ui.TabSheet;
import com.vaadin.ui.TabSheet.SelectedTabChangeEvent;
import com.vaadin.ui.TabSheet.Tab;
import com.vaadin.ui.VerticalLayout;

public class TabComponent 
	extends CoopComponent<List<TabSpecification>>
	implements ITabView
{
	@AutoGenerated
	private VerticalLayout mainLayout;

	@AutoGenerated
	private TabSheet tabSheet;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	private static final long serialVersionUID = 1L;
	
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public TabComponent()
	{
		buildMainLayout();
		setCompositionRoot(mainLayout);

		this.setModel(new ArrayList<TabSpecification>());
	}

	@SuppressWarnings("serial")
	@Override
	public void dataBind()
	{
		for (TabSpecification specification : this.getModel())
		{
			String caption = getLocalizedString(specification.getCaptionKey());
			
			Tab tab = this.tabSheet.addTab(new Panel(), caption);
			
			if (specification.getDescriptionKey() != null)
				tab.setDescription(getLocalizedString(specification.getDescriptionKey()));
		}
		
		tabSheet.addListener(new TabSheet.SelectedTabChangeListener()
		{
			@Override
			public void selectedTabChange(SelectedTabChangeEvent event)
			{
				createCurrentTabContent();
			}
		});
		
		refreshTabsVisibility();
		
		createCurrentTabContent();
		
	}
	
	private void createCurrentTabContent()
	{
		Tab selectedTab =
				this.tabSheet.getTab(
						this.tabSheet.getSelectedTab());
		
		if (selectedTab == null) return;
		
		this.unloadAllTabsContents();
		
		Panel selectedPanel = (Panel)selectedTab.getComponent();
		
		if (!selectedPanel.getComponentIterator().hasNext())
		{
			int index = tabSheet.getTabPosition(selectedTab);
			
			TabSpecification specification = this.getModel().get(index);
			
			Component component = 
				specification.getComponentFactory().createComponent();
			
			component.setWidth("100%");
			
			selectedPanel.addComponent(component);
		}
		
	}
	
	private void unloadAllTabsContents()
	{
		boolean foundActiveTab = false;
		
		for (int tabIndex = 0; tabIndex < tabSheet.getComponentCount(); tabIndex++)
		{
			Tab tab = tabSheet.getTab(tabIndex);
			
			if (tab.getComponent() instanceof ComponentContainer)
			{
				ComponentContainer componentContainer =
					(ComponentContainer)tab.getComponent();
				
				if (componentContainer.getComponentIterator().hasNext())
				{
					foundActiveTab = true;
					componentContainer.removeAllComponents();
				}
				
			}
		}

		// Flush session only when there was a previously open tab.
		if (foundActiveTab)
		{
			// Flush session, make tab data fresh and save memory.
			getContext().getHeaderView().reattachToSession();
		}
	}

	@Override
	protected Presenter<List<TabSpecification>, ICoopContext, ? extends IView<List<TabSpecification>, ICoopContext>> supplyPresenter()
	{
		return new TabPresenter(this);
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout()
	{
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// tabSheet
		tabSheet = new TabSheet();
		tabSheet.setImmediate(false);
		tabSheet.setWidth("100.0%");
		tabSheet.setHeight("100.0%");
		mainLayout.addComponent(tabSheet);
		
		return mainLayout;
	}

	@Override
	protected void setupLocalizedCaptions(Locale locale)
	{
		for (int i = 0; i < this.getModel().size(); i++)
		{
			TabSpecification tabSpecification = this.getModel().get(i);
			
			Tab tab = this.tabSheet.getTab(i);
			
			tab.setCaption(getLocalizedString(tabSpecification.getCaptionKey()));
			tab.setDescription(getLocalizedString(tabSpecification.getDescriptionKey()));
		}
	}

	@Override
	public void refreshTabsVisibility()
	{
		ICoopContext context = getContext();
		
		for (int i = 0; i < this.getModel().size(); i++)
		{
			TabSpecification tabSpecification = this.getModel().get(i);
			
			Tab tab = this.tabSheet.getTab(i);
			
			boolean shouldBeVisible = tabSpecification.getComponentVisibility().isVisible(context); 

			tab.setVisible(shouldBeVisible);
		}
	}

}
