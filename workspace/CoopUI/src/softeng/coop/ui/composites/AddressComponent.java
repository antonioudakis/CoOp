package softeng.coop.ui.composites;

import java.util.Locale;
import java.util.Vector;

import softeng.coop.dataaccess.AddressType;
import softeng.coop.dataaccess.IAddress;
import softeng.coop.ui.EnumComboBox;
import softeng.coop.ui.ICoopContext;
import softeng.coop.ui.data.MultilingualValidationForm;
import softeng.coop.ui.viewdefinitions.IFormView;
import softeng.ui.vaadin.mvp.IView;
import softeng.ui.vaadin.mvp.Presenter;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Item;
import com.vaadin.data.util.BeanItem;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.Component;
import com.vaadin.ui.Field;
import com.vaadin.ui.FormFieldFactory;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;

public class AddressComponent 
	extends CoopComponent<BeanItem<? extends IAddress>>
	implements IFormView<BeanItem<? extends IAddress>>
{
	@AutoGenerated
	private VerticalLayout mainLayout;

	@AutoGenerated
	private AddressForm form;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	private TextField numberTextField;
	private TextField streetTextField;
	private TextField poBoxTextField;
	private TextField cityTextField;
	private TextField countryTextField;
	private LocationPickerField locationPicker;
	private GeoLocationPickerField geoLocationPicker;
	private ComboBox addressTypeComboBox;

	private static class AddressForm
		extends MultilingualValidationForm<IAddress>
	{
		private static final long serialVersionUID = 1L;

		public AddressForm()
		{
			super(IAddress.class);
		}
	}
	
	private static final long serialVersionUID = 1L;

	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public AddressComponent()
	{
		buildMainLayout();
		setCompositionRoot(mainLayout);

	}

	@Override
	protected Presenter<BeanItem<? extends IAddress>, ICoopContext, ? extends IView<BeanItem<? extends IAddress>, ICoopContext>> supplyPresenter()
	{
		return null;
	}

	@Override
	public void dataBind()
	{
		Vector<String> properties = new Vector<String>();
		
		properties.add("type");
		properties.add("number");
		properties.add("street");
		properties.add("poBox");
		properties.add("city");
		properties.add("country");
		properties.add("location");
		properties.add("geoLocation");
		
		this.form.setItemDataSource(this.getModel(), properties);
	}

	@SuppressWarnings("serial")
	@Override
	protected void setupUI()
	{
		super.setupUI();
		
		this.form.setImmediate(true);
		this.form.setWriteThrough(false);
		
		this.form.setFormFieldFactory(new FormFieldFactory()
		{
			@Override
			public Field createField(Item item, Object propertyId, Component uiContext)
			{
				if (propertyId.equals("number"))
				{
					numberTextField = new TextField(getLocalizedString("NUMBER_CAPTION"));
					numberTextField.setWidth("100%");
					numberTextField.setNullRepresentation("");
					return numberTextField;
				}
				else if (propertyId.equals("street"))
				{
					streetTextField = new TextField(getLocalizedString("STREET_CAPTION"));
					streetTextField.setWidth("100%");
					streetTextField.setNullRepresentation("");
					return streetTextField;
				}
				else if (propertyId.equals("poBox"))
				{
					poBoxTextField = new TextField(getLocalizedString("POSTAL_CODE_CAPTION"));
					poBoxTextField.setWidth("100%");
					poBoxTextField.setNullRepresentation("");
					return poBoxTextField;
				}
				else if (propertyId.equals("city"))
				{
					cityTextField = new TextField(getLocalizedString("CITY_CAPTION"));
					cityTextField.setWidth("100%");
					cityTextField.setNullRepresentation("");
					return cityTextField;
				}
				else if (propertyId.equals("country"))
				{
					countryTextField = new TextField(getLocalizedString("COUNTRY_CAPTION"));
					countryTextField.setWidth("100%");
					countryTextField.setNullRepresentation("");
					return countryTextField;
				}
				else if (propertyId.equals("type"))
				{
					addressTypeComboBox = new EnumComboBox(
							getLocalizedString("ADDRESS_TYPE_CAPTION"), 
							AddressType.class); 
					
					addressTypeComboBox.setWidth("100%");
					addressTypeComboBox.setNullSelectionAllowed(false);
					
					return addressTypeComboBox;
				}
				else if (propertyId.equals("location"))
				{
					locationPicker = new LocationPickerField(getLocalizedString("LOCATION_CAPTION"));
					locationPicker.setWidth("100%");
					return locationPicker;
				}
				else if (propertyId.equals("geoLocation"))
				{
					geoLocationPicker = new GeoLocationPickerField(getLocalizedString("GEOLOCATION_CAPTION"));
					geoLocationPicker.setWidth("100%");
					return geoLocationPicker;
				}
				
				return null;
			}
		});
		
	}

	@Override
	protected void setupLocalizedCaptions(Locale locale)
	{
		super.setupLocalizedCaptions(locale);
		
		form.setCaption(getLocalizedString("FORM_CAPTION"));
		
		if (numberTextField != null)
			numberTextField.setCaption(getLocalizedString("NUMBER_CAPTION"));
		
		if (streetTextField != null)
			streetTextField.setCaption(getLocalizedString("STREET_CAPTION"));
		
		if (poBoxTextField != null)
			poBoxTextField.setCaption(getLocalizedString("POSTAL_CODE_CAPTION"));
		
		if (cityTextField != null)
			cityTextField.setCaption(getLocalizedString("CITY_CAPTION"));
		
		if (countryTextField != null)
			countryTextField.setCaption(getLocalizedString("COUNTRY_CAPTION"));
		
		if (locationPicker != null)
			locationPicker.setCaption(getLocalizedString("LOCATION_CAPTION"));
		
		if (geoLocationPicker != null)
			geoLocationPicker.setCaption(getLocalizedString("GEOLOCATION_CAPTION"));
		
		if (addressTypeComboBox != null)
			addressTypeComboBox.setCaption(getLocalizedString("ADDRESS_TYPE_CAPTION"));
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout()
	{
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// form
		form = new AddressForm();
		form.setCaption("Διεύθυνση");
		form.setImmediate(false);
		form.setWidth("100.0%");
		form.setHeight("-1px");
		mainLayout.addComponent(form);
		
		return mainLayout;
	}
	
	@Override
	public boolean isDataValid()
	{
		return this.form.isValid();
	}

	@Override
	public void discardChanges()
	{
		this.form.discard();
	}

	@Override
	public void commitChangesToModel()
	{
		this.form.commit();
	}

	@Override
	public void setReadOnly(boolean readOnly)
	{
		super.setReadOnly(readOnly);
		
		form.setReadOnly(readOnly);
	}
	
}
