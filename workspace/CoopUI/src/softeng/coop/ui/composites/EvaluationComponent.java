package softeng.coop.ui.composites;

import java.util.ArrayList;
import java.util.List;
import java.util.Locale;

import softeng.coop.dataaccess.Registration;
import softeng.coop.ui.ICoopContext;
import softeng.coop.ui.forms.RegistrationForm;
import softeng.coop.ui.viewdefinitions.IFormView;
import softeng.ui.vaadin.mvp.IView;
import softeng.ui.vaadin.mvp.Presenter;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Item;
import com.vaadin.data.util.BeanItem;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.Component;
import com.vaadin.ui.Field;
import com.vaadin.ui.FormFieldFactory;
import com.vaadin.ui.VerticalLayout;

@SuppressWarnings("serial")
public class EvaluationComponent 
extends CoopComponent<BeanItem<Registration>>
implements IFormView<BeanItem<Registration>>
{

	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private RegistrationForm form;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */
	
	private ComboBox subjectSatisfactionRateComboBox =
		createRateComboBox();
	
	private ComboBox supervisionSatisfactionRateComboBox =
		createRateComboBox();
	
	private ComboBox hostSatisfactionRateComboBox =
		createRateComboBox();
	
	private static List<String> propertyIds = createPropertyIds();

	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public EvaluationComponent()
	{
		buildMainLayout();
		setCompositionRoot(mainLayout);
	}

	private static List<String> createPropertyIds()
	{
		ArrayList<String> list = new ArrayList<String>();
		
		list.add("subjectSatisfactionRate");
		list.add("supervisionSatisfactionRate");
		list.add("hostSatisfactionRate");

		return list;
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout()
	{
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);
		mainLayout.setSpacing(true);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// form
		form = new RegistrationForm();
		form.setImmediate(false);
		form.setWidth("100.0%");
		form.setHeight("-1px");
		mainLayout.addComponent(form);
		
		return mainLayout;
	}

	@Override
	protected Presenter<BeanItem<Registration>, ICoopContext, ? extends IView<BeanItem<Registration>, ICoopContext>> supplyPresenter()
	{
		return null;
	}

	@Override
	public void dataBind()
	{
		form.setItemDataSource(getModel(), propertyIds);
	}

	@Override
	public boolean isDataValid()
	{
		return form.isValid();
	}

	@Override
	public void discardChanges()
	{
		form.discard();
	}

	@Override
	public void commitChangesToModel()
	{
		form.commit();
	}

	@Override
	protected void setupUI()
	{
		super.setupUI();
		
		VerticalLayout layout = new VerticalLayout();
		layout.setSpacing(true);
		
		form.setLayout(layout);
		form.setImmediate(true);
		form.setWriteThrough(false);
		
		form.setFormFieldFactory(new FormFieldFactory()
		{
			@Override
			public Field createField(Item item, Object propertyId, Component uiContext)
			{
				if (propertyId.equals("subjectSatisfactionRate"))
				{
					subjectSatisfactionRateComboBox = createRateComboBox();
					
					subjectSatisfactionRateComboBox.setCaption(getLocalizedString("SUBJECT_SATISFACTION_RATE_CAPTION"));
					subjectSatisfactionRateComboBox.setWidth("100%");
					
					return subjectSatisfactionRateComboBox;
				}
				else if (propertyId.equals("supervisionSatisfactionRate"))
				{
					supervisionSatisfactionRateComboBox = createRateComboBox();
					
					supervisionSatisfactionRateComboBox.setCaption(getLocalizedString("SUPERVISION_SATISFACTION_RATE_CAPTION"));
					supervisionSatisfactionRateComboBox.setWidth("100%");
					
					return supervisionSatisfactionRateComboBox;
				}
				else if (propertyId.equals("hostSatisfactionRate"))
				{
					hostSatisfactionRateComboBox = createRateComboBox();
					
					hostSatisfactionRateComboBox.setCaption(getLocalizedString("HOST_SATISFACTION_RATE_CAPTION"));
					hostSatisfactionRateComboBox.setWidth("100%");
					
					return hostSatisfactionRateComboBox;
				}

				return null;
			}
		});
	}

	@Override
	protected void setupLocalizedCaptions(Locale locale)
	{
		super.setupLocalizedCaptions(locale);
		
		form.setCaption(getLocalizedString("FORM_CAPTION"));

		if (subjectSatisfactionRateComboBox != null)
			subjectSatisfactionRateComboBox.setCaption(getLocalizedString("SUBJECT_SATISFACTION_RATE_CAPTION"));
		
		if (supervisionSatisfactionRateComboBox != null)
			supervisionSatisfactionRateComboBox.setCaption(getLocalizedString("SUPERVISION_SATISFACTION_RATE_CAPTION"));
		
		if (hostSatisfactionRateComboBox != null)
			hostSatisfactionRateComboBox.setCaption(getLocalizedString("HOST_SATISFACTION_RATE_CAPTION"));
	}

	private static ComboBox createRateComboBox()
	{
		ComboBox comboBox = new ComboBox()
		{

			@Override
			public void attach()
			{
				this.pageLength = 12;

				super.attach();
			}
			
		};
		
		for (int i = 0; i <= 10; i++)
		{
			comboBox.addItem(i);
		}
		
		return comboBox;
	}

	@Override
	public void setReadOnly(boolean readOnly)
	{
		super.setReadOnly(readOnly);
		
		form.setReadOnly(readOnly);
	}

}
