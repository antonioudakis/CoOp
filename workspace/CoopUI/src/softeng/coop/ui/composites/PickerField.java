package softeng.coop.ui.composites;

import java.util.Locale;
import java.util.ResourceBundle;

import softeng.coop.ui.ICoopContext;
import softeng.coop.ui.data.DataItem;
import softeng.coop.ui.data.NullProperty;
import softeng.coop.ui.viewdefinitions.IModalView;
import softeng.coop.ui.viewdefinitions.IOkCancelView;
import softeng.coop.ui.viewdefinitions.viewmodels.OkCancelViewModel;
import softeng.ui.vaadin.mvp.IView;
import softeng.ui.vaadin.mvp.IViewListener;
import softeng.ui.vaadin.mvp.Presenter;
import softeng.ui.vaadin.mvp.ViewEvent;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Validator.InvalidValueException;
import com.vaadin.data.util.BeanItem;
import com.vaadin.terminal.ThemeResource;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.TextField;

/**
 * A field which has a model than can be picked using a dialog.
 * Supports picking both pre-existing elements or newly created ones.
 * @param <M> The type of the model of the picker.
 */
@SuppressWarnings("serial")
public abstract class PickerField<M>
	extends CoopField<M>
{
	@AutoGenerated
	private HorizontalLayout mainLayout;

	@AutoGenerated
	private Button browseButton;

	@AutoGenerated
	private Button clearButton;

	@AutoGenerated
	private TextField textField;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */
	
	private boolean browseEnabled;

	/**
	 * Optional interface to update the reverse relationship.
	 * @param <M> The type of the model of the picker.
	 */
	public static interface ParentAdjuster<M>
	{
		/**
		 * Remove the item from its reverse relationship.
		 * @param element
		 */
		void addToParent(M element);
		
		/**
		 * Add the item to its reverse relationship.
		 * @param element
		 */
		void removeFromParent(M element);
	}
	
	/**
	 * Show a form to pick an element as the model/value of this field.
	 * @param item The item corresponding to current model or a new model as specified in createBeanItem.
	 * @return Returns a visible form initially bound to the given item which is expected to provide the new selected item in its model.  
	 */
	protected abstract IModalView<BeanItem<M>> showBrowseForm(BeanItem<M> item);

	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	
	private String itemCaptionId;
	
	private ParentAdjuster<M> parentAdjuster;
	
	/**
	 * Create.
	 * @param propertyId The name of the displayed property in the field.
	 */
	public PickerField(String propertyId)
	{
		buildMainLayout();
		setCompositionRoot(mainLayout);
		
		browseEnabled = true;

		this.browseButton.addListener(new Button.ClickListener()
		{
			@Override
			public void buttonClick(ClickEvent event)
			{
				browse();
			}
		});
		
		this.clearButton.addListener(new Button.ClickListener()
		{
			@Override
			public void buttonClick(ClickEvent event)
			{
				clear();
			}
		});
		
		setItemCaptionId(propertyId);
	}
	
	@Override
	public void dataBind()
	{
		if (this.getModel() != null)
		{
			BeanItem<M> selectedItem = this.createBeanItem(this.getModel());
			
			this.textField.setPropertyDataSource(
					selectedItem.getItemProperty(this.getItemCaptionId()));
			
			browseButton.setEnabled(browseEnabled);
		}
		else
		{
			this.textField.setPropertyDataSource(new NullProperty());
			
			if (isReadOnly()) 
				browseButton.setEnabled(false);
			else
				browseButton.setEnabled(browseEnabled);
		}
	}
	
	/**
	 * Override in subclasses to select which property
	 * is bound as item caption.  
	 */
	public String getItemCaptionId()
	{
		return this.itemCaptionId;
	}
	
	/**
	 * Set the name of the value property which will be displayed
	 * in the field.
	 * @param itemCaptionId The name of the property.
	 */
	public void setItemCaptionId(String itemCaptionId)
	{
		if (itemCaptionId == null) 
			throw new IllegalArgumentException("Argument 'itemCaptionId' must not be null.");
		
		this.itemCaptionId = itemCaptionId;
		
		if (this.textField.getPropertyDataSource() != null && this.getModel() != null &&
				this.textField.getPropertyDataSource().getClass() != NullProperty.class)
		{
			BeanItem<M> selectedItem = this.createBeanItem(this.getModel());
			
			this.textField.setPropertyDataSource(
					selectedItem.getItemProperty(this.getItemCaptionId()));
		}
	}
	
	@Override
	protected void setupUI()
	{
		super.setupUI();
		
		this.textField.setReadOnly(true);
		
		this.browseButton.setCaption(null);
		this.clearButton.setCaption(null);
		
		this.browseButton.setIcon(new ThemeResource("../images/actions/find.png"));
		this.clearButton.setIcon(new ThemeResource("../images/actions/editdelete.png"));
		
	}

	protected void browse()
	{
		final BeanItem<M> selectedItem = createBeanItem(getModel());
		
		if (getModel() == null && isReadOnly()) return;
		
		final IModalView<BeanItem<M>> form = this.showBrowseForm(selectedItem);
		
		if (form == null) return;
		
		if (isReadOnly()) form.setReadOnly(true);
		
		form.getOkCancelView().addOkListener(new IViewListener<OkCancelViewModel, ICoopContext, IOkCancelView>()
		{
			@Override
			public void onEvent(ViewEvent<OkCancelViewModel, ICoopContext, IOkCancelView> event)
			{
				if (!form.isDataValid()) return;
				
				BeanItem<M> item = form.getModel();

				if (item != null)
					setValue(item.getBean());
				else
					setValue(null);
				
				updateValidationMarking();
			}
		});
		
	}
	
	@Override
	protected void setupLocalizedCaptions(Locale locale)
	{
		super.setupLocalizedCaptions(locale);
		
		this.browseButton.setDescription(
				this.getButtonsResources().getString("BROWSE_CAPTION"));
		
		this.clearButton.setDescription(
				this.getButtonsResources().getString("CLEAR_CAPTION"));
	}
	
	/**
	 * Wrap a value inside a BeanItem. Must handle null values by returning null.
	 */
	protected BeanItem<M> createBeanItem(M value)
	{
		if (value == null)
			return null;
		else
			return new DataItem<M>(value, getContext().getSession().getBaseManager());
	}

	private ResourceBundle getButtonsResources()
	{
		String resourceBaseName = HierarchicalPickerField.class.getCanonicalName();
		
		return
			ResourceBundle.getBundle(resourceBaseName, this.getLocale());
	}
	
	public boolean isClearAllowed()
	{
		return this.clearButton.isVisible();
	}
	
	public void setClearAllowed(boolean allowClear)
	{
		this.clearButton.setVisible(allowClear);
	}
	
	@Override
	protected Presenter<M, ICoopContext, ? extends IView<M, ICoopContext>> supplyPresenter() {
		return null;
	}

	@Override
	public void setReadOnly(boolean readOnly) 
	{
		super.setReadOnly(readOnly);
		
		/* New policy: Let the read-only field to present a read-only browser. */
		if (getModel() == null && readOnly) this.browseButton.setEnabled(false);
		this.clearButton.setEnabled(!readOnly);
	}

	protected void clear()
	{
		if (isReadOnly()) return;
		
		setValue(null);
		updateValidationMarking();
	}
	
	@SuppressWarnings("deprecation")
	@AutoGenerated
	private HorizontalLayout buildMainLayout()
	{
		// common part: create layout
		mainLayout = new HorizontalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);
		mainLayout.setSpacing(true);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// textField
		textField = new TextField();
		textField.setImmediate(false);
		textField.setWidth("100.0%");
		textField.setHeight("-1px");
		textField.setSecret(false);
		mainLayout.addComponent(textField);
		mainLayout.setExpandRatio(textField, 1.0f);
		
		// clearButton
		clearButton = new Button();
		clearButton.setImmediate(true);
		clearButton.setWidth("48px");
		clearButton.setHeight("-1px");
		mainLayout.addComponent(clearButton);
		
		// browseButton
		browseButton = new Button();
		browseButton.setImmediate(true);
		browseButton.setWidth("48px");
		browseButton.setHeight("-1px");
		mainLayout.addComponent(browseButton);
		
		return mainLayout;
	}

	@SuppressWarnings("unchecked")
	@Override
	public void commit() throws SourceException, InvalidValueException
	{
		boolean mustAdjustReverseRelationship = this.parentAdjuster != null &&
			this.getPropertyDataSource() != null && (this.isInvalidCommitted() || this.isValid());
		
		if (mustAdjustReverseRelationship)
		{
			M oldValue = (M)this.getPropertyDataSource().getValue();
			
			if (oldValue != null) this.parentAdjuster.removeFromParent(oldValue);
		}
		
		super.commit();
		
		if (mustAdjustReverseRelationship)
		{
			M newValue = this.getModel();
			
			if (newValue != null) this.parentAdjuster.addToParent(newValue);
		}
	}

	public void setParentAdjuster(ParentAdjuster<M> parentAdjuster)
	{
		this.parentAdjuster = parentAdjuster;
	}

	public ParentAdjuster<M> getParentAdjuster()
	{
		return parentAdjuster;
	}
	
	public boolean isBrowseEnabled()
	{
		return browseButton.isEnabled();
	}
	
	public void setBrowseEnabled(boolean enabled)
	{
		browseEnabled = enabled;

		if (!isReadOnly() || getModel() != null)
			browseButton.setEnabled(enabled);
	}

}
