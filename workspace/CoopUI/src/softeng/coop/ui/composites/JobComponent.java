package softeng.coop.ui.composites;

import java.util.List;
import java.util.Locale;
import java.util.Vector;

import softeng.coop.dataaccess.Job;
import softeng.coop.dataaccess.JobStateType;
import softeng.coop.dataaccess.Professor;
import softeng.coop.ui.EnumComboBox;
import softeng.coop.ui.ICoopContext;
import softeng.coop.ui.data.DataItem;
import softeng.coop.ui.forms.JobForm;
import softeng.coop.ui.viewdefinitions.IFormView;
import softeng.ui.vaadin.mvp.IView;
import softeng.ui.vaadin.mvp.Presenter;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Item;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.Component;
import com.vaadin.ui.DateField;
import com.vaadin.ui.Field;
import com.vaadin.ui.FormFieldFactory;
import com.vaadin.ui.TextArea;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;

@SuppressWarnings("serial")
public class JobComponent 
extends CoopComponent<DataItem<Job>>
implements IFormView<DataItem<Job>>
{

	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private JobForm form;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	private TextField jobNameTextField;
	private TextArea jobDescriptionTextArea;
	private TextArea groupCommentsTextField;
	private DateField startDateField;
	private DateField endDateField;
	private TextArea commentsTextArea;
	private TextField manDaysTotalTextField;
	private TextField manDayValueTextField;
	private JobPartsTableComponent jobPartsTableComponent;
	private ComboBox stateComboBox;
	private TextField companyNameTextField;
	private ProfessorPickerField professorPickerField;
	
	private static List<String> propertyIds = createPropertyIds();
	
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public JobComponent()
	{
		buildMainLayout();
		setCompositionRoot(mainLayout);
	}

	@Override
	protected Presenter<DataItem<Job>, ICoopContext, ? extends IView<DataItem<Job>, ICoopContext>> supplyPresenter()
	{
		return null;
	}

	@Override
	public void dataBind()
	{
		DataItem<Job> item = getModel();
		
		if (item != null)
		{
			item.addNullableNestedProperty("jobPosting.name");
			item.addNullableNestedProperty("jobPosting.description");
			item.addNullableNestedProperty("group.comments");
			item.addNullableNestedProperty("jobPosting.company.name");
		}
		
		form.setItemDataSource(getModel(), propertyIds);
	}

	@Override
	public boolean isDataValid()
	{
		return form.isValid();
	}

	@Override
	public void discardChanges()
	{
		form.discard();
	}

	@Override
	public void commitChangesToModel()
	{
		form.commit();
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout()
	{
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);
		mainLayout.setSpacing(true);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// form
		form = new JobForm();
		form.setImmediate(false);
		form.setWidth("100.0%");
		form.setHeight("-1px");
		mainLayout.addComponent(form);
		
		return mainLayout;
	}

	private static List<String> createPropertyIds()
	{
		Vector<String> list = new Vector<String>();
		
		list.add("group.comments");
		list.add("jobPosting.name");
		list.add("jobPosting.description");
		list.add("jobPosting.company.name");
		list.add("comments");
		list.add("startDate");
		list.add("endDate");
		list.add("state");
		list.add("jobParts");
		list.add("supervisingProfessor");
		
		return list;
	}
	
	@Override
	protected void setupUI()
	{
		super.setupUI();
		
		form.setImmediate(true);
		form.setWriteThrough(false);
		
		form.setFormFieldFactory(new FormFieldFactory() 
		{
			@Override
			public Field createField(Item item, Object propertyId, Component uiContext) 
			{
				if (propertyId.equals("jobPosting.name"))
				{
					jobNameTextField = new TextField(getLocalizedString("JOB_NAME_CAPTION"));
					jobNameTextField.setWidth("100%");
					jobNameTextField.setReadOnly(true);
					jobNameTextField.setNullRepresentation("-");
					
					return jobNameTextField;
				}
				else if (propertyId.equals("jobPosting.description"))
				{
					jobDescriptionTextArea = new TextArea(getLocalizedString("JOB_DESCRIPTION_CAPTION"));
					jobDescriptionTextArea.setWidth("100%");
					jobDescriptionTextArea.setReadOnly(true);
					jobDescriptionTextArea.setNullRepresentation("-");
					
					return jobDescriptionTextArea;
				}
				else if (propertyId.equals("group.comments") && !isUserStudent())
				{
					if (getContext().getSelectedCoop().isGroupCoOp())
					{
						groupCommentsTextField = new TextArea(getLocalizedString("GROUP_COMMENTS_CAPTION"));
						groupCommentsTextField.setNullRepresentation("-");
						groupCommentsTextField.setWidth("100%");
						groupCommentsTextField.setReadOnly(true);
						
						return groupCommentsTextField;
					}
				}
				else if (propertyId.equals("comments") && !isUserStudent())
				{
					commentsTextArea = new TextArea(getLocalizedString("COMMENTS_CAPTION"));
					commentsTextArea.setWidth("100%");
					commentsTextArea.setNullRepresentation("");
					commentsTextArea.setNullSettingAllowed(true);
					
					return commentsTextArea;
				}
				else if (propertyId.equals("startDate"))
				{
					startDateField = new DateField(getLocalizedString("START_DATE_CAPTION"));
					startDateField.setWidth("100%");
					startDateField.setResolution(DateField.RESOLUTION_DAY);
					
					return startDateField;
				}
				else if (propertyId.equals("endDate"))
				{
					endDateField = new DateField(getLocalizedString("END_DATE_CAPTION"));
					endDateField.setWidth("100%");
					endDateField.setResolution(DateField.RESOLUTION_DAY);
					
					return endDateField;
				}
				else if (propertyId.equals("state") && !isUserStudent())
				{
					stateComboBox = new EnumComboBox(getLocalizedString("STATE_CAPTION"), JobStateType.class);
					stateComboBox.setWidth("100%");
					
					stateComboBox.setTextInputAllowed(false);
					
					stateComboBox.setNullSelectionAllowed(false);
					
					return stateComboBox;
				}
				else if (propertyId.equals("jobParts"))
				{
					jobPartsTableComponent = new JobPartsTableComponent(getLocalizedString("JOB_PARTS_CAPTION"));
					jobPartsTableComponent.setWidth("100%");
					jobPartsTableComponent.setParentModel(getModel().getBean());
					
					return jobPartsTableComponent;
				}
				else if (propertyId.equals("jobPosting.company.name"))
				{
					companyNameTextField = new TextField(getLocalizedString("COMPANY_CAPTION"));
					companyNameTextField.setWidth("100%");
					companyNameTextField.setNullRepresentation("-");
					companyNameTextField.setReadOnly(true);
					
					return companyNameTextField;
				}
				else if (propertyId.equals("supervisingProfessor"))
				{
					ProfessorPickerField field = new ProfessorPickerField(getLocalizedString("PROFESSOR_CAPTION"));

					field.setWidth("100%");
					field.setClearAllowed(false);
					
					//field.setBrowseEnabled(!isUserStudent());
					
					field.setParentAdjuster(new PickerField.ParentAdjuster<Professor>()
					{
						@Override
						public void addToParent(Professor element)
						{
							if (!getContext().getSession().isLoaded(element, "supervisedJobs")) 
								return;
					
							element.getSupervisedJobs().add(getModel().getBean());
						}

						@Override
						public void removeFromParent(Professor element)
						{
							if (!getContext().getSession().isLoaded(element, "supervisedJobs")) 
								return;
					
							element.getSupervisedJobs().remove(getModel().getBean());
						}
					});
					
					professorPickerField = field;
				
					return professorPickerField;
				}
				return null;
			}
		});

	}

	@Override
	protected void setupLocalizedCaptions(Locale locale)
	{
		super.setupLocalizedCaptions(locale);
		
		form.setCaption(getLocalizedString("JOB_FORM_CAPTION"));

		if(commentsTextArea != null)
			commentsTextArea.setCaption(getLocalizedString("COMMENTS_CAPTION"));
		
		if (jobNameTextField != null)
			jobNameTextField.setCaption(getLocalizedString("JOB_NAME_CAPTION"));
		
		if (jobDescriptionTextArea != null)
			jobDescriptionTextArea.setCaption(getLocalizedString("JOB_DESCRIPTION_CAPTION"));
		
		if (groupCommentsTextField != null)
		{
			if (getContext().getSelectedCoop().isGroupCoOp())
			{
				groupCommentsTextField.setCaption(getLocalizedString("GROUP_COMMENTS_CAPTION"));
			}
		}
		
		if (startDateField != null)
			startDateField.setCaption(getLocalizedString("START_DATE_CAPTION"));
		
		if (endDateField != null)
			endDateField.setCaption(getLocalizedString("END_DATE_CAPTION"));
		
		if (stateComboBox != null)
			commentsTextArea.setCaption(getLocalizedString("STATE_CAPTION"));
		
		if (manDayValueTextField != null)
			manDayValueTextField.setCaption(getLocalizedString("MAN_DAY_VALUE_CAPTION"));
		
		if (manDaysTotalTextField != null)
			manDaysTotalTextField.setCaption(getLocalizedString("TOTAL_MAN_DAYS_CAPTION"));
		
		if (jobPartsTableComponent != null)
			jobPartsTableComponent.setCaption(getLocalizedString("JOB_PARTS_CAPTION"));
		
		if (companyNameTextField != null)
			companyNameTextField.setCaption(getLocalizedString("COMPANY_CAPTION"));
		
		if (professorPickerField != null)
			professorPickerField.setCaption(getLocalizedString("PROFESSOR_CAPTION"));
	}

	@Override
	public void setReadOnly(boolean readOnly)
	{
		super.setReadOnly(readOnly);
		
		form.setReadOnly(readOnly);
	}

}
