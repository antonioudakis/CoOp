package softeng.coop.ui.composites;

import java.util.Collection;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Locale;
import java.util.Set;
import java.util.Vector;

import softeng.coop.dataaccess.Group;
import softeng.coop.dataaccess.Registration;
import softeng.coop.dataaccess.Student;
import softeng.coop.ui.ICoopContext;
import softeng.coop.ui.composites.TableComponent.ColumnSpecification;
import softeng.coop.ui.data.DataItemContainer;
import softeng.ui.vaadin.mvp.IView;
import softeng.ui.vaadin.mvp.Presenter;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.util.BeanItem;
import com.vaadin.ui.Table;
import com.vaadin.ui.TextArea;
import com.vaadin.ui.VerticalLayout;

@SuppressWarnings("serial")
public class GroupDetailsComponent 
	extends CoopComponent<Group> 
{
	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private RegistrationPreferencesComponent registrationPreferencesComponent;
	@AutoGenerated
	private Table groupMemberTable;
	@AutoGenerated
	private TextArea commentsTextArea;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	private Vector<ColumnSpecification> studentSpecifications = new Vector<ColumnSpecification>();
	private Vector<String> studentTableVisibleColumns = new Vector<String>();
	
	private DataItemContainer<Student> studentContainer;
	
	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public GroupDetailsComponent() 
	{	
		buildMainLayout();
		setCompositionRoot(mainLayout);
		
		groupMemberTable.addListener(new Property.ValueChangeListener() 
		{	
			@Override
			public void valueChange(ValueChangeEvent event) 
			{
				Student selectedStudent = (Student) groupMemberTable.getValue();
				
				if (selectedStudent == null)
				{
					registrationPreferencesComponent.setModel(null);
					registrationPreferencesComponent.dataBind();
					return;
				}
				
				Registration studentRegistration = null;
				
				for (Registration registration : selectedStudent.getRegistrations())
				{
					if (registration.getCoop() == getContext().getSelectedCoop())
					{
						studentRegistration = registration;
						break;
					}
				}
				registrationPreferencesComponent.setModel(new BeanItem<Registration>(studentRegistration));	
				registrationPreferencesComponent.dataBind();
				registrationPreferencesComponent.setReadOnly(true);
			}
		});
	}

	@Override
	protected void setupUI() 
	{
		super.setupUI();
		
		//this.setCaption(getLocalizedString("GROUP_DETAILS_COMPONENT_CAPTION"));
		
		ColumnSpecification surnameSpecification =
			new ColumnSpecification("surname", "SURNAME_CAPTION");
		this.studentSpecifications.add(surnameSpecification);
		
		this.studentTableVisibleColumns.add("surname");
		
		ColumnSpecification nameSpecification = 
			new ColumnSpecification("name", "NAME_CAPTION");
		this.studentSpecifications.add(nameSpecification);
		
		this.studentTableVisibleColumns.add("name");
		
		ColumnSpecification serialNumberSpecification =
			new ColumnSpecification("serialNumber", "SERIAL_NUMBER_CAPTION");
		this.studentSpecifications.add(serialNumberSpecification);
		
		this.studentTableVisibleColumns.add("serialNumber");
		
		ColumnSpecification fatherNameSpecification =
			new ColumnSpecification("fatherName", "FATHER_NAME_CAPTION");
		this.studentSpecifications.add(fatherNameSpecification);
		
		this.studentTableVisibleColumns.add("fatherName");
		
		groupMemberTable.setHeight("150px");
		groupMemberTable.setCaption(getLocalizedString("GROUP_TABLE_CAPTION"));
		groupMemberTable.setVisible(false);
		
		this.registrationPreferencesComponent.setHorizontal(false);

		this.commentsTextArea.setReadOnly(true);
		this.commentsTextArea.setNullRepresentation("");
		this.commentsTextArea.setNullSettingAllowed(true);
		this.commentsTextArea.setVisible(false);
	}

	@Override
	protected void setupLocalizedCaptions(Locale locale) 
	{
		super.setupLocalizedCaptions(locale);
	
		this.setupLocalizedTableHeaders(
				studentSpecifications, 
				groupMemberTable);
		
		this.groupMemberTable.setCaption(getLocalizedString("GROUP_TABLE_CAPTION"));
		
	}
	
	@Override
	protected Presenter<Group, ICoopContext, ? extends IView<Group, ICoopContext>> supplyPresenter() 
	{
		return null;
	}

	@Override
	public void dataBind() 
	{
		Group selectedGroup = this.getModel();
		
		if (selectedGroup == null)
		{
			this.registrationPreferencesComponent.setModel(null);
			this.groupMemberTable.setContainerDataSource(null);
			this.groupMemberTable.setVisible(false);
			this.registrationPreferencesComponent.dataBind();
			this.commentsTextArea.setVisible(false);
			
			return;
		}
			
		boolean isGroup = this.getContext().getSelectedCoop().isGroupCoOp();
		
		if (isGroup)
		{
			this.groupMemberTable.setVisible(true);
			this.groupMemberTable.setSelectable(true);
			this.commentsTextArea.setVisible(true);
			
			Set<Registration> groupRegistrations = selectedGroup.getRegistrations();
			 
			Set<Student> groupStudents = new HashSet<Student>();
			 
			for (Registration registration : groupRegistrations)
			{
				groupStudents.add(registration.getStudent());
			}
			 
			studentContainer = new DataItemContainer<Student>(
				Student.class,
				groupStudents,
				this.getContext().getSession().getBaseManager(),
				studentTableVisibleColumns
			); 

			this.groupMemberTable.setContainerDataSource(studentContainer);
			this.groupMemberTable.setVisibleColumns(studentTableVisibleColumns.toArray());
			
			this.commentsTextArea.setReadOnly(false);
			this.commentsTextArea.setValue(selectedGroup.getComments() != null ? selectedGroup.getComments() : "");
			this.commentsTextArea.setReadOnly(true);
			
			this.setupLocalizedTableHeaders(studentSpecifications, groupMemberTable);
		}
		else
		{
			this.groupMemberTable.setContainerDataSource(null);
			this.groupMemberTable.setVisible(false);
			this.commentsTextArea.setVisible(false);
		}
		
		if (!isGroup)
		{
			Iterator<Registration> registrationsIterator = selectedGroup.getRegistrations().iterator();
			
			if (registrationsIterator.hasNext())
			{
				Registration registration = registrationsIterator.next();
			
				this.registrationPreferencesComponent.setModel(new BeanItem<Registration>(registration));
			}
			else
			{
				this.registrationPreferencesComponent.setModel(null);
			}
			
			this.registrationPreferencesComponent.dataBind();
			
//			if (groupMemberTable.getListeners(Property.ValueChangeListener.class) != null)
//			{
//				groupMemberTable.getListeners(Property.ValueChangeListener.class).clear();
//			}
			this.registrationPreferencesComponent.setReadOnly(true);
		}
	}

	private void setupLocalizedTableHeaders(
			Collection<ColumnSpecification> columnSpecifications, 
			Table table)
	{
		for (ColumnSpecification specification : columnSpecifications)
		{
			table.setColumnHeader(specification.getPropertyId(), getLocalizedString(specification.getCaptionResourceId()));
		}
		
		commentsTextArea.setCaption(getLocalizedString("GROUP_COMMENTS_CAPTION"));
	}

	public RegistrationPreferencesComponent getRegistrationPreferencesComponent()
	{
		return registrationPreferencesComponent;
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout()
	{
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("-1px");
		mainLayout.setMargin(false);
		mainLayout.setSpacing(true);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("-1px");
		
		// commentsTextArea
		commentsTextArea = new TextArea();
		commentsTextArea.setImmediate(false);
		commentsTextArea.setWidth("100.0%");
		commentsTextArea.setHeight("-1px");
		commentsTextArea.setNullSettingAllowed(true);
		mainLayout.addComponent(commentsTextArea);
		
		// groupMemberTable
		groupMemberTable = new Table();
		groupMemberTable.setImmediate(true);
		groupMemberTable.setWidth("100.0%");
		groupMemberTable.setHeight("-1px");
		mainLayout.addComponent(groupMemberTable);
		
		// registrationPreferencesComponent
		registrationPreferencesComponent = new RegistrationPreferencesComponent();
		registrationPreferencesComponent.setImmediate(false);
		registrationPreferencesComponent.setWidth("100.0%");
		registrationPreferencesComponent.setHeight("-1px");
		mainLayout.addComponent(registrationPreferencesComponent);
		
		return mainLayout;
	}

}
