package softeng.coop.ui.composites;

import java.util.Locale;
import java.util.Vector;

import softeng.coop.dataaccess.AuthenticatedUser;
import softeng.coop.dataaccess.CoOp;
import softeng.coop.dataaccess.GradePolicyType;
import softeng.coop.dataaccess.Group;
import softeng.coop.dataaccess.Student;
import softeng.coop.ui.ICoopContext;
import softeng.coop.ui.forms.GroupForm;
import softeng.coop.ui.viewdefinitions.IFormView;
import softeng.ui.vaadin.mvp.IView;
import softeng.ui.vaadin.mvp.Presenter;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Item;
import com.vaadin.data.Property;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.util.BeanItem;
import com.vaadin.ui.CheckBox;
import com.vaadin.ui.Component;
import com.vaadin.ui.Field;
import com.vaadin.ui.FormFieldFactory;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;

@SuppressWarnings("serial")
public class GroupReportsComponent
extends CoopComponent<BeanItem<Group>>
implements IFormView<BeanItem<Group>>
{

	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private GroupForm form;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */
	
	private TextField gradeTextField;
	private CheckBox passedCheckBox;
	private GroupReportsTableComponent reportsTableComponent;
	
	private static Vector<String> propertyIds = createPropertyIds(); 

	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public GroupReportsComponent()
	{
		buildMainLayout();
		setCompositionRoot(mainLayout);
	}

	private static Vector<String> createPropertyIds()
	{
		Vector<String> list = new Vector<String>();
		
		list.add("reports");
		list.add("grade");
		list.add("passed");
		
		return list;
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout()
	{
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);
		mainLayout.setSpacing(true);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// form
		form = new GroupForm();
		form.setImmediate(false);
		form.setWidth("100.0%");
		form.setHeight("-1px");
		mainLayout.addComponent(form);
		
		return mainLayout;
	}

	@Override
	public boolean isDataValid()
	{
		return form.isValid();
	}

	@Override
	public void discardChanges()
	{
		form.discard();
	}

	@Override
	public void commitChangesToModel()
	{
		form.commit();
	}

	@Override
	protected Presenter<BeanItem<Group>, ICoopContext, ? extends IView<BeanItem<Group>, ICoopContext>> supplyPresenter()
	{
		return null;
	}

	@Override
	public void dataBind()
	{
		form.setItemDataSource(getModel(), propertyIds);
	}

	@Override
	protected void setupUI()
	{
		super.setupUI();
		
		form.setImmediate(true);
		form.setWriteThrough(false);
		
		VerticalLayout layout = new VerticalLayout();
		layout.setSpacing(true);
		
		form.setLayout(layout);
		
		form.setFormFieldFactory(new FormFieldFactory()
		{
			@Override
			public Field createField(Item item, Object propertyId, Component uiContext)
			{
				if (propertyId.equals("reports"))
				{
					reportsTableComponent = new GroupReportsTableComponent();
					
					reportsTableComponent.setCaption(getLocalizedString("REPORTS_CAPTION"));
					reportsTableComponent.setWidth("100%");
					reportsTableComponent.setParentModel(getModel().getBean());
					
					return reportsTableComponent;
				}
				else if (propertyId.equals("grade"))
				{
					CoOp currentCoop = getModel().getBean().getCoOp();
					
					if (currentCoop == null) return null;

					if (currentCoop.getGradePolicy() == GradePolicyType.HasGrade 
							&& currentCoop.isHasGroupGrade() && currentCoop.isGroupCoOp())
					{
						AuthenticatedUser currentUser = getContext().getSession().getAuthenticatedUser();
						
						gradeTextField = new TextField();
					
						gradeTextField.setWidth("100%");
						gradeTextField.setCaption(getLocalizedString("GRADE_CAPTION"));
						gradeTextField.setReadOnly(currentUser instanceof Student);
						gradeTextField.setNullRepresentation("");
						gradeTextField.setNullSettingAllowed(true);

						gradeTextField.addListener(new Property.ValueChangeListener()
						{
							@Override
							public void valueChange(ValueChangeEvent event)
							{
								if (passedCheckBox == null) return;
								
								String gradeString = (String)event.getProperty().getValue();
								
								Float grade = null;
								
								try
								{
									grade = Float.parseFloat(gradeString);
								}
								catch (Exception ex)
								{
									return;
								}
								
								if (grade == null) return;
								
								passedCheckBox.setValue(grade >= 5.0f);
							}
						});

						return gradeTextField;
					}
				}
				else if (propertyId.equals("passed"))
				{
					CoOp currentCoop = getModel().getBean().getCoOp();
					
					if (currentCoop == null) return null;

					if (currentCoop.isHasGroupGrade() && currentCoop.isGroupCoOp())
					{
						passedCheckBox = new CheckBox();
						
						AuthenticatedUser currentUser = getContext().getSession().getAuthenticatedUser();
	
						passedCheckBox.setReadOnly(currentUser instanceof Student);
	
						passedCheckBox.setCaption(getLocalizedString("PASSED_CAPTION"));
						passedCheckBox.setWidth("100%");
						
						return passedCheckBox;
					}
				}

				return null;
			}
		});
	}

	@Override
	protected void setupLocalizedCaptions(Locale locale)
	{
		super.setupLocalizedCaptions(locale);
		
		form.setCaption(getLocalizedString("FORM_CAPTION"));

		if (gradeTextField != null)
			gradeTextField.setCaption(getLocalizedString("GRADE_CAPTION"));
		
		if (passedCheckBox != null)
			passedCheckBox.setCaption(getLocalizedString("PASSED_CAPTION"));
		
		if (reportsTableComponent != null)
			reportsTableComponent.setCaption(getLocalizedString("REPORTS_CAPTION"));
	}

	@Override
	public void setReadOnly(boolean readOnly)
	{
		super.setReadOnly(readOnly);
		
		form.setReadOnly(readOnly);
	}

}
