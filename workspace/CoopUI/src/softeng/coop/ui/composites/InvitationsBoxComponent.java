package softeng.coop.ui.composites;

import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.Set;

import softeng.coop.dataaccess.Invitation;
import softeng.coop.dataaccess.Registration;
import softeng.coop.dataaccess.Student;
import softeng.coop.ui.ICoopContext;
import softeng.coop.ui.dialogs.ConfirmationDialog;
import softeng.coop.ui.forms.InvitationForm;
import softeng.coop.ui.forms.StudentForm;
import softeng.coop.ui.presenters.InvitationsBoxPresenter;
import softeng.coop.ui.viewdefinitions.IInvitationsBoxView;
import softeng.coop.ui.viewdefinitions.IOkCancelView;
import softeng.coop.ui.viewdefinitions.viewmodels.ElementExecutionVote;
import softeng.coop.ui.viewdefinitions.viewmodels.InvitationType;
import softeng.coop.ui.viewdefinitions.viewmodels.OkCancelViewModel;
import softeng.ui.vaadin.mvp.EventSubscription;
import softeng.ui.vaadin.mvp.IListener;
import softeng.ui.vaadin.mvp.IView;
import softeng.ui.vaadin.mvp.IViewListener;
import softeng.ui.vaadin.mvp.ModelEvent;
import softeng.ui.vaadin.mvp.Presenter;
import softeng.ui.vaadin.mvp.ViewEvent;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Item;
import com.vaadin.data.util.BeanItem;
import com.vaadin.terminal.ThemeResource;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Component;
import com.vaadin.ui.Field;
import com.vaadin.ui.FormFieldFactory;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.TextArea;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;

@SuppressWarnings("serial")
public class InvitationsBoxComponent 
extends CoopComponent<BeanItem<Registration>>
implements IInvitationsBoxView
{

	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private HorizontalLayout cascadingHorizontalLayout;
	@AutoGenerated
	private VerticalLayout personInfoVerticalLayout;
	@AutoGenerated
	private RegistrationPreferencesComponent registrationPreferencesComponent;
	@AutoGenerated
	private StudentForm studentForm;
	@AutoGenerated
	private VerticalLayout invitationDetailsVerticalLayout;
	@AutoGenerated
	private InvitationForm invitationForm;
	@AutoGenerated
	private VerticalLayout invitationsVerticalLayout;
	@AutoGenerated
	private Button acceptButton;
	@AutoGenerated
	private InvitationsTableComponent invitationsTableComponent;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	private class SelectedRegistrationChangeListener
	implements IListener<ModelEvent<Registration>>
	{
		@Override
		public void onEvent(ModelEvent<Registration> event)
		{
			onSelectedRegistrationChanged(event.getModel());
		}
	}
	
	private SelectedRegistrationChangeListener selectedRegistrationChangeListener = 
		new SelectedRegistrationChangeListener();

	private InvitationType invitationType;
	
	private InvitationMembersTableComponent recepientsTableComponent;
	
	private TextArea textArea;
	
	private TextField senderSurnameTextField;
	
	private TextField studentSurnameTextField;
	
	private TextField studentNameTextField;
	
	private TextField studentCodeTextField;
	
	private TextField studentFatherNameTextField;
	
	private GroupMembersTableComponent groupMembersTableComponent;
	
	private EventSubscription<ElementExecutionVote<Invitation>, IListener<ElementExecutionVote<Invitation>>> acceptEventSubscription =
		new EventSubscription<ElementExecutionVote<Invitation>, IListener<ElementExecutionVote<Invitation>>>();
	
	private static List<String> invitationPropertyIds = createInvitationPropertyIds();
	
	private static List<String> studentPropertyIds = createStudentPropertyIds();
	
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public InvitationsBoxComponent()
	{
		buildMainLayout();
		setCompositionRoot(mainLayout);
		
		invitationType = InvitationType.SentInvitations;
		
		invitationsTableComponent.setAddVisible(true);
		invitationsTableComponent.setDeleteVisible(false);
		
		acceptButton.setVisible(false);
		
		acceptButton.addListener(new Button.ClickListener()
		{
			@Override
			public void buttonClick(ClickEvent event)
			{
				onAcceptInvitation();
			}
		});

		invitationsTableComponent.addSelectedChangeListener(new IListener<ModelEvent<Invitation>>()
		{
			@Override
			public void onEvent(ModelEvent<Invitation> event)
			{
				onSelectedInvitationChanged();
			}
		});
		
		VerticalLayout invitationFormLayout = new VerticalLayout();
		
		invitationFormLayout.setWidth("100%");
		invitationFormLayout.setSpacing(true);
		
		invitationForm.setLayout(invitationFormLayout);
	}

	private static List<String> createStudentPropertyIds()
	{
		ArrayList<String> list = new ArrayList<String>();
		
		list.add("surname");
		list.add("name");
		list.add("fatherName");
		list.add("serialNumber");
		list.add("gender");
		
		return list;
	}

	private void onAcceptInvitation()
	{
		if (getInvitationType() != InvitationType.ReceivedInvitations) return;
		
		Invitation invitation = invitationsTableComponent.getSelectedValue();
		
		if (invitation == null) return;

		ConfirmationDialog confirmationDialog = 
			new ConfirmationDialog(
					getLocalizedString("CONFIRM_ACCEPT_CAPTION"), 
					getLocalizedString("CONFIRM_ACCEPT_DESCRIPTION"));
		
		confirmationDialog.setModal(true);
		
		getApplication().getMainWindow().addWindow(confirmationDialog);
		
		confirmationDialog.getOkCancelView().addOkListener(new IViewListener<OkCancelViewModel, ICoopContext, IOkCancelView>()
		{
			@Override
			public void onEvent(ViewEvent<OkCancelViewModel, ICoopContext, IOkCancelView> event)
			{
				onConfirmAcceptInvitation();
			}
		});
	}
	
	private void onConfirmAcceptInvitation()
	{
		if (getInvitationType() != InvitationType.ReceivedInvitations) return;
		
		Invitation invitation = invitationsTableComponent.getSelectedValue();
		
		if (invitation == null) return;
		
		ElementExecutionVote<Invitation> vote = new ElementExecutionVote<Invitation>(invitation);
		
		acceptEventSubscription.fire(vote);
	}

	private static List<String> createInvitationPropertyIds()
	{
		ArrayList<String> list = new ArrayList<String>();
		
		list.add("sender.student.surname");
		list.add("text");
		list.add("recepients");
		list.add("group.registrations");
		
		return list;
	}

	@Override
	public InvitationType getInvitationType()
	{
		return invitationType;
	}

	@Override
	public void setInvitationType(InvitationType invitationType)
	{
		if (invitationType == null) 
			throw new IllegalArgumentException("Argument 'invitationType' must not be null.");
		
		this.invitationType = invitationType;
		
		switch (invitationType)
		{
			case SentInvitations:
				invitationsTableComponent.setAddVisible(true);
				acceptButton.setVisible(false);
				break;
				
			case ReceivedInvitations:
				invitationsTableComponent.setAddVisible(false);
				acceptButton.setVisible(true);
				break;
		}
		
		updateInvitationsTableCaption();
	}

	@Override
	protected Presenter<BeanItem<Registration>, ICoopContext, ? extends IView<BeanItem<Registration>, ICoopContext>> supplyPresenter()
	{
		return new InvitationsBoxPresenter(this);
	}

	@Override
	public void dataBind()
	{
		Set<Invitation> invitations = null;

		if (getModel() != null)
		{
			Registration registration = getModel().getBean();
			
			invitationsTableComponent.setParentModel(registration);
			
			switch (getInvitationType())
			{
				case ReceivedInvitations:
					invitations = registration.getReceivedInvitations();
					break;
					
				case SentInvitations:
					invitations = registration.getSentInvitations();
					break;
			}
		}
		else
		{
			invitationsTableComponent.setParentModel(null);
		}
		
		invitationsTableComponent.setModel(invitations);
		invitationsTableComponent.dataBind();
	}

	@Override
	protected void setupUI()
	{
		super.setupUI();
		
		acceptButton.setIcon(new ThemeResource("../images/actions/ok.png"));
		
		studentForm.setImmediate(false);
		studentForm.setReadOnly(true);
		
		studentForm.setFormFieldFactory(new FormFieldFactory()
		{
			@Override
			public Field createField(Item item, Object propertyId, Component uiContext)
			{
				if (propertyId.equals("name"))
				{
					studentNameTextField = new TextField();
					studentNameTextField.setWidth("100%");
					studentNameTextField.setCaption(getLocalizedString("STUDENT_NAME_CAPTION"));
					studentNameTextField.setNullRepresentation("-");
					
					return studentNameTextField;
				}
				else if (propertyId.equals("surname"))
				{
					studentSurnameTextField = new TextField();
					studentSurnameTextField.setWidth("100%");
					studentSurnameTextField.setCaption(getLocalizedString("STUDENT_SURNAME_CAPTION"));
					studentSurnameTextField.setNullRepresentation("-");
					
					return studentSurnameTextField;
				}
				else if (propertyId.equals("fatherName"))
				{
					studentFatherNameTextField = new TextField();
					studentFatherNameTextField.setWidth("100%");
					studentFatherNameTextField.setCaption(getLocalizedString("STUDENT_FATHER_NAME_CAPTION"));
					studentFatherNameTextField.setNullRepresentation("-");
					
					return studentFatherNameTextField;
				}
				else if (propertyId.equals("serialNumber"))
				{
					studentCodeTextField = new TextField();
					studentCodeTextField.setWidth("100%");
					studentCodeTextField.setCaption(getLocalizedString("STUDENT_CODE_CAPTION"));
					studentCodeTextField.setNullRepresentation("-");
					
					return studentCodeTextField;
				}
				
				return null;
			}
		});
		
		registrationPreferencesComponent.setReadOnly(true);
		registrationPreferencesComponent.setHorizontal(false);
				
		invitationForm.setImmediate(true);
		invitationForm.setReadOnly(true);
		
		invitationForm.setFormFieldFactory(new FormFieldFactory()
		{
			@Override
			public Field createField(Item item, Object propertyId, Component uiContext)
			{
				if (propertyId.equals("text"))
				{
					textArea = new TextArea();
					textArea.setWidth("100%");
					textArea.setCaption(getLocalizedString("TEXT_CAPTION"));
					textArea.setNullRepresentation("");
					textArea.setNullSettingAllowed(true);
					
					return textArea;
				}
				else if (propertyId.equals("recepients"))
				{
					recepientsTableComponent = new InvitationMembersTableComponent();
					recepientsTableComponent.setWidth("100%");
					recepientsTableComponent.setCaption(getLocalizedString("RECEPIENTS_CAPTION"));
					recepientsTableComponent.setAddVisible(false);
					recepientsTableComponent.setEditable(false);
					recepientsTableComponent.setDeleteVisible(false);
					
					recepientsTableComponent.addSelectedChangeListener(selectedRegistrationChangeListener);
					
					return recepientsTableComponent;
				}
				else if (propertyId.equals("sender.student.surname"))
				{
					senderSurnameTextField = new TextField();
					senderSurnameTextField.setWidth("100%");
					senderSurnameTextField.setCaption(getLocalizedString("SENDER_SURNAME_CAPTION"));
					senderSurnameTextField.setNullRepresentation("");
					
					return senderSurnameTextField;
				}
				else if (propertyId.equals("group.registrations"))
				{
					groupMembersTableComponent = new GroupMembersTableComponent();
					groupMembersTableComponent.setWidth("100%");
					groupMembersTableComponent.setCaption(getLocalizedString("GROUP_MEMBERS_CAPTION"));
					groupMembersTableComponent.setAddVisible(false);
					groupMembersTableComponent.setEditVisible(false);
					groupMembersTableComponent.setDeleteVisible(false);
					
					groupMembersTableComponent.addSelectedChangeListener(selectedRegistrationChangeListener);
					
					return groupMembersTableComponent;
				}
				
				return null;
			}
		});
		
		invitationsTableComponent.setImmediate(true);
	}
	
	protected void onSelectedInvitationChanged()
	{
		BeanItem<Invitation> invitationItem = invitationsTableComponent.getSelectedItem();
		
		invitationForm.setItemDataSource(invitationItem, invitationPropertyIds);
		
		if (getInvitationType() == InvitationType.ReceivedInvitations)
		{
			acceptButton.setEnabled(invitationItem != null);
		}
		
		registrationPreferencesComponent.setModel(null);
		registrationPreferencesComponent.dataBind();
		
		studentForm.setItemDataSource(null, studentPropertyIds);
	}

	private void onSelectedRegistrationChanged(Registration registration)
	{
		if (registration != null)
		{
			BeanItem<Student> studentItem = new BeanItem<Student>(registration.getStudent());
			BeanItem<Registration> registrationItem = new BeanItem<Registration>(registration);
			
			studentForm.setItemDataSource(studentItem, studentPropertyIds);
		
			registrationPreferencesComponent.setModel(registrationItem);
			registrationPreferencesComponent.dataBind();
		}
	}

	@Override
	protected void setupLocalizedCaptions(Locale locale)
	{
		super.setupLocalizedCaptions(locale);
		
		updateInvitationsTableCaption();
		
		acceptButton.setCaption(getLocalizedString("ACCEPT_CAPTION"));
		acceptButton.setDescription(getLocalizedString("ACCEPT_DESCRIPTION"));
		
		invitationForm.setCaption(getLocalizedString("INVITATION_FORM_CAPTION"));

		if (textArea != null)
			textArea.setCaption(getLocalizedString("TEXT_CAPTION"));

		if (recepientsTableComponent != null)
			recepientsTableComponent.setCaption(getLocalizedString("RECEPIENTS_CAPTION"));
		
		if (senderSurnameTextField != null)
			senderSurnameTextField.setCaption(getLocalizedString("SENDER_SURNAME_CAPTION"));
		
		if (groupMembersTableComponent != null)
			groupMembersTableComponent.setCaption(getLocalizedString("GROUP_MEMBERS_CAPTION"));
		
		studentForm.setCaption(getLocalizedString("STUDENT_FORM_CAPTION"));
		
		if (studentNameTextField != null)
			studentNameTextField.setCaption(getLocalizedString("STUDENT_NAME_CAPTION"));
		
		if (studentSurnameTextField != null)
			studentSurnameTextField.setCaption(getLocalizedString("STUDENT_SURNAME_CAPTION"));

		if (studentFatherNameTextField != null)
			studentFatherNameTextField.setCaption(getLocalizedString("STUDENT_FATHER_NAME_CAPTION"));

		if (studentCodeTextField != null)
			studentCodeTextField.setCaption(getLocalizedString("STUDENT_CODE_CAPTION"));
	}

	private void updateInvitationsTableCaption()
	{
		if (getApplication() == null) return;
		
		switch (getInvitationType())
		{
			case SentInvitations:
				invitationsTableComponent.setCaption(getLocalizedString("SENT_INVITATIONS_CAPTION"));
				break;
				
			case ReceivedInvitations:
				invitationsTableComponent.setCaption(getLocalizedString("RECEIVED_INVITATIONS_CAPTION"));
				break;
		}
	}

	@Override
	public void addAcceptInvitationListener(IListener<ElementExecutionVote<Invitation>> listener)
	{
		acceptEventSubscription.add(listener);
	}

	@Override
	public void removeAcceptInvitationListener(IListener<ElementExecutionVote<Invitation>> listener)
	{
		acceptEventSubscription.remove(listener);
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout()
	{
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("-1px");
		mainLayout.setMargin(false);
		mainLayout.setSpacing(true);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("-1px");
		
		// cascadingHorizontalLayout
		cascadingHorizontalLayout = buildCascadingHorizontalLayout();
		mainLayout.addComponent(cascadingHorizontalLayout);
		
		return mainLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildCascadingHorizontalLayout()
	{
		// common part: create layout
		cascadingHorizontalLayout = new HorizontalLayout();
		cascadingHorizontalLayout.setImmediate(false);
		cascadingHorizontalLayout.setWidth("100.0%");
		cascadingHorizontalLayout.setHeight("-1px");
		cascadingHorizontalLayout.setMargin(false);
		cascadingHorizontalLayout.setSpacing(true);
		
		// invitationsVerticalLayout
		invitationsVerticalLayout = buildInvitationsVerticalLayout();
		cascadingHorizontalLayout.addComponent(invitationsVerticalLayout);
		cascadingHorizontalLayout.setExpandRatio(invitationsVerticalLayout, 0.3f);
		
		// invitationDetailsVerticalLayout
		invitationDetailsVerticalLayout = buildInvitationDetailsVerticalLayout();
		cascadingHorizontalLayout.addComponent(invitationDetailsVerticalLayout);
		cascadingHorizontalLayout.setExpandRatio(invitationDetailsVerticalLayout, 0.35f);
		
		// personInfoVerticalLayout
		personInfoVerticalLayout = buildPersonInfoVerticalLayout();
		cascadingHorizontalLayout.addComponent(personInfoVerticalLayout);
		cascadingHorizontalLayout.setExpandRatio(personInfoVerticalLayout, 0.35f);
		
		return cascadingHorizontalLayout;
	}

	@AutoGenerated
	private VerticalLayout buildInvitationsVerticalLayout()
	{
		// common part: create layout
		invitationsVerticalLayout = new VerticalLayout();
		invitationsVerticalLayout.setImmediate(false);
		invitationsVerticalLayout.setWidth("100.0%");
		invitationsVerticalLayout.setHeight("-1px");
		invitationsVerticalLayout.setMargin(false);
		invitationsVerticalLayout.setSpacing(true);
		
		// invitationsTableComponent
		invitationsTableComponent = new InvitationsTableComponent();
		invitationsTableComponent.setImmediate(false);
		invitationsTableComponent.setWidth("100.0%");
		invitationsTableComponent.setHeight("-1px");
		invitationsVerticalLayout.addComponent(invitationsTableComponent);
		
		// acceptButton
		acceptButton = new Button();
		acceptButton.setCaption("Button");
		acceptButton.setImmediate(true);
		acceptButton.setWidth("110px");
		acceptButton.setHeight("-1px");
		invitationsVerticalLayout.addComponent(acceptButton);
		invitationsVerticalLayout.setComponentAlignment(acceptButton, new Alignment(10));
		
		return invitationsVerticalLayout;
	}

	@AutoGenerated
	private VerticalLayout buildInvitationDetailsVerticalLayout()
	{
		// common part: create layout
		invitationDetailsVerticalLayout = new VerticalLayout();
		invitationDetailsVerticalLayout.setImmediate(false);
		invitationDetailsVerticalLayout.setWidth("100.0%");
		invitationDetailsVerticalLayout.setHeight("-1px");
		invitationDetailsVerticalLayout.setMargin(false);
		invitationDetailsVerticalLayout.setSpacing(true);
		
		// invitationForm
		invitationForm = new InvitationForm();
		invitationForm.setImmediate(false);
		invitationForm.setWidth("100.0%");
		invitationForm.setHeight("-1px");
		invitationDetailsVerticalLayout.addComponent(invitationForm);
		
		return invitationDetailsVerticalLayout;
	}

	@AutoGenerated
	private VerticalLayout buildPersonInfoVerticalLayout()
	{
		// common part: create layout
		personInfoVerticalLayout = new VerticalLayout();
		personInfoVerticalLayout.setImmediate(false);
		personInfoVerticalLayout.setWidth("100.0%");
		personInfoVerticalLayout.setHeight("-1px");
		personInfoVerticalLayout.setMargin(false);
		personInfoVerticalLayout.setSpacing(true);
		
		// studentForm
		studentForm = new StudentForm();
		studentForm.setImmediate(false);
		studentForm.setWidth("100.0%");
		studentForm.setHeight("-1px");
		personInfoVerticalLayout.addComponent(studentForm);
		
		// registrationPreferencesComponent
		registrationPreferencesComponent = new RegistrationPreferencesComponent();
		registrationPreferencesComponent.setImmediate(false);
		registrationPreferencesComponent.setWidth("100.0%");
		registrationPreferencesComponent.setHeight("-1px");
		personInfoVerticalLayout.addComponent(registrationPreferencesComponent);
		
		return personInfoVerticalLayout;
	}
}
