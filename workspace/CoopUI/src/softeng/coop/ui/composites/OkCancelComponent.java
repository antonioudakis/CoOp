package softeng.coop.ui.composites;

import java.util.Locale;

import softeng.coop.ui.ICoopContext;
import softeng.coop.ui.viewdefinitions.IOkCancelView;
import softeng.coop.ui.viewdefinitions.viewmodels.CommandExecutionVote;
import softeng.coop.ui.viewdefinitions.viewmodels.OkCancelViewModel;
import softeng.ui.vaadin.mvp.EventSubscription;
import softeng.ui.vaadin.mvp.IListener;
import softeng.ui.vaadin.mvp.IView;
import softeng.ui.vaadin.mvp.IViewListener;
import softeng.ui.vaadin.mvp.Presenter;
import softeng.ui.vaadin.mvp.ViewEvent;
import softeng.ui.vaadin.mvp.ViewEventSubscription;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.event.ShortcutAction.KeyCode;
import com.vaadin.event.ShortcutAction.ModifierKey;
import com.vaadin.terminal.ThemeResource;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.HorizontalLayout;

@SuppressWarnings("serial")
public class OkCancelComponent 
	extends CoopComponent<OkCancelViewModel>
	implements IOkCancelView
{
	@AutoGenerated
	private HorizontalLayout mainLayout;

	@AutoGenerated
	private Button cancelButton;

	@AutoGenerated
	private Button okButton;

	@AutoGenerated
	private Button applyButton;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	private ViewEventSubscription<OkCancelViewModel, ICoopContext, IOkCancelView> 
		okSubscription = 
			new ViewEventSubscription<OkCancelViewModel, ICoopContext, IOkCancelView>();

	private ViewEventSubscription<OkCancelViewModel, ICoopContext, IOkCancelView> 
		cancelSubscription = 
			new ViewEventSubscription<OkCancelViewModel, ICoopContext, IOkCancelView>();

	private EventSubscription<RuntimeException, IListener<RuntimeException>> 
		okFailedSubscription = 
			new EventSubscription<RuntimeException, IListener<RuntimeException>>();
	
	private EventSubscription<CommandExecutionVote, IListener<CommandExecutionVote>>
		executeSubscription =
			new EventSubscription<CommandExecutionVote, IListener<CommandExecutionVote>>();
	
	private boolean shortcutsEnabled;

	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public OkCancelComponent()
	{
		buildMainLayout();
		setCompositionRoot(mainLayout);
		
		this.shortcutsEnabled = true;

		this.setModel(OkCancelViewModel.Select);
		
		final OkCancelComponent me = this;
		
		okButton.addListener(new Button.ClickListener()
		{
			@Override
			public void buttonClick(ClickEvent event)
			{
				onOk();
			}
		});
		
		cancelButton.addListener(new Button.ClickListener()
		{
			@Override
			public void buttonClick(ClickEvent event)
			{
				cancelSubscription.fire(new ViewEvent<OkCancelViewModel, ICoopContext, IOkCancelView>(me));
			}
		});
		
		applyButton.addListener(new Button.ClickListener()
		{
			@Override
			public void buttonClick(ClickEvent event)
			{
				onApply();
			}
		});
	}

	@Override
	protected Presenter<OkCancelViewModel, ICoopContext, ? extends IView<OkCancelViewModel, ICoopContext>> supplyPresenter()
	{
		return null;
	}

	@Override
	public void dataBind()
	{
		updateButtons();
	}
	
	@Override
	public void addOkListener(IViewListener<OkCancelViewModel, ICoopContext, IOkCancelView> listener)
	{
		if (listener == null) 
			throw new IllegalArgumentException("Argument 'listener' must not be null.");
		
		this.okSubscription.add(listener);
	}

	@Override
	public void removeOkListener(IViewListener<OkCancelViewModel, ICoopContext, IOkCancelView> listener)
	{
		if (listener == null) 
			throw new IllegalArgumentException("Argument 'listener' must not be null.");
		
		this.okSubscription.remove(listener);
	}

	@Override
	public void addCancelListener(IViewListener<OkCancelViewModel, ICoopContext, IOkCancelView> listener)
	{
		if (listener == null) 
			throw new IllegalArgumentException("Argument 'listener' must not be null.");
		
		this.cancelSubscription.add(listener);
	}

	@Override
	public void removeCancelListener(IViewListener<OkCancelViewModel, ICoopContext, IOkCancelView> listener)
	{
		if (listener == null) 
			throw new IllegalArgumentException("Argument 'listener' must not be null.");
		
		this.cancelSubscription.remove(listener);
	}

	@Override
	protected void setupUI()
	{
		super.setupUI();
		
		this.okButton.setEnabled(!isReadOnly());
		this.applyButton.setEnabled(!isReadOnly());
	}

	private void onApply()
	{
		if (this.isReadOnly()) return;
		
		CommandExecutionVote commandExecutionVote = new CommandExecutionVote();
		
		try
		{
			this.executeSubscription.fire(commandExecutionVote);
		}
		catch (RuntimeException ex)
		{
			ex.printStackTrace();
			okFailedSubscription.fire(ex);
			throw ex;
		}
	}

	@Override
	protected void setupLocalizedCaptions(Locale locale)
	{
		super.setupLocalizedCaptions(locale);
		
		updateButtons();
	}

	private void updateButtons()
	{
		switch (this.getModel())
		{
			case Save:
				this.okButton.setCaption(getLocalizedString("SAVE_CAPTION"));
				this.okButton.setDescription(getLocalizedString("SAVE_DESCRIPTION"));
				this.okButton.setIcon(new ThemeResource("../images/actions/db_update.png"));
				this.applyButton.setVisible(false);

				this.cancelButton.setDescription(getLocalizedString("CANCEL_DESCRIPTION"));
				
				break;
				
			case Select:
				this.okButton.setCaption(getLocalizedString("OK_CAPTION"));
				this.okButton.setDescription(getLocalizedString("OK_DESCRIPTION"));
				this.okButton.setIcon(new ThemeResource("../images/actions/ok.png"));
				this.applyButton.setVisible(false);

				this.cancelButton.setDescription(getLocalizedString("MODAL_CANCEL_DESCRIPTION"));
				
				break;
				
			case ApplyOrSelect:
				this.okButton.setCaption(getLocalizedString("OK_CAPTION"));
				this.okButton.setDescription(getLocalizedString("OK_DESCRIPTION"));
				this.okButton.setIcon(new ThemeResource("../images/actions/ok.png"));
				this.applyButton.setCaption(getLocalizedString("APPLY_CAPTION"));
				this.applyButton.setDescription(getLocalizedString("APPLY_DESCRIPTION"));
				this.applyButton.setIcon(new ThemeResource("../images/actions/db_update.png"));
				this.applyButton.setVisible(true);

				this.cancelButton.setDescription(getLocalizedString("MODAL_CANCEL_DESCRIPTION"));
				
				break;
		}

		this.cancelButton.setCaption(getLocalizedString("CANCEL_CAPTION"));
		this.cancelButton.setIcon(new ThemeResource("../images/actions/cancel.png"));
	}
	
	private void updateShortcuts()
	{
		if (shortcutsEnabled)
		{
			switch (this.getModel())
			{
				case Save:
					this.okButton.setClickShortcut(KeyCode.S, /* ModifierKey.CTRL */ ModifierKey.ALT);
					this.cancelButton.removeClickShortcut();
					
					break;
					
				case Select:
					this.okButton.setClickShortcut(KeyCode.ENTER);
					this.cancelButton.setClickShortcut(KeyCode.ESCAPE);
					
					break;
					
				case ApplyOrSelect:
					this.okButton.setClickShortcut(KeyCode.ENTER);
					this.cancelButton.setClickShortcut(KeyCode.ESCAPE);
					
					break;
			}
		}
		else 
		{
			this.okButton.removeClickShortcut();
			this.cancelButton.removeClickShortcut();
		}

	}

	@Override
	public void setReadOnly(boolean readOnly)
	{
		super.setReadOnly(readOnly);
		
		if (this.okButton != null) this.okButton.setEnabled(!readOnly);
		if (this.applyButton != null) this.applyButton.setEnabled(!readOnly);
	}

	@Override
	public void addOkFailedListener(IListener<RuntimeException> listener)
	{
		this.okFailedSubscription.add(listener);
	}

	@Override
	public void removeOkFailedListener(IListener<RuntimeException> listener)
	{
		this.okFailedSubscription.remove(listener);
	}

	@Override
	public void addExecuteListener(IListener<CommandExecutionVote> listener)
	{
		this.executeSubscription.add(listener);
	}

	@Override
	public void removeExecuteListener(IListener<CommandExecutionVote> listener)
	{
		this.executeSubscription.remove(listener);
	}

	private void onOk()
	{
		if (this.isReadOnly()) return;
		
		CommandExecutionVote commandExecutionVote = new CommandExecutionVote();
		
		try
		{
			this.executeSubscription.fire(commandExecutionVote);
			
			if (!commandExecutionVote.isFailed())
			{
				ViewEvent<OkCancelViewModel, ICoopContext, IOkCancelView> viewEvent = 
					new ViewEvent<OkCancelViewModel, ICoopContext, IOkCancelView>(this);
				
				this.okSubscription.fire(viewEvent);
			}
		}
		catch (RuntimeException ex)
		{
			okFailedSubscription.fire(ex);
			throw ex;
		}
	}

	@Override
	public void setModel(OkCancelViewModel model)
	{
		super.setModel(model);

		if (getApplication() != null)
		{
			updateButtons();
		}

		updateShortcuts();
	}

	@AutoGenerated
	private HorizontalLayout buildMainLayout()
	{
		// common part: create layout
		mainLayout = new HorizontalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("-1px");
		mainLayout.setHeight("-1px");
		mainLayout.setMargin(true);
		mainLayout.setSpacing(true);
		
		// top-level component properties
		setWidth("-1px");
		setHeight("-1px");
		
		// applyButton
		applyButton = new Button();
		applyButton.setCaption("Button");
		applyButton.setEnabled(false);
		applyButton.setImmediate(true);
		applyButton.setVisible(false);
		applyButton.setWidth("100px");
		applyButton.setHeight("-1px");
		mainLayout.addComponent(applyButton);
		mainLayout.setExpandRatio(applyButton, 1.0f);
		
		// okButton
		okButton = new Button();
		okButton.setCaption("Ok");
		okButton.setImmediate(true);
		okButton.setWidth("100px");
		okButton.setHeight("-1px");
		mainLayout.addComponent(okButton);
		mainLayout.setExpandRatio(okButton, 1.0f);
		
		// cancelButton
		cancelButton = new Button();
		cancelButton.setCaption("Cancel");
		cancelButton.setImmediate(true);
		cancelButton.setWidth("100px");
		cancelButton.setHeight("-1px");
		mainLayout.addComponent(cancelButton);
		mainLayout.setExpandRatio(cancelButton, 1.0f);
		
		return mainLayout;
	}

	@Override
	public boolean areShortcutsEnabled()
	{
		return shortcutsEnabled;
	}

	@Override
	public void setShortcutsEnabled(boolean shortcutsEnabled)
	{
		this.shortcutsEnabled = shortcutsEnabled;
		
		updateShortcuts();
	}

}
